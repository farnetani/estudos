{
    "docs": [
        {
            "location": "/",
            "text": "Informa\u00e7\u00f5es\n\u00b6\n\n\n\n\nDocumenta\u00e7\u00e3o Pessoal de desenvolvimento\n\n\nFontes da documenta\u00e7\u00e3o com autentica\u00e7\u00e3o podem ser baixados\nem:\n\n\nhttps://github.com/farnetani/django_material_mkdocs\n\n\n\n\n\n\nInforma\u00e7\u00f5es de Contato\n\n\nArlei Ferreira Farnetani Junior\n\n\nCEO Farsoft Systems\n\n\nfarnetani@gmail.com\n\n\n(35)98883-7909\n\n\nhttp://www.farsoft.com.br",
            "title": "Informa\u00e7\u00f5es"
        },
        {
            "location": "/#informacoes",
            "text": "Documenta\u00e7\u00e3o Pessoal de desenvolvimento  Fontes da documenta\u00e7\u00e3o com autentica\u00e7\u00e3o podem ser baixados\nem:  https://github.com/farnetani/django_material_mkdocs    Informa\u00e7\u00f5es de Contato  Arlei Ferreira Farnetani Junior  CEO Farsoft Systems  farnetani@gmail.com  (35)98883-7909  http://www.farsoft.com.br",
            "title": "Informa\u00e7\u00f5es"
        },
        {
            "location": "/sobre/",
            "text": "Sobre\n\u00b6\n\n\n\n\nSobre\n\n\nArlei Ferreira Farnetani Junior\n\n\nCEO Farsoft Systems\n\n\nfarnetani@gmail.com\n\n\n(35)98883-7909\n\n\nhttp://www.farsoft.com.br",
            "title": "Sobre"
        },
        {
            "location": "/sobre/#sobre",
            "text": "Sobre  Arlei Ferreira Farnetani Junior  CEO Farsoft Systems  farnetani@gmail.com  (35)98883-7909  http://www.farsoft.com.br",
            "title": "Sobre"
        },
        {
            "location": "/Administra\u00e7\u00e3o/Produtividade/",
            "text": "Produtividade\n\u00b6",
            "title": "Produtividade"
        },
        {
            "location": "/Administra\u00e7\u00e3o/Produtividade/#produtividade",
            "text": "",
            "title": "Produtividade"
        },
        {
            "location": "/Delphi/",
            "text": "Delphi\n\u00b6",
            "title": "Delphi"
        },
        {
            "location": "/Delphi/#delphi",
            "text": "",
            "title": "Delphi"
        },
        {
            "location": "/Desenvolvimento/Mkdocs/",
            "text": "Usando Mkdocs Material\n\u00b6\n\n\nMkdocs Material - Link\n\n\nAtalhos\n\u00b6\n\n\n\n\nWell-designed search interface accessible through hotkeys (\nF\n or\n  \nS\n), intelligent grouping of search results, search term\n  highlighting and lazy loading.\n\n\n\n\nFavicon\n\u00b6\n\n\n\n\nDefault: \nassets/images/favicon.png\n\n\n\n\nImagem\n\u00b6\n\n\n\n\n\n\nAten\u00e7\u00e3o: \nSem Link\n\n\n\n\n\n\nLink\n\u00b6\n\n\nFor detailed instructions see the \ngetting started guide\n.\n\n\nHeadings\n\u00b6\n\n\nThe 3\nrd\n level\n\u00b6\n\n\nThe 4\nth\n level\n\u00b6\n\n\nThe 5\nth\n level\n\u00b6\n\n\nThe 6\nth\n level\n\u00b6\n\n\nHeadings \nwith secondary text\n\u00b6\n\n\nThe 3\nrd\n level \nwith secondary text\n\u00b6\n\n\nThe 4\nth\n level \nwith secondary text\n\u00b6\n\n\nThe 5\nth\n level \nwith secondary text\n\u00b6\n\n\nThe 6\nth\n level \nwith secondary text\n\u00b6\n\n\nBlockquotes\n\u00b6\n\n\n\n\nMorbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet rutrum.\n  Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Nam vehicula nunc\n  mauris, a ultricies libero efficitur sed. \nClass aptent\n taciti sociosqu ad\n  litora torquent per conubia nostra, per inceptos himenaeos. Sed molestie\n  imperdiet consectetur.\n\n\n\n\nOther content blocks\n\u00b6\n\n\n\n\nVestibulum vitae orci quis ante viverra ultricies ut eget turpis. Sed eu\n  lectus dapibus, eleifend nulla varius, lobortis turpis. In ac hendrerit nisl,\n  sit amet laoreet nibh.\n  \nvar\n \n_extends\n \n=\n \nfunction\n(\ntarget\n)\n \n{\n\n  \nfor\n \n(\nvar\n \ni\n \n=\n \n1\n;\n \ni\n \n<\n \narguments\n.\nlength\n;\n \ni\n++\n)\n \n{\n\n    \nvar\n \nsource\n \n=\n \narguments\n[\ni\n];\n\n    \nfor\n \n(\nvar\n \nkey\n \nin\n \nsource\n)\n \n{\n\n      \ntarget\n[\nkey\n]\n \n=\n \nsource\n[\nkey\n];\n\n    \n}\n\n  \n}\n\n\n  \nreturn\n \ntarget\n;\n\n\n};\n\n\n\n\n\n\nPraesent at \nreturn\n \ntarget\n, sodales nibh vel, tempor felis. Fusce\n      vel lacinia lacus. Suspendisse rhoncus nunc non nisi iaculis ultrices.\n      Donec consectetur mauris non neque imperdiet, eget volutpat libero.\n\n\n\n\n\n\nLists\n\u00b6\n\n\nUnordered lists\n\u00b6\n\n\n\n\n\n\nSed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus\n  non sem sollicitudin, quis rutrum leo facilisis. Nulla tempor lobortis orci,\n  at elementum urna sodales vitae. In in vehicula nulla, quis ornare libero.\n\n\n\n\nDuis mollis est eget nibh volutpat, fermentum aliquet dui mollis.\n\n\nNam vulputate tincidunt fringilla.\n\n\nNullam dignissim ultrices urna non auctor.\n\n\n\n\n\n\n\n\nAliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Proin ut\n  eros sed sapien ullamcorper consequat. Nunc ligula ante, fringilla at aliquam\n  ac, aliquet sed mauris.\n\n\n\n\n\n\nNulla et rhoncus turpis. Mauris ultricies elementum leo. Duis efficitur\n  accumsan nibh eu mattis. Vivamus tempus velit eros, porttitor placerat nibh\n  lacinia sed. Aenean in finibus diam.\n\n\n\n\n\n\nOrdered lists\n\u00b6\n\n\n\n\n\n\nInteger vehicula feugiat magna, a mollis tellus. Nam mollis ex ante, quis\n  elementum eros tempor rutrum. Aenean efficitur lobortis lacinia. Nulla\n  consectetur feugiat sodales.\n\n\n\n\n\n\nCum sociis natoque penatibus et magnis dis parturient montes, nascetur\n  ridiculus mus. Aliquam ornare feugiat quam et egestas. Nunc id erat et quam\n  pellentesque lacinia eu vel odio.\n\n\n\n\n\n\nVivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet\n  quam enim, eu volutpat urna rutrum a. Nam vehicula nunc mauris, a\n  ultricies libero efficitur sed.\n\n\n\n\nMauris dictum mi lacus\n\n\nUt sit amet placerat ante\n\n\nSuspendisse ac eros arcu\n\n\n\n\n\n\n\n\nMorbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet\n  rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Sed\n  aliquet, neque at rutrum mollis, neque nisi tincidunt nibh.\n\n\n\n\n\n\nPellentesque eget \nvar\n \n_extends\n ornare tellus, ut gravida mi.\n\nvar\n \n_extends\n \n=\n \nfunction\n(\ntarget\n)\n \n{\n\n\n  \nfor\n \n(\nvar\n \ni\n \n=\n \n1\n;\n \ni\n \n<\n \narguments\n.\nlength\n;\n \ni\n++\n)\n \n{\n\n    \nvar\n \nsource\n \n=\n \narguments\n[\ni\n];\n\n    \nfor\n \n(\nvar\n \nkey\n \nin\n \nsource\n)\n \n{\n\n      \ntarget\n[\nkey\n]\n \n=\n \nsource\n[\nkey\n];\n\n    \n}\n\n  \n}\n\n  \nreturn\n \ntarget\n;\n\n\n};\n\n\n\n\n\n\n\n\n\n\n\n\nDefinition lists\n\u00b6\n\n\n\n\nLorem ipsum dolor sit amet\n\n\n\n\nSed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus\ntellus non sem sollicitudin, quis rutrum leo facilisis. Nulla tempor\nlobortis orci, at elementum urna sodales vitae. In in vehicula nulla.\n\n\nDuis mollis est eget nibh volutpat, fermentum aliquet dui mollis.\nNam vulputate tincidunt fringilla.\nNullam dignissim ultrices urna non auctor.\n\n\n\n\nCras arcu libero\n\n\n\n\nAliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Proin\nut eros sed sapien ullamcorper consequat. Nunc ligula ante, fringilla at\naliquam ac, aliquet sed mauris.\n\n\n\n\n\n\nCode blocks\n\u00b6\n\n\nInline\n\u00b6\n\n\nMorbi eget \ndapibus felis\n. Vivamus \nvenenatis porttitor\n tortor sit amet\nrutrum. Class aptent taciti sociosqu ad litora torquent per conubia nostra,\nper inceptos himenaeos. \nPellentesque aliquet quam enim\n, eu volutpat urna\nrutrum a.\n\n\nNam vehicula nunc \nreturn\n \ntarget\n mauris, a ultricies libero efficitur\nsed. Sed molestie imperdiet consectetur. Vivamus a pharetra leo. Pellentesque\neget ornare tellus, ut gravida mi. Fusce vel lacinia lacus.\n\n\nListing\n\u00b6\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nvar\n \n_extends\n \n=\n \nfunction\n(\ntarget\n)\n \n{\n\n  \nfor\n \n(\nvar\n \ni\n \n=\n \n1\n;\n \ni\n \n<\n \narguments\n.\nlength\n;\n \ni\n++\n)\n \n{\n\n    \nvar\n \nsource\n \n=\n \narguments\n[\ni\n];\n\n    \nfor\n \n(\nvar\n \nkey\n \nin\n \nsource\n)\n \n{\n\n      \ntarget\n[\nkey\n]\n \n=\n \nsource\n[\nkey\n];\n\n    \n}\n\n  \n}\n\n\n  \nreturn\n \ntarget\n;\n\n\n};\n\n\n\n\n\n\n\nHorizontal rules\n\u00b6\n\n\nAenean in finibus diam. Duis mollis est eget nibh volutpat, fermentum aliquet\ndui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna\nnon auctor.\n\n\n\n\nAnota\u00e7\u00f5es\n\u00b6\n\n\n\n\nWhy is there an edit button at the top of every article?\n\n\nIf the \nrepo_url\n is set to a GitHub or BitBucket repository, and the\n\nrepo_name\n is set to \nGitHub\n or \nBitBucket\n (implied by default), an\nedit button will appear at the top of every article. This is the automatic\nbehavior that MkDocs implements. See the \nMkDocs documentation\n on more\nguidance regarding the \nedit_uri\n attribute, which defines whether the edit\nbutton is shown or not.\n\n\n\n\n\n\nInstallation on macOS\n\n\nWhen you're running the pre-installed version of Python on macOS, \npip\n\ntries to install packages in a folder for which your user might not have\nthe adequate permissions. There are two possible solutions for this:\n\n\n\n\n\n\nInstalling in user space\n (recommended): Provide the \n--user\n flag\n  to the install command and \npip\n will install the package in a user-site\n  location. This is the recommended way.\n\n\n\n\n\n\nSwitching to a homebrewed Python\n: Upgrade your Python installation\n  to a self-contained solution by installing Python with Homebrew. This\n  should eliminate a lot of problems you may be having with \npip\n.\n\n\n\n\n\n\n\n\n\n\nError: unrecognized theme 'material'\n\n\nIf you run into this error, the most common reason is that you installed\nMkDocs through some package manager (e.g. Homebrew or \napt-get\n) and the\nMaterial theme through \npip\n, so both packages end up in different\nlocations. MkDocs only checks its install location for themes.\n\n\n\n\n\n\nSearch language support for Chinese\n\n\n[lunr-languages][18] currently doesn't include a stemmer for Chinese or\nother Asian languages, but uses the Japanese stemmer, as some users\nreported pretty decent results.\n\n\n\n\nPrimary colors\n\u00b6\n\n\n\n\nDefault: \nindigo\n\n\n\n\nClick on a tile to change the primary color of the theme:\n\n\nRed\n\n\nPink\n\n\nPurple\n\n\nDeep Purple\n\n\nIndigo\n\n\nBlue\n\n\nLight Blue\n\n\nCyan\n\n\nTeal\n\n\nGreen\n\n\nLight Green\n\n\nLime\n\n\nYellow\n\n\nAmber\n\n\nOrange\n\n\nDeep Orange\n\n\nBrown\n\n\nGrey\n\n\nBlue Grey\n\n\nWhite\n\n\n\n  var buttons = document.querySelectorAll(\"button[data-md-color-primary]\");\n  Array.prototype.forEach.call(buttons, function(button) {\n    button.addEventListener(\"click\", function() {\n      document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary;\n    })\n  })\n\n\n\n\nAccent colors\n\u00b6\n\n\n\n\nDefault: \nindigo\n\n\n\n\nClick on a tile to change the accent color of the theme:\n\n\nRed\n\n\nPink\n\n\nPurple\n\n\nDeep Purple\n\n\nIndigo\n\n\nBlue\n\n\nLight Blue\n\n\nCyan\n\n\nTeal\n\n\nGreen\n\n\nLight Green\n\n\nLime\n\n\nYellow\n\n\nAmber\n\n\nOrange\n\n\nDeep Orange\n\n\n\n  var buttons = document.querySelectorAll(\"button[data-md-color-accent]\");\n  Array.prototype.forEach.call(buttons, function(button) {\n    button.addEventListener(\"click\", function() {\n      document.body.dataset.mdColorAccent = this.dataset.mdColorAccent;\n    })\n  })\n\n\n\n\nFont family\n\u00b6\n\n\n\n\nDefault: \nRoboto\n and \nRoboto Mono\n\n\n\n\nBy default the \nRoboto font family\n is included with the theme, specifically\nthe regular sans-serif type for text and the \nmonospaced\n type for code. Both\nfonts are loaded from \nGoogle Fonts\n and can be changed to other fonts,\nlike for example the \nUbuntu font family\n:\n\n\ntheme\n:\n\n  \nfont\n:\n\n    \ntext\n:\n \n'Ubuntu'\n\n    \ncode\n:\n \n'Ubuntu\n \nMono'\n\n\n\n\n\nThe text font will be loaded in weights 400 and \n700\n, the \nmonospaced\n font\nin regular weight. If you want to load fonts from other destinations or don't\nwant to use the Google Fonts loading magic, just set \nfont\n to \nfalse\n:\n\n\ntheme\n:\n\n  \nfont\n:\n \nfalse\n\n\n\n\n\nData tables\n\u00b6\n\n\n\n\n\n\n\n\nSollicitudo / Pellentesi\n\n\nconsectetur\n\n\nadipiscing\n\n\nelit\n\n\narcu\n\n\nsed\n\n\n\n\n\n\n\n\n\n\nVivamus a pharetra\n\n\nyes\n\n\nyes\n\n\nyes\n\n\nyes\n\n\nyes\n\n\n\n\n\n\nOrnare viverra ex\n\n\nyes\n\n\nyes\n\n\nyes\n\n\nyes\n\n\nyes\n\n\n\n\n\n\nMauris a ullamcorper\n\n\nyes\n\n\nyes\n\n\npartial\n\n\nyes\n\n\nyes\n\n\n\n\n\n\nNullam urna elit\n\n\nyes\n\n\nyes\n\n\nyes\n\n\nyes\n\n\nyes\n\n\n\n\n\n\nMalesuada eget finibus\n\n\nyes\n\n\nyes\n\n\nyes\n\n\nyes\n\n\nyes\n\n\n\n\n\n\nUllamcorper\n\n\nyes\n\n\nyes\n\n\nyes\n\n\nyes\n\n\nyes\n\n\n\n\n\n\nVestibulum sodales\n\n\nyes\n\n\n-\n\n\nyes\n\n\n-\n\n\nyes\n\n\n\n\n\n\nPulvinar nisl\n\n\nyes\n\n\nyes\n\n\nyes\n\n\n-\n\n\n-\n\n\n\n\n\n\nPharetra aliquet est\n\n\nyes\n\n\nyes\n\n\nyes\n\n\nyes\n\n\nyes\n\n\n\n\n\n\nSed suscipit\n\n\nyes\n\n\nyes\n\n\nyes\n\n\nyes\n\n\nyes\n\n\n\n\n\n\nOrci non pretium\n\n\nyes\n\n\npartial\n\n\n-\n\n\n-\n\n\n-\n\n\n\n\n\n\n\n\nSed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus\nnon sem sollicitudin, quis rutrum leo facilisis. Nulla tempor lobortis orci,\nat elementum urna sodales vitae. In in vehicula nulla, quis ornare libero.\n\n\n\n\n\n\n\n\nLeft\n\n\nCenter\n\n\nRight\n\n\n\n\n\n\n\n\n\n\nLorem\n\n\ndolor\n\n\namet\n\n\n\n\n\n\nipsum\n\n\nsit\n\n\n\n\n\n\n\n\n\n\nVestibulum vitae orci quis ante viverra ultricies ut eget turpis. Sed eu\nlectus dapibus, eleifend nulla varius, lobortis turpis. In ac hendrerit nisl,\nsit amet laoreet nibh.\n\n\n\n  \n\n    \n\n    \n\n  \n\n  \n\n    \n\n      \nTable\n\n      \nwith colgroups (Pandoc)\n\n    \n\n  \n\n  \n\n    \n\n      \nLorem\n\n      \nipsum dolor sit amet.\n\n    \n\n    \n\n      \nSed sagittis\n\n      \neleifend rutrum. Donec vitae suscipit est.\n\n    \n\n  \n\n\n\n\n\n\n\n\n  \n\n    \n\n      \nAvailable language stemmers\n\n    \n\n  \n\n  \n\n    \n\n      \nda\n / Danish\n\n      \ndu\n / Dutch\n\n      \nen\n / English\n\n      \nfi\n / Finnish\n\n    \n\n    \n\n      \nfr\n / French\n\n      \nde\n / German\n\n      \nhu\n / Hungarian\n\n      \nit\n / Italian\n\n    \n\n    \n\n      \njp\n / Japanese\n\n      \nno\n / Norwegian\n\n      \npt\n / Portugese\n\n      \nro\n / Romanian\n\n    \n\n    \n\n      \nru\n / Russian\n\n      \nes\n / Spanish\n\n      \nsv\n / Swedish\n\n      \ntr\n / Turkish",
            "title": "Usando Mkdocs Material"
        },
        {
            "location": "/Desenvolvimento/Mkdocs/#usando-mkdocs-material",
            "text": "Mkdocs Material - Link",
            "title": "Usando Mkdocs Material"
        },
        {
            "location": "/Desenvolvimento/Mkdocs/#atalhos",
            "text": "Well-designed search interface accessible through hotkeys ( F  or\n   S ), intelligent grouping of search results, search term\n  highlighting and lazy loading.",
            "title": "Atalhos"
        },
        {
            "location": "/Desenvolvimento/Mkdocs/#favicon",
            "text": "Default:  assets/images/favicon.png",
            "title": "Favicon"
        },
        {
            "location": "/Desenvolvimento/Mkdocs/#imagem",
            "text": "Aten\u00e7\u00e3o:  Sem Link",
            "title": "Imagem"
        },
        {
            "location": "/Desenvolvimento/Mkdocs/#link",
            "text": "For detailed instructions see the  getting started guide .",
            "title": "Link"
        },
        {
            "location": "/Desenvolvimento/Mkdocs/#headings",
            "text": "",
            "title": "Headings"
        },
        {
            "location": "/Desenvolvimento/Mkdocs/#the-3rd-level",
            "text": "",
            "title": "The 3rd level"
        },
        {
            "location": "/Desenvolvimento/Mkdocs/#the-4th-level",
            "text": "",
            "title": "The 4th level"
        },
        {
            "location": "/Desenvolvimento/Mkdocs/#the-5th-level",
            "text": "",
            "title": "The 5th level"
        },
        {
            "location": "/Desenvolvimento/Mkdocs/#the-6th-level",
            "text": "",
            "title": "The 6th level"
        },
        {
            "location": "/Desenvolvimento/Mkdocs/#headings-with-secondary-text",
            "text": "",
            "title": "Headings with secondary text"
        },
        {
            "location": "/Desenvolvimento/Mkdocs/#the-3rd-level-with-secondary-text",
            "text": "",
            "title": "The 3rd level with secondary text"
        },
        {
            "location": "/Desenvolvimento/Mkdocs/#the-4th-level-with-secondary-text",
            "text": "",
            "title": "The 4th level with secondary text"
        },
        {
            "location": "/Desenvolvimento/Mkdocs/#the-5th-level-with-secondary-text",
            "text": "",
            "title": "The 5th level with secondary text"
        },
        {
            "location": "/Desenvolvimento/Mkdocs/#the-6th-level-with-secondary-text",
            "text": "",
            "title": "The 6th level with secondary text"
        },
        {
            "location": "/Desenvolvimento/Mkdocs/#blockquotes",
            "text": "Morbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet rutrum.\n  Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Nam vehicula nunc\n  mauris, a ultricies libero efficitur sed.  Class aptent  taciti sociosqu ad\n  litora torquent per conubia nostra, per inceptos himenaeos. Sed molestie\n  imperdiet consectetur.",
            "title": "Blockquotes"
        },
        {
            "location": "/Desenvolvimento/Mkdocs/#other-content-blocks",
            "text": "Vestibulum vitae orci quis ante viverra ultricies ut eget turpis. Sed eu\n  lectus dapibus, eleifend nulla varius, lobortis turpis. In ac hendrerit nisl,\n  sit amet laoreet nibh.\n   var   _extends   =   function ( target )   { \n   for   ( var   i   =   1 ;   i   <   arguments . length ;   i ++ )   { \n     var   source   =   arguments [ i ]; \n     for   ( var   key   in   source )   { \n       target [ key ]   =   source [ key ]; \n     } \n   }     return   target ;  };    Praesent at  return   target , sodales nibh vel, tempor felis. Fusce\n      vel lacinia lacus. Suspendisse rhoncus nunc non nisi iaculis ultrices.\n      Donec consectetur mauris non neque imperdiet, eget volutpat libero.",
            "title": "Other content blocks"
        },
        {
            "location": "/Desenvolvimento/Mkdocs/#lists",
            "text": "",
            "title": "Lists"
        },
        {
            "location": "/Desenvolvimento/Mkdocs/#unordered-lists",
            "text": "Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus\n  non sem sollicitudin, quis rutrum leo facilisis. Nulla tempor lobortis orci,\n  at elementum urna sodales vitae. In in vehicula nulla, quis ornare libero.   Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis.  Nam vulputate tincidunt fringilla.  Nullam dignissim ultrices urna non auctor.     Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Proin ut\n  eros sed sapien ullamcorper consequat. Nunc ligula ante, fringilla at aliquam\n  ac, aliquet sed mauris.    Nulla et rhoncus turpis. Mauris ultricies elementum leo. Duis efficitur\n  accumsan nibh eu mattis. Vivamus tempus velit eros, porttitor placerat nibh\n  lacinia sed. Aenean in finibus diam.",
            "title": "Unordered lists"
        },
        {
            "location": "/Desenvolvimento/Mkdocs/#ordered-lists",
            "text": "Integer vehicula feugiat magna, a mollis tellus. Nam mollis ex ante, quis\n  elementum eros tempor rutrum. Aenean efficitur lobortis lacinia. Nulla\n  consectetur feugiat sodales.    Cum sociis natoque penatibus et magnis dis parturient montes, nascetur\n  ridiculus mus. Aliquam ornare feugiat quam et egestas. Nunc id erat et quam\n  pellentesque lacinia eu vel odio.    Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet\n  quam enim, eu volutpat urna rutrum a. Nam vehicula nunc mauris, a\n  ultricies libero efficitur sed.   Mauris dictum mi lacus  Ut sit amet placerat ante  Suspendisse ac eros arcu     Morbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet\n  rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Sed\n  aliquet, neque at rutrum mollis, neque nisi tincidunt nibh.    Pellentesque eget  var   _extends  ornare tellus, ut gravida mi. var   _extends   =   function ( target )   {     for   ( var   i   =   1 ;   i   <   arguments . length ;   i ++ )   { \n     var   source   =   arguments [ i ]; \n     for   ( var   key   in   source )   { \n       target [ key ]   =   source [ key ]; \n     } \n   } \n   return   target ;  };",
            "title": "Ordered lists"
        },
        {
            "location": "/Desenvolvimento/Mkdocs/#definition-lists",
            "text": "Lorem ipsum dolor sit amet   Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus\ntellus non sem sollicitudin, quis rutrum leo facilisis. Nulla tempor\nlobortis orci, at elementum urna sodales vitae. In in vehicula nulla.  Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis.\nNam vulputate tincidunt fringilla.\nNullam dignissim ultrices urna non auctor.   Cras arcu libero   Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Proin\nut eros sed sapien ullamcorper consequat. Nunc ligula ante, fringilla at\naliquam ac, aliquet sed mauris.",
            "title": "Definition lists"
        },
        {
            "location": "/Desenvolvimento/Mkdocs/#code-blocks",
            "text": "",
            "title": "Code blocks"
        },
        {
            "location": "/Desenvolvimento/Mkdocs/#inline",
            "text": "Morbi eget  dapibus felis . Vivamus  venenatis porttitor  tortor sit amet\nrutrum. Class aptent taciti sociosqu ad litora torquent per conubia nostra,\nper inceptos himenaeos.  Pellentesque aliquet quam enim , eu volutpat urna\nrutrum a.  Nam vehicula nunc  return   target  mauris, a ultricies libero efficitur\nsed. Sed molestie imperdiet consectetur. Vivamus a pharetra leo. Pellentesque\neget ornare tellus, ut gravida mi. Fusce vel lacinia lacus.",
            "title": "Inline"
        },
        {
            "location": "/Desenvolvimento/Mkdocs/#listing",
            "text": "1\n2\n3\n4\n5\n6\n7\n8\n9 var   _extends   =   function ( target )   { \n   for   ( var   i   =   1 ;   i   <   arguments . length ;   i ++ )   { \n     var   source   =   arguments [ i ]; \n     for   ( var   key   in   source )   { \n       target [ key ]   =   source [ key ]; \n     } \n   }     return   target ;  };",
            "title": "Listing"
        },
        {
            "location": "/Desenvolvimento/Mkdocs/#horizontal-rules",
            "text": "Aenean in finibus diam. Duis mollis est eget nibh volutpat, fermentum aliquet\ndui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna\nnon auctor.",
            "title": "Horizontal rules"
        },
        {
            "location": "/Desenvolvimento/Mkdocs/#anotacoes",
            "text": "Why is there an edit button at the top of every article?  If the  repo_url  is set to a GitHub or BitBucket repository, and the repo_name  is set to  GitHub  or  BitBucket  (implied by default), an\nedit button will appear at the top of every article. This is the automatic\nbehavior that MkDocs implements. See the  MkDocs documentation  on more\nguidance regarding the  edit_uri  attribute, which defines whether the edit\nbutton is shown or not.    Installation on macOS  When you're running the pre-installed version of Python on macOS,  pip \ntries to install packages in a folder for which your user might not have\nthe adequate permissions. There are two possible solutions for this:    Installing in user space  (recommended): Provide the  --user  flag\n  to the install command and  pip  will install the package in a user-site\n  location. This is the recommended way.    Switching to a homebrewed Python : Upgrade your Python installation\n  to a self-contained solution by installing Python with Homebrew. This\n  should eliminate a lot of problems you may be having with  pip .      Error: unrecognized theme 'material'  If you run into this error, the most common reason is that you installed\nMkDocs through some package manager (e.g. Homebrew or  apt-get ) and the\nMaterial theme through  pip , so both packages end up in different\nlocations. MkDocs only checks its install location for themes.    Search language support for Chinese  [lunr-languages][18] currently doesn't include a stemmer for Chinese or\nother Asian languages, but uses the Japanese stemmer, as some users\nreported pretty decent results.",
            "title": "Anota\u00e7\u00f5es"
        },
        {
            "location": "/Desenvolvimento/Mkdocs/#primary-colors",
            "text": "Default:  indigo   Click on a tile to change the primary color of the theme:  Red  Pink  Purple  Deep Purple  Indigo  Blue  Light Blue  Cyan  Teal  Green  Light Green  Lime  Yellow  Amber  Orange  Deep Orange  Brown  Grey  Blue Grey  White  \n  var buttons = document.querySelectorAll(\"button[data-md-color-primary]\");\n  Array.prototype.forEach.call(buttons, function(button) {\n    button.addEventListener(\"click\", function() {\n      document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary;\n    })\n  })",
            "title": "Primary colors"
        },
        {
            "location": "/Desenvolvimento/Mkdocs/#accent-colors",
            "text": "Default:  indigo   Click on a tile to change the accent color of the theme:  Red  Pink  Purple  Deep Purple  Indigo  Blue  Light Blue  Cyan  Teal  Green  Light Green  Lime  Yellow  Amber  Orange  Deep Orange  \n  var buttons = document.querySelectorAll(\"button[data-md-color-accent]\");\n  Array.prototype.forEach.call(buttons, function(button) {\n    button.addEventListener(\"click\", function() {\n      document.body.dataset.mdColorAccent = this.dataset.mdColorAccent;\n    })\n  })",
            "title": "Accent colors"
        },
        {
            "location": "/Desenvolvimento/Mkdocs/#font-family",
            "text": "Default:  Roboto  and  Roboto Mono   By default the  Roboto font family  is included with the theme, specifically\nthe regular sans-serif type for text and the  monospaced  type for code. Both\nfonts are loaded from  Google Fonts  and can be changed to other fonts,\nlike for example the  Ubuntu font family :  theme : \n   font : \n     text :   'Ubuntu' \n     code :   'Ubuntu   Mono'   The text font will be loaded in weights 400 and  700 , the  monospaced  font\nin regular weight. If you want to load fonts from other destinations or don't\nwant to use the Google Fonts loading magic, just set  font  to  false :  theme : \n   font :   false",
            "title": "Font family"
        },
        {
            "location": "/Desenvolvimento/Mkdocs/#data-tables",
            "text": "Sollicitudo / Pellentesi  consectetur  adipiscing  elit  arcu  sed      Vivamus a pharetra  yes  yes  yes  yes  yes    Ornare viverra ex  yes  yes  yes  yes  yes    Mauris a ullamcorper  yes  yes  partial  yes  yes    Nullam urna elit  yes  yes  yes  yes  yes    Malesuada eget finibus  yes  yes  yes  yes  yes    Ullamcorper  yes  yes  yes  yes  yes    Vestibulum sodales  yes  -  yes  -  yes    Pulvinar nisl  yes  yes  yes  -  -    Pharetra aliquet est  yes  yes  yes  yes  yes    Sed suscipit  yes  yes  yes  yes  yes    Orci non pretium  yes  partial  -  -  -     Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus\nnon sem sollicitudin, quis rutrum leo facilisis. Nulla tempor lobortis orci,\nat elementum urna sodales vitae. In in vehicula nulla, quis ornare libero.     Left  Center  Right      Lorem  dolor  amet    ipsum  sit      Vestibulum vitae orci quis ante viverra ultricies ut eget turpis. Sed eu\nlectus dapibus, eleifend nulla varius, lobortis turpis. In ac hendrerit nisl,\nsit amet laoreet nibh.  \n   \n     \n     \n   \n   \n     \n       Table \n       with colgroups (Pandoc) \n     \n   \n   \n     \n       Lorem \n       ipsum dolor sit amet. \n     \n     \n       Sed sagittis \n       eleifend rutrum. Donec vitae suscipit est. \n     \n      \n   \n     \n       Available language stemmers \n     \n   \n   \n     \n       da  / Danish \n       du  / Dutch \n       en  / English \n       fi  / Finnish \n     \n     \n       fr  / French \n       de  / German \n       hu  / Hungarian \n       it  / Italian \n     \n     \n       jp  / Japanese \n       no  / Norwegian \n       pt  / Portugese \n       ro  / Romanian \n     \n     \n       ru  / Russian \n       es  / Spanish \n       sv  / Swedish \n       tr  / Turkish",
            "title": "Data tables"
        },
        {
            "location": "/Django/00. Agradecimentos/",
            "text": "00. Agradecimentos\n\u00b6\n\n\n\n\nAgradecimentos\n\n\n\nEste tutorial foi criado em: \n19.03.2018\n. A inspira\u00e7\u00e3o para a cria\u00e7\u00e3o do mesmo veio ap\u00f3s 2 aulas (s\u00e1bado, 17.03.2018 e domingo, 18.03.2018) que tive com meu amigo do curso \nNGMASTERS\n (Tony L\u00e2mpada): \nWilliam Galletti\n que insistiu em me mostrar o \nPODER DO DJANGO\n.\n\n\n\n\nEnt\u00e3o, at\u00e9 em car\u00e1ter de agradecimento e valoriza\u00e7\u00e3o, montei esse Tutorial passo a passo \nCOM BASE EM TUDO\n que ele me ENSINOU em algumas horas de treinamento via \nskype/teamviewer\n.\n\n\n\n\nSem d\u00favidas nenhuma o \nDJANGO\n \u00e9 topppp!!!\n\n\n\n\nObrigado \nWilliam Galletti\n\n\n\n\n\n\n\n\nO conhecimento nos faz respons\u00e1veis\n\n\n\n\u200b\"Na procura de conhecimentos, o primeiro passo \u00e9 o sil\u00eancio, o segundo ouvir, o terceiro relembrar, o quarto praticar e o quinto ensinar aos outros.\"",
            "title": "00. Agradecimentos"
        },
        {
            "location": "/Django/00. Agradecimentos/#00-agradecimentos",
            "text": "Agradecimentos  \nEste tutorial foi criado em:  19.03.2018 . A inspira\u00e7\u00e3o para a cria\u00e7\u00e3o do mesmo veio ap\u00f3s 2 aulas (s\u00e1bado, 17.03.2018 e domingo, 18.03.2018) que tive com meu amigo do curso  NGMASTERS  (Tony L\u00e2mpada):  William Galletti  que insistiu em me mostrar o  PODER DO DJANGO .  \nEnt\u00e3o, at\u00e9 em car\u00e1ter de agradecimento e valoriza\u00e7\u00e3o, montei esse Tutorial passo a passo  COM BASE EM TUDO  que ele me ENSINOU em algumas horas de treinamento via  skype/teamviewer .  \nSem d\u00favidas nenhuma o  DJANGO  \u00e9 topppp!!!  \nObrigado  William Galletti     O conhecimento nos faz respons\u00e1veis  \n\u200b\"Na procura de conhecimentos, o primeiro passo \u00e9 o sil\u00eancio, o segundo ouvir, o terceiro relembrar, o quarto praticar e o quinto ensinar aos outros.\"",
            "title": "00. Agradecimentos"
        },
        {
            "location": "/Django/01. Preparando Ambiente/",
            "text": "01. Preparando Ambiente\n\u00b6\n\n\nRequisitos\n\u00b6\n\n\n\n\nSoftwares\n\n\npython 3.6.4\n\n\npip 9.0.\n\n\n\n\npython -V\npip -V\n\n\n\n\n\n\nInforma\u00e7\u00f5es para Conhecimento\n\n\nConceito: Framework de desenvolvimento WEB escrito em python.\n\n\nDisponibilizado pela primeira vez em Julho de 2015.\n\n\nVers\u00e3o atual: 2.0\n\n\ngithub: \nhttps://github.com/django/django\n\n\n\n\nPrepara\u00e7\u00e3o do Ambiente\n\u00b6\n\n\n\n\n\n\nInstalar a \u00faltima vers\u00e3o do \nPython\n.\n\n\n\n\n\n\nEntrar no prompt do msdos \niniciar > executar: cmd <enter>\n e criar a pasta do seu projeto, no exemplo: web_django.\n\n\n\n\n\n\nWINDOWS:\n\n\n1\n2\n3\n4\ncd\\\nc:\\\n\nmkdir web_django\n\ncd\\web_django\n\n\n\n\n\n\n\n\nCriar e entrar na pasta do seu PROJETO.\n\n\n\n\nWINDOWS:\n\n\n1\n2\nmkdir meu_projeto\ncd meu_projeto\n\n\n\n\n\n\nCriando o Virtual Env\n\u00b6\n\n\n\n\nCriar uma Virtual Env para te isolar do sistema operacional. Ou seja, criar um ambiente virtual onde eu possa ter o Django sem afetar o sistema operacional podendo assim eu trabalhar com m\u00faltiplas vers\u00f5es.\n\n\n\n\nWINDOWS:\n\n\n1\npython -m venv .venv\n\n\n\n\n\n\n\n\n.venv\n\n\nO .venv poderia ser qualquer coisa, exemplo: meuvirtualenv, ou env, ou virtualenv.\n\n\nPor conven\u00e7\u00e3o e boas pr\u00e1ticas \u00e9 muito utilizado o .venv\n\n\n\n\nAtivando o Virtual Env\n\u00b6\n\n\n\n\nPara ativar a Virtual Env, basta executar:\n\n\n\n\nWINDOWS:\n\n\n1\n.\\venv\\Scripts\\activate\n\n\n\n\n\n\nAutomatizando o Activate no Windows\n\u00b6\n\n\n\n\nDeixando o activate automatizado\n\n\nCrie o arquivo activate.bat na raiz do seu projeto\n\n\nWINDOWS:\n\n\ncopy con activate.bat\n e \nenter\n e digite o conte\u00fado abaixo:\n\n\n1\n.venv\\Scripts\\activate.bat\n\n\n\n\n\n\nPressione a tecla \nF6\n e depois \nenter\n para salvar.\n\n\nEntre no > diret\u00f3rio: \ncd .venv\\Scripts\n\n\nDigite: \ncopy con manage.bat\n e \nenter\n e digite o conte\u00fado abaixo:\n\n\n1\n@python \"%VIRTUAL_ENV%\\..\\manage.py\" %*\n\n\n\n\n\n\nPressione a tecla \nF6\n e depois \nenter\n para salvar.\n\n\nPronto, agora para ativar o Virtual Env, basta voc\u00ea digitar: \nactivate\n na raiz do seu projeto e para executar o ARTISAN do Python (manage.py), basta digitar: \nmanage <instru\u00e7\u00f5es de comando>\n.\n\n\n\n\nActivate e Deactivate\n\u00b6\n\n\n\n\nActivate / Deactivate Virtual Env\n\n\nPara entrar, uma vez feito o processo de automa\u00e7\u00e3o acima: \nactivate.bat\n ou caso n\u00e3o queira fazer: \n.venv\\Scripts\\activate\n e voc\u00ea notar\u00e1 que no seu prompt ser\u00e1 adicionado o (.venv) na frente do path.\n\n\nPara sair da Virtual Env do seu projeto, basta digitar o > comando: \ndeactivate\n e voc\u00ea notar\u00e1 que ser\u00e1 removido o (.venv) do path.\n\n\n\n\n\n\nVirtual Env\n\n\nPara voc\u00ea saber se o virtual env est\u00e1 ativo, basta ver se na frente do seu path no prompt est\u00e1 o escrito: \n(.venv)\n, exemplo: \n(.venv) c:\\web_django\\meu_projeto\n\n\nCaso n\u00e3o esteja, basta ativar conforme a instru\u00e7\u00e3o acima: \nactivate\n.",
            "title": "01. Preparando Ambiente"
        },
        {
            "location": "/Django/01. Preparando Ambiente/#01-preparando-ambiente",
            "text": "",
            "title": "01. Preparando Ambiente"
        },
        {
            "location": "/Django/01. Preparando Ambiente/#requisitos",
            "text": "Softwares  python 3.6.4  pip 9.0.   python -V\npip -V   Informa\u00e7\u00f5es para Conhecimento  Conceito: Framework de desenvolvimento WEB escrito em python.  Disponibilizado pela primeira vez em Julho de 2015.  Vers\u00e3o atual: 2.0  github:  https://github.com/django/django",
            "title": "Requisitos"
        },
        {
            "location": "/Django/01. Preparando Ambiente/#preparacao-do-ambiente",
            "text": "Instalar a \u00faltima vers\u00e3o do  Python .    Entrar no prompt do msdos  iniciar > executar: cmd <enter>  e criar a pasta do seu projeto, no exemplo: web_django.    WINDOWS:  1\n2\n3\n4 cd\\\nc:\\ mkdir web_django cd\\web_django    Criar e entrar na pasta do seu PROJETO.   WINDOWS:  1\n2 mkdir meu_projeto\ncd meu_projeto",
            "title": "Prepara\u00e7\u00e3o do Ambiente"
        },
        {
            "location": "/Django/01. Preparando Ambiente/#criando-o-virtual-env",
            "text": "Criar uma Virtual Env para te isolar do sistema operacional. Ou seja, criar um ambiente virtual onde eu possa ter o Django sem afetar o sistema operacional podendo assim eu trabalhar com m\u00faltiplas vers\u00f5es.   WINDOWS:  1 python -m venv .venv    .venv  O .venv poderia ser qualquer coisa, exemplo: meuvirtualenv, ou env, ou virtualenv.  Por conven\u00e7\u00e3o e boas pr\u00e1ticas \u00e9 muito utilizado o .venv",
            "title": "Criando o Virtual Env"
        },
        {
            "location": "/Django/01. Preparando Ambiente/#ativando-o-virtual-env",
            "text": "Para ativar a Virtual Env, basta executar:   WINDOWS:  1 .\\venv\\Scripts\\activate",
            "title": "Ativando o Virtual Env"
        },
        {
            "location": "/Django/01. Preparando Ambiente/#automatizando-o-activate-no-windows",
            "text": "Deixando o activate automatizado  Crie o arquivo activate.bat na raiz do seu projeto  WINDOWS:  copy con activate.bat  e  enter  e digite o conte\u00fado abaixo:  1 .venv\\Scripts\\activate.bat   Pressione a tecla  F6  e depois  enter  para salvar.  Entre no > diret\u00f3rio:  cd .venv\\Scripts  Digite:  copy con manage.bat  e  enter  e digite o conte\u00fado abaixo:  1 @python \"%VIRTUAL_ENV%\\..\\manage.py\" %*   Pressione a tecla  F6  e depois  enter  para salvar.  Pronto, agora para ativar o Virtual Env, basta voc\u00ea digitar:  activate  na raiz do seu projeto e para executar o ARTISAN do Python (manage.py), basta digitar:  manage <instru\u00e7\u00f5es de comando> .",
            "title": "Automatizando o Activate no Windows"
        },
        {
            "location": "/Django/01. Preparando Ambiente/#activate-e-deactivate",
            "text": "Activate / Deactivate Virtual Env  Para entrar, uma vez feito o processo de automa\u00e7\u00e3o acima:  activate.bat  ou caso n\u00e3o queira fazer:  .venv\\Scripts\\activate  e voc\u00ea notar\u00e1 que no seu prompt ser\u00e1 adicionado o (.venv) na frente do path.  Para sair da Virtual Env do seu projeto, basta digitar o > comando:  deactivate  e voc\u00ea notar\u00e1 que ser\u00e1 removido o (.venv) do path.    Virtual Env  Para voc\u00ea saber se o virtual env est\u00e1 ativo, basta ver se na frente do seu path no prompt est\u00e1 o escrito:  (.venv) , exemplo:  (.venv) c:\\web_django\\meu_projeto  Caso n\u00e3o esteja, basta ativar conforme a instru\u00e7\u00e3o acima:  activate .",
            "title": "Activate e Deactivate"
        },
        {
            "location": "/Django/02. Instalando o Django/",
            "text": "02. Instalando o Django\n\u00b6\n\n\nInstala\u00e7\u00e3o\n\u00b6\n\n\nEstando na pasta do seu projeto com o Virtual Env ativo (.venv): \n(.venv) c:\\web_django\\meu_projeto\n\n\n1\npip install django\n\n\n\n\n\n\n\n\nEu posso instalar o django N\u00c3O estando na minha virtual env?\n\n\nN\u00e3o, o correto \u00e9 voc\u00ea instalar o seu django na sua virtual env criada. Ent\u00e3o esteja sempre com ela ativa.\n\n\n\n\nVerificando a Instala\u00e7\u00e3o\n\u00b6\n\n\n\n\nVerificando a vers\u00e3o do django instalada\n\n\nWINDOWS:\n\n\n1\n2\n3\npython\nimport django\ndjango.VERSION\n\n\n\n\n\n\nSair\u00e1 algo do tipo:\n\n\n1\n2\n3\n  >>> import django\n  >>> django.VERSION\n  (2, 0, 3, 'final', 0)\n\n\n\n\n\n\nDigite exit() e \nenter\n para sair\n\n\n1\nexit()\n\n\n\n\n\n\n\n\nVerificando os Pacotes Instalados\n\u00b6\n\n\n\n\nVerificando os pacotes instalados at\u00e9 o presente momento no .venv\n\n\nPara voc\u00ea saber o que foi instalado at\u00e9 o presente momento, basta digitar o comando: \npip freeze\n.\n\n\nVoc\u00ea dever\u00e1 ter algo como do tipo:\n\n\n1\n2\nDjango==2.0.3\npytz==2018.3",
            "title": "02. Instalando o Django"
        },
        {
            "location": "/Django/02. Instalando o Django/#02-instalando-o-django",
            "text": "",
            "title": "02. Instalando o Django"
        },
        {
            "location": "/Django/02. Instalando o Django/#instalacao",
            "text": "Estando na pasta do seu projeto com o Virtual Env ativo (.venv):  (.venv) c:\\web_django\\meu_projeto  1 pip install django    Eu posso instalar o django N\u00c3O estando na minha virtual env?  N\u00e3o, o correto \u00e9 voc\u00ea instalar o seu django na sua virtual env criada. Ent\u00e3o esteja sempre com ela ativa.",
            "title": "Instala\u00e7\u00e3o"
        },
        {
            "location": "/Django/02. Instalando o Django/#verificando-a-instalacao",
            "text": "Verificando a vers\u00e3o do django instalada  WINDOWS:  1\n2\n3 python\nimport django\ndjango.VERSION   Sair\u00e1 algo do tipo:  1\n2\n3   >>> import django\n  >>> django.VERSION\n  (2, 0, 3, 'final', 0)   Digite exit() e  enter  para sair  1 exit()",
            "title": "Verificando a Instala\u00e7\u00e3o"
        },
        {
            "location": "/Django/02. Instalando o Django/#verificando-os-pacotes-instalados",
            "text": "Verificando os pacotes instalados at\u00e9 o presente momento no .venv  Para voc\u00ea saber o que foi instalado at\u00e9 o presente momento, basta digitar o comando:  pip freeze .  Voc\u00ea dever\u00e1 ter algo como do tipo:  1\n2 Django==2.0.3\npytz==2018.3",
            "title": "Verificando os Pacotes Instalados"
        },
        {
            "location": "/Django/03. Criando nosso Projeto/",
            "text": "03. Criando o nosso projeto\n\u00b6\n\n\nGerando o projeto: api\n\u00b6\n\n\n1\ndjango-admin startproject api .\n\n\n\n\n\n\n\n\n\u00c9 importante digitar o ponto (.)?\n\n\n\u00c9 importante digitar o ponto (.) para evitar que o admin do django crie uma pasta dentro da outra com o mesmo nome.\n\n\n\n\nEstrutura de Arquivos\n\u00b6\n\n\n\n\nEstrutura de Arquivos : descri\u00e7\u00e3o resumida\n\n\n__init__.py\n : significa que tudo que estiver dentro da pasta \u00e9 um pacote do django.\n\n\nsettings.py\n : arquivo mais importante do django.\n\n\nurls.py\n: arquivo de rotas do django.\n\n\nwsgi.py\n: arquivo que utilizamos para ser o entrypoint da aplica\u00e7\u00e3o. Ser\u00e1 aonde iremos configurar o servidor e os arquivos est\u00e1ticos. Bom lembrar que o django n\u00e3o cuida dos arquivos est\u00e1ticos.",
            "title": "03. Criando o nosso projeto"
        },
        {
            "location": "/Django/03. Criando nosso Projeto/#03-criando-o-nosso-projeto",
            "text": "",
            "title": "03. Criando o nosso projeto"
        },
        {
            "location": "/Django/03. Criando nosso Projeto/#gerando-o-projeto-api",
            "text": "1 django-admin startproject api .    \u00c9 importante digitar o ponto (.)?  \u00c9 importante digitar o ponto (.) para evitar que o admin do django crie uma pasta dentro da outra com o mesmo nome.",
            "title": "Gerando o projeto: api"
        },
        {
            "location": "/Django/03. Criando nosso Projeto/#estrutura-de-arquivos",
            "text": "Estrutura de Arquivos : descri\u00e7\u00e3o resumida  __init__.py  : significa que tudo que estiver dentro da pasta \u00e9 um pacote do django.  settings.py  : arquivo mais importante do django.  urls.py : arquivo de rotas do django.  wsgi.py : arquivo que utilizamos para ser o entrypoint da aplica\u00e7\u00e3o. Ser\u00e1 aonde iremos configurar o servidor e os arquivos est\u00e1ticos. Bom lembrar que o django n\u00e3o cuida dos arquivos est\u00e1ticos.",
            "title": "Estrutura de Arquivos"
        },
        {
            "location": "/Django/04. Iniciando a nossa primeira App/",
            "text": "04. Iniciando a nossa primeira App\n\u00b6\n\n\nIniciando / Gerando a nossa primeira App\n\u00b6\n\n\n1\nmanage startapp core\n\n\n\n\n\n\nPronto, a nossa primeira aplica\u00e7\u00e3o, ou aplica\u00e7\u00e3o principal j\u00e1 foi criada. Voc\u00ea vai notar que surgiu uma pasta core na estrutura de diret\u00f3rios do nosso projeto.",
            "title": "04. Iniciando a nossa primeira App"
        },
        {
            "location": "/Django/04. Iniciando a nossa primeira App/#04-iniciando-a-nossa-primeira-app",
            "text": "",
            "title": "04. Iniciando a nossa primeira App"
        },
        {
            "location": "/Django/04. Iniciando a nossa primeira App/#iniciando-gerando-a-nossa-primeira-app",
            "text": "1 manage startapp core   Pronto, a nossa primeira aplica\u00e7\u00e3o, ou aplica\u00e7\u00e3o principal j\u00e1 foi criada. Voc\u00ea vai notar que surgiu uma pasta core na estrutura de diret\u00f3rios do nosso projeto.",
            "title": "Iniciando / Gerando a nossa primeira App"
        },
        {
            "location": "/Django/05. NPM do Django (pipenv)/",
            "text": "05. NPM do Django (pipenv)\n\u00b6\n\n\n\u00c9 muito importante dizer que temos hoje o pipenv que ser\u00e1 respons\u00e1vel para separar para n\u00f3s o que \u00e9 lib de produ\u00e7\u00e3o e lib de desenvolvimento, muito semelhante ao que o NPM do nodejs faz.\n\n\n\u00c9 muito recomend\u00e1vel que nos pr\u00f3ximos passos a seguir, utilizemos o pipenv para gerenciar os pacotes, pois poderemos especificar o que \u00e9 depend\u00eancia de desenvolvimento e depend\u00eancia de produ\u00e7\u00e3o.\n\n\nPipenv : Instala\u00e7\u00e3o\n\u00b6\n\n\npip install pipenv\n\n\n\n\nPipenv : github / Comandos\n\u00b6\n\n\ngithub: \nhttps://github.com/pypa/pipenv\n\n\nInstala todas as depend\u00eancias para o projeto (excluindo as dev)\npipenv clean\n\nInstala todas as depend\u00eancias para o projeto (excluindo as dev)\npipenv install\n\nInstala todas as depend\u00eancias para o projeto (inclusive as dev)\npipenv install --dev\n\nVerifica as depend\u00eancias de seguran\u00e7a e vulnerabilidades\npipenv check\n\nGera o arquivo Pipfilelock\npipenv lock\n\n\n\n\nInstalando algumas depend\u00eancias\n\u00b6\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n# Mysql\npipenv install mysqlclient\n\n# Libs para se criar o arquivo de ambiente .env\npipenv install python-decouple\npipenv install dj-database-url\n\n# lib para se trabalhar com api no django\npipenv install djangorestframework\npipenv install django-rest-auth\npipenv install django-filter\npipenv install django-cors-headers\npipenv install django-extensions\n\n# lib para gerar logs do sql gerado\npipenv install sqlformatter\n\n# Notebook ipython\npipenv install notebook --dev\npipenv install \"ipython[notebook]\" --dev",
            "title": "05. NPM do Django (pipenv)"
        },
        {
            "location": "/Django/05. NPM do Django (pipenv)/#05-npm-do-django-pipenv",
            "text": "\u00c9 muito importante dizer que temos hoje o pipenv que ser\u00e1 respons\u00e1vel para separar para n\u00f3s o que \u00e9 lib de produ\u00e7\u00e3o e lib de desenvolvimento, muito semelhante ao que o NPM do nodejs faz.  \u00c9 muito recomend\u00e1vel que nos pr\u00f3ximos passos a seguir, utilizemos o pipenv para gerenciar os pacotes, pois poderemos especificar o que \u00e9 depend\u00eancia de desenvolvimento e depend\u00eancia de produ\u00e7\u00e3o.",
            "title": "05. NPM do Django (pipenv)"
        },
        {
            "location": "/Django/05. NPM do Django (pipenv)/#pipenv-instalacao",
            "text": "pip install pipenv",
            "title": "Pipenv : Instala\u00e7\u00e3o"
        },
        {
            "location": "/Django/05. NPM do Django (pipenv)/#pipenv-github-comandos",
            "text": "github:  https://github.com/pypa/pipenv  Instala todas as depend\u00eancias para o projeto (excluindo as dev)\npipenv clean\n\nInstala todas as depend\u00eancias para o projeto (excluindo as dev)\npipenv install\n\nInstala todas as depend\u00eancias para o projeto (inclusive as dev)\npipenv install --dev\n\nVerifica as depend\u00eancias de seguran\u00e7a e vulnerabilidades\npipenv check\n\nGera o arquivo Pipfilelock\npipenv lock",
            "title": "Pipenv : github / Comandos"
        },
        {
            "location": "/Django/05. NPM do Django (pipenv)/#instalando-algumas-dependencias",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20 # Mysql\npipenv install mysqlclient\n\n# Libs para se criar o arquivo de ambiente .env\npipenv install python-decouple\npipenv install dj-database-url\n\n# lib para se trabalhar com api no django\npipenv install djangorestframework\npipenv install django-rest-auth\npipenv install django-filter\npipenv install django-cors-headers\npipenv install django-extensions\n\n# lib para gerar logs do sql gerado\npipenv install sqlformatter\n\n# Notebook ipython\npipenv install notebook --dev\npipenv install \"ipython[notebook]\" --dev",
            "title": "Instalando algumas depend\u00eancias"
        },
        {
            "location": "/Django/06. Shell Plus/",
            "text": "06. Rodando o shell_plus para executar comandos python\n\u00b6\n\n\nAtivando o Django Extensions\n\u00b6\n\n\nPara ativar o \nshell_plus\n, basta jogar em \nINSTALLED_APPS\n no arquivo \nsettings.py\n o \n'django_extensions'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n    \nINSTALLED_APPS\n \n=\n \n[\n\n    \n'django.contrib.admin'\n,\n\n    \n'django.contrib.auth'\n,\n\n    \n'django.contrib.contenttypes'\n,\n\n    \n'django.contrib.sessions'\n,\n\n    \n'django.contrib.messages'\n,\n\n    \n'django.contrib.staticfiles'\n,\n\n    \n'django_extensions'\n\n\n]\n\n\n\n\n\n\n\nExecutando via console:\n\u00b6\n\n\n1\nmanage shell_plus\n\n\n\n\n\n\nExecutando via navegador (browser):\n\u00b6\n\n\n1\n2\n3\nmanage shell_plus --notebook\nObs: aqui dever\u00e1 abrir uma url com o token, algo semelhante a:\nhttp://localhost:8888/?token=a9dfb42cc3673202a35e16869dcc26c32d6fa720e31b6c21\n\n\n\n\n\n\n\n\nClique em \nNew\n e depois em Django Shell-Plus\n\n\n\n\nPara usar \u00e9 super simples:\n  \nenter\n : Pula linha\n  \nshift-enter\n : Executa o comando\n\n\n\n\nObserva\u00e7\u00f5es\n\u00b6\n\n\n\n\nPara que serve o Shell_Plus?\n\n\n\"Mais para frente voc\u00ea entender\u00e1 melhor a necessidade do uso dele. Facilita demais testarmos a aplica\u00e7\u00e3o.\n\n\n\n\n\n\nShell_Plus\n\n\n\"Para sair do shell_plus via console, \u00e9 s\u00f3 digitar: \nexit()\n e pressionar \nenter\n e para sair do shell_plus via browser, quero dizer, parar o servi\u00e7o, basta ir no console que estiver executando e pressionar: \nctrl+c",
            "title": "06. Rodando o shell_plus para executar comandos python"
        },
        {
            "location": "/Django/06. Shell Plus/#06-rodando-o-shell_plus-para-executar-comandos-python",
            "text": "",
            "title": "06. Rodando o shell_plus para executar comandos python"
        },
        {
            "location": "/Django/06. Shell Plus/#ativando-o-django-extensions",
            "text": "Para ativar o  shell_plus , basta jogar em  INSTALLED_APPS  no arquivo  settings.py  o  'django_extensions'  1\n2\n3\n4\n5\n6\n7\n8\n9      INSTALLED_APPS   =   [ \n     'django.contrib.admin' , \n     'django.contrib.auth' , \n     'django.contrib.contenttypes' , \n     'django.contrib.sessions' , \n     'django.contrib.messages' , \n     'django.contrib.staticfiles' , \n     'django_extensions'  ]",
            "title": "Ativando o Django Extensions"
        },
        {
            "location": "/Django/06. Shell Plus/#executando-via-console",
            "text": "1 manage shell_plus",
            "title": "Executando via console:"
        },
        {
            "location": "/Django/06. Shell Plus/#executando-via-navegador-browser",
            "text": "1\n2\n3 manage shell_plus --notebook\nObs: aqui dever\u00e1 abrir uma url com o token, algo semelhante a:\nhttp://localhost:8888/?token=a9dfb42cc3673202a35e16869dcc26c32d6fa720e31b6c21    Clique em  New  e depois em Django Shell-Plus   Para usar \u00e9 super simples:\n   enter  : Pula linha\n   shift-enter  : Executa o comando",
            "title": "Executando via navegador (browser):"
        },
        {
            "location": "/Django/06. Shell Plus/#observacoes",
            "text": "Para que serve o Shell_Plus?  \"Mais para frente voc\u00ea entender\u00e1 melhor a necessidade do uso dele. Facilita demais testarmos a aplica\u00e7\u00e3o.    Shell_Plus  \"Para sair do shell_plus via console, \u00e9 s\u00f3 digitar:  exit()  e pressionar  enter  e para sair do shell_plus via browser, quero dizer, parar o servi\u00e7o, basta ir no console que estiver executando e pressionar:  ctrl+c",
            "title": "Observa\u00e7\u00f5es"
        },
        {
            "location": "/Django/07. Configurando a nossa App (settings.py)/",
            "text": "07. Configurando a nossa App (settings.py)\n\u00b6\n\n\nO arquivo principal de uma aplica\u00e7\u00e3o Django \u00e9 o settings.py, e \u00e9 nele que iremos mexer bem agora.\n\n\nConfigurando idioma no \nsettings.py\n\u00b6\n\n\nAonde voc\u00ea tem:\n\n\nLANGUAGE_CODE\n \n=\n \n'en-us'\n\n\nTIME_ZONE\n \n=\n \n'UTC'\n\n\n\n\n\nSubstituia por:\n\n\nLANGUAGE_CODE\n \n=\n \n'pt-br'\n\n\nTIME_ZONE\n \n=\n \n'America/Sao_Paulo'\n\n\n\n\n\nCriando um arquivo .env e profissionalizando a estrutura\n\u00b6\n\n\n\u00c9 muito importante para termos uma estrutura mais profissional separarmos as configura\u00e7\u00f5es de ambiente de configura\u00e7\u00f5es do projeto. Para isso usaremos da pr\u00e1tica de se criar um arquivo \n.env\n na raiz do projeto onde dever\u00e1 conter as minhas configura\u00e7\u00f5es.\n\n\nUtilizaremos de uma lib criado pelo Henrique Bastos (welcomethedjango : refer\u00eancia de curso na \u00e1rea) chamada python-decouple e tamb\u00e9m da lib dj-database-url.\n\n\n\n\nCrie o arquivo: \n.env\n na raiz do projeto com o seguinte conte\u00fado\n\n\n\n\n# Pegue a sua SECRET_KEY j\u00e1 criada ou gere outra hash\n\n\nSECRET_KEY\n=\n_fcu\n!\n1\n-\nn\n$\n76\n+\n@v\n=\nv4u9y68\n)\nz\n!\n)\nx0\n%\n8\nhj\n!\n51\n#k$+o)05gkgq40e\n\n\nDEBUG\n=\nTrue\n\n\nALLOWED_HOSTS\n=\n127.0\n.\n0.1\n,\n.\nlocalhost\n\n\nDATABASE_URL\n=\nmysql\n:\n//\nseu_usuario\n:\nsua_senha\n@localhost\n:\n3306\n/\nnomedobancoprincipal\n\n\nDATABASE_SECUNDARIO\n=\nmysql\n:\n//\nseu_usuario\n:\nsua_senha\n@localhost\n:\n3306\n/\nnomedobancosecundario\n\n\nLANGUAGE_CODE\n=\npt\n-\nbr\n\n\nTIME_ZONE\n=\nAmerica\n/\nSao_Paulo\n\n\nUSE_I18N\n=\nTrue\n\n\nUSE_L10N\n=\nTrue\n\n\nUSE_TZ\n=\nTrue\n\n\n\n\n\n\n\nAbra o arquivo \nsettings.py\n e adicione logo ap\u00f3s a \nlinha 13 : import os\n o seguinte conte\u00fado:\n\n\n\n\nsettings.py\n\n\nfrom\n \ndecouple\n \nimport\n \nconfig\n,\n \nCsv\n\n\nfrom\n \ndj_database_url\n \nimport\n \nparse\n\n\n\n\nConfigura\u00e7\u00f5es no settings.py vindas do .env\n\u00b6\n\n\nsettings.py\n\n\n# SECURITY WARNING: keep the secret key used in production secret!\n\n\nSECRET_KEY\n \n=\n \nconfig\n(\n'SECRET_KEY'\n)\n\n\n\n# SECURITY WARNING: don't run with debug turned on in production!\n\n\nDEBUG\n \n=\n \nconfig\n(\n'DEBUG'\n,\n \ncast\n=\nbool\n,\n \ndefault\n=\nFalse\n)\n\n\n\nALLOWED_HOSTS\n \n=\n \nconfig\n(\n'ALLOWED_HOSTS'\n,\n \ncast\n=\nCsv\n(),\n \ndefault\n=\n[])\n\n\n\n# Database\n\n\n# https://docs.djangoproject.com/en/2.0/ref/settings/#databases\n\n\n\nDATABASES\n \n=\n \ndict\n()\n\n\nDATABASES\n[\n'default'\n]\n \n=\n \nconfig\n(\n'DATABASE_URL'\n,\n \ncast\n=\nparse\n,\n \ndefault\n=\n'sqlite:///'\n \n+\n \nos\n.\npath\n.\njoin\n(\nBASE_DIR\n,\n \n'db.sqlite3'\n))\n\n\n# Usarei aqui: farsoft, mas voc\u00ea pode usar o nome que quiser\n\n\nDATABASES\n[\n'farsoft'\n]\n \n=\n \nconfig\n(\n'DATABASE_SECUNDARIO'\n,\n \ncast\n=\nparse\n)\n\n\n\n# Internationalization\n\n\n# https://docs.djangoproject.com/en/2.0/topics/i18n/\n\n\n\nLANGUAGE_CODE\n \n=\n \nconfig\n(\n'LANGUAGE_CODE'\n,\n \ndefault\n=\n'pt-br'\n)\n\n\n\nTIME_ZONE\n \n=\n \nconfig\n(\n'TIME_ZONE'\n,\n \ndefault\n=\n'America/Sao_Paulo'\n)\n\n\n\nUSE_I18N\n \n=\n \nconfig\n(\n'USE_I18N'\n,\n \ndefault\n=\nTrue\n,\n \ncast\n=\nbool\n)\n\n\n\nUSE_L10N\n \n=\n \nconfig\n(\n'USE_L10N'\n,\n \ndefault\n=\nTrue\n,\n \ncast\n=\nbool\n)\n\n\n\nUSE_TZ\n \n=\n \nconfig\n(\n'USE_TZ'\n,\n \ndefault\n=\nTrue\n,\n \ncast\n=\nbool\n)\n\n\n\n\nAproveitando, voc\u00ea pode deixar o settings.py ainda mais profissional, para isso vamos separar os INSTALLED_APPS por DJANGO_APPS, THIRD_APPS, LOCAL_APPS.\n\n\nsettings.py\n\n\n# Application definition\n\n\n\n# Libs padr\u00e3o quem vem com a instala\u00e7\u00e3o do Django\n\n\nDJANGO_APPS\n \n=\n \n[\n\n    \n'django.contrib.admin'\n,\n\n    \n'django.contrib.auth'\n,\n\n    \n'django.contrib.contenttypes'\n,\n\n    \n'django.contrib.sessions'\n,\n\n    \n'django.contrib.messages'\n,\n\n    \n'django.contrib.staticfiles'\n,\n\n\n]\n\n\n\n# Libs de Terceiros\n\n\nTHIRD_APPS\n \n=\n \n[\n\n    \n'django_extensions'\n,\n\n    \n'rest_framework'\n,\n\n    \n'rest_framework.authtoken'\n,\n\n    \n'rest_auth'\n,\n\n    \n'corsheaders'\n,\n\n\n]\n\n\n\n# Apps locais que criarmos\n\n\nLOCAL_APPS\n \n=\n \n[\n\n    \n'api.core'\n,\n\n\n]\n\n\n\nINSTALLED_APPS\n \n=\n \nDJANGO_APPS\n \n+\n \nTHIRD_APPS\n \n+\n \nLOCAL_APPS",
            "title": "07. Configurando a nossa App (settings.py)"
        },
        {
            "location": "/Django/07. Configurando a nossa App (settings.py)/#07-configurando-a-nossa-app-settingspy",
            "text": "O arquivo principal de uma aplica\u00e7\u00e3o Django \u00e9 o settings.py, e \u00e9 nele que iremos mexer bem agora.",
            "title": "07. Configurando a nossa App (settings.py)"
        },
        {
            "location": "/Django/07. Configurando a nossa App (settings.py)/#configurando-idioma-no-settingspy",
            "text": "Aonde voc\u00ea tem:  LANGUAGE_CODE   =   'en-us'  TIME_ZONE   =   'UTC'   Substituia por:  LANGUAGE_CODE   =   'pt-br'  TIME_ZONE   =   'America/Sao_Paulo'",
            "title": "Configurando idioma no settings.py"
        },
        {
            "location": "/Django/07. Configurando a nossa App (settings.py)/#criando-um-arquivo-env-e-profissionalizando-a-estrutura",
            "text": "\u00c9 muito importante para termos uma estrutura mais profissional separarmos as configura\u00e7\u00f5es de ambiente de configura\u00e7\u00f5es do projeto. Para isso usaremos da pr\u00e1tica de se criar um arquivo  .env  na raiz do projeto onde dever\u00e1 conter as minhas configura\u00e7\u00f5es.  Utilizaremos de uma lib criado pelo Henrique Bastos (welcomethedjango : refer\u00eancia de curso na \u00e1rea) chamada python-decouple e tamb\u00e9m da lib dj-database-url.   Crie o arquivo:  .env  na raiz do projeto com o seguinte conte\u00fado   # Pegue a sua SECRET_KEY j\u00e1 criada ou gere outra hash  SECRET_KEY = _fcu ! 1 - n $ 76 + @v = v4u9y68 ) z ! ) x0 % 8 hj ! 51 #k$+o)05gkgq40e  DEBUG = True  ALLOWED_HOSTS = 127.0 . 0.1 , . localhost  DATABASE_URL = mysql : // seu_usuario : sua_senha @localhost : 3306 / nomedobancoprincipal  DATABASE_SECUNDARIO = mysql : // seu_usuario : sua_senha @localhost : 3306 / nomedobancosecundario  LANGUAGE_CODE = pt - br  TIME_ZONE = America / Sao_Paulo  USE_I18N = True  USE_L10N = True  USE_TZ = True    Abra o arquivo  settings.py  e adicione logo ap\u00f3s a  linha 13 : import os  o seguinte conte\u00fado:   settings.py  from   decouple   import   config ,   Csv  from   dj_database_url   import   parse",
            "title": "Criando um arquivo .env e profissionalizando a estrutura"
        },
        {
            "location": "/Django/07. Configurando a nossa App (settings.py)/#configuracoes-no-settingspy-vindas-do-env",
            "text": "settings.py  # SECURITY WARNING: keep the secret key used in production secret!  SECRET_KEY   =   config ( 'SECRET_KEY' )  # SECURITY WARNING: don't run with debug turned on in production!  DEBUG   =   config ( 'DEBUG' ,   cast = bool ,   default = False )  ALLOWED_HOSTS   =   config ( 'ALLOWED_HOSTS' ,   cast = Csv (),   default = [])  # Database  # https://docs.djangoproject.com/en/2.0/ref/settings/#databases  DATABASES   =   dict ()  DATABASES [ 'default' ]   =   config ( 'DATABASE_URL' ,   cast = parse ,   default = 'sqlite:///'   +   os . path . join ( BASE_DIR ,   'db.sqlite3' ))  # Usarei aqui: farsoft, mas voc\u00ea pode usar o nome que quiser  DATABASES [ 'farsoft' ]   =   config ( 'DATABASE_SECUNDARIO' ,   cast = parse )  # Internationalization  # https://docs.djangoproject.com/en/2.0/topics/i18n/  LANGUAGE_CODE   =   config ( 'LANGUAGE_CODE' ,   default = 'pt-br' )  TIME_ZONE   =   config ( 'TIME_ZONE' ,   default = 'America/Sao_Paulo' )  USE_I18N   =   config ( 'USE_I18N' ,   default = True ,   cast = bool )  USE_L10N   =   config ( 'USE_L10N' ,   default = True ,   cast = bool )  USE_TZ   =   config ( 'USE_TZ' ,   default = True ,   cast = bool )   Aproveitando, voc\u00ea pode deixar o settings.py ainda mais profissional, para isso vamos separar os INSTALLED_APPS por DJANGO_APPS, THIRD_APPS, LOCAL_APPS.  settings.py  # Application definition  # Libs padr\u00e3o quem vem com a instala\u00e7\u00e3o do Django  DJANGO_APPS   =   [ \n     'django.contrib.admin' , \n     'django.contrib.auth' , \n     'django.contrib.contenttypes' , \n     'django.contrib.sessions' , \n     'django.contrib.messages' , \n     'django.contrib.staticfiles' ,  ]  # Libs de Terceiros  THIRD_APPS   =   [ \n     'django_extensions' , \n     'rest_framework' , \n     'rest_framework.authtoken' , \n     'rest_auth' , \n     'corsheaders' ,  ]  # Apps locais que criarmos  LOCAL_APPS   =   [ \n     'api.core' ,  ]  INSTALLED_APPS   =   DJANGO_APPS   +   THIRD_APPS   +   LOCAL_APPS",
            "title": "Configura\u00e7\u00f5es no settings.py vindas do .env"
        },
        {
            "location": "/Django/08. Configurando o Banco de Dados Mysql/",
            "text": "08. Configurando o Banco de Dados Mysql\n\u00b6\n\n\nUtilizaremos no exemplo a seguir 2 banco de dados, um banco da aplica\u00e7\u00e3o \napi_bancodedados\n e um outro para o banco de dados do ERP da \nFarsoft Systems\n, denominado aqui para fins de exemplo: \nfarsoft_bancodedados\n\n\nEnt\u00e3o o arquivo .env dever\u00e1 ficar na parte do banco de dados da seguinte maneira:\n\n\n# Importante: root \u00e9 o usu\u00e1rio da minha m\u00e1q local e minha senha local \u00e9 123456\n\n\nDATABASE_URL\n=\nmysql\n:\n//\nroot\n:\n123456\n@localhost\n:\n3306\n/\napi_bancodedados\n\n\nDATABASE_SECUNDARIO\n=\nmysql\n:\n//\nroot\n:\n123456\n@localhost\n:\n3306\n/\nfarsoft_bancodedados\n\n\n\n\n\nCriando as migrations\n\u00b6\n\n\nUma vez definido as configura\u00e7\u00f5es do seu banco de dados, \u00e9 importante voc\u00ea criar as tabelas iniciais do django, e para isso, voc\u00ea tem as migrations, basta executar o comando abaixo para criar as migrations atrav\u00e9s dos models, depois ger\u00e1-las (migrate) e depois criar o superuser para o acesso ao ambiente \n/admin\n do django:\n\n\n1\n2\n3\n4\n5\n# Para gerar as tabelas no banco principal\nmanage migrate\n\n# Para criar um usu\u00e1rio Admin\nmanage createsupersuser\n\n\n\n\n\n\nRodando o Servidor\n\u00b6\n\n\nPor padr\u00e3o, o servidor do django roda na porta 8080, por\u00e9m para tamb\u00e9m exemplificar, eu vou rodar ele na porta 8081. Para isso basta digitar o comando abaixo:\n\n\n1\nmanage runserver localhost:8081\n\n\n\n\n\n\n\n\nRodar o Servidor\n\n\nPara rodar o servidor na porta padr\u00e3o: 8080, basta digitar:\n\n\n1\nmanage runserver\n\n\n\n\n\n\n\n\nSe voc\u00ea abrir o navegador no endere\u00e7o: \nhttp://localhost:8081\n, dever\u00e1 ter algo como a imagem abaixo:\n\n\n\n\nVamos acessar agora o Admin do Django, para isso basta digitar o endere\u00e7o abaixo e entrar com os dados de acesso anteriormente criados:\n\n\n1\nhttp://localhost:8081/admin\n\n\n\n\n\n\n\n\nAi voc\u00ea dever\u00e1 ter algo como a imagem abaixo:",
            "title": "08. Configurando o Banco de Dados Mysql"
        },
        {
            "location": "/Django/08. Configurando o Banco de Dados Mysql/#08-configurando-o-banco-de-dados-mysql",
            "text": "Utilizaremos no exemplo a seguir 2 banco de dados, um banco da aplica\u00e7\u00e3o  api_bancodedados  e um outro para o banco de dados do ERP da  Farsoft Systems , denominado aqui para fins de exemplo:  farsoft_bancodedados  Ent\u00e3o o arquivo .env dever\u00e1 ficar na parte do banco de dados da seguinte maneira:  # Importante: root \u00e9 o usu\u00e1rio da minha m\u00e1q local e minha senha local \u00e9 123456  DATABASE_URL = mysql : // root : 123456 @localhost : 3306 / api_bancodedados  DATABASE_SECUNDARIO = mysql : // root : 123456 @localhost : 3306 / farsoft_bancodedados",
            "title": "08. Configurando o Banco de Dados Mysql"
        },
        {
            "location": "/Django/08. Configurando o Banco de Dados Mysql/#criando-as-migrations",
            "text": "Uma vez definido as configura\u00e7\u00f5es do seu banco de dados, \u00e9 importante voc\u00ea criar as tabelas iniciais do django, e para isso, voc\u00ea tem as migrations, basta executar o comando abaixo para criar as migrations atrav\u00e9s dos models, depois ger\u00e1-las (migrate) e depois criar o superuser para o acesso ao ambiente  /admin  do django:  1\n2\n3\n4\n5 # Para gerar as tabelas no banco principal\nmanage migrate\n\n# Para criar um usu\u00e1rio Admin\nmanage createsupersuser",
            "title": "Criando as migrations"
        },
        {
            "location": "/Django/08. Configurando o Banco de Dados Mysql/#rodando-o-servidor",
            "text": "Por padr\u00e3o, o servidor do django roda na porta 8080, por\u00e9m para tamb\u00e9m exemplificar, eu vou rodar ele na porta 8081. Para isso basta digitar o comando abaixo:  1 manage runserver localhost:8081    Rodar o Servidor  Para rodar o servidor na porta padr\u00e3o: 8080, basta digitar:  1 manage runserver    Se voc\u00ea abrir o navegador no endere\u00e7o:  http://localhost:8081 , dever\u00e1 ter algo como a imagem abaixo:   Vamos acessar agora o Admin do Django, para isso basta digitar o endere\u00e7o abaixo e entrar com os dados de acesso anteriormente criados:  1 http://localhost:8081/admin    Ai voc\u00ea dever\u00e1 ter algo como a imagem abaixo:",
            "title": "Rodando o Servidor"
        },
        {
            "location": "/Django/09. Configurando o CORS para uso futuro das APIs/",
            "text": "09. Configurando o CORS para uso futuro das APIs\n\u00b6\n\n\nConceito de CORS\n\u00b6\n\n\n\n\nCORS\n\n\n\nCompartilhamento de recursos de origens cruzadas \u00e9 um mecanismo que usa cabe\u00e7alhos HTTP adicionais para garantir permiss\u00e3o de acesso a recursos de um servidor diferente do da origem da p\u00e1gina (dom\u00ednio) correntemente em uso. Um user agent realiza um requisi\u00e7\u00e3o HTTP de origem cruzada quando executa uma requisi\u00e7\u00e3o de um dom\u00ednio, protocolo ou porta diferente do qual originou o documento corrente.\n\n\n\nFonte / Saiba mais em: \nhttps://developer.mozilla.org/pt-BR/docs/Web/HTTP/Controle_Acesso_CORS\n\n\n\n\n\n\nPor que eu preciso me preocupar com isso?\n\n\nComo iremos trabalhar com uma aplica\u00e7\u00e3o \nFRONTEND\n separada do backend, pode ser que a nossa aplica\u00e7\u00e3o \nFRONTEND\n esteja hospedada em um servidor e o nosso \nBACKEND\n em outro.\n\n\n\n\nConfigurando o CORS\n\u00b6\n\n\nEdite o arquivo \nsettings.py\n e adicione em MIDDLEWARE na\nprimeira linha:\n\n\nsettings.py\n\n\n'corsheaders.middleware.CorsMiddleware'\n,\n\n\n\n\n\nE adicione depois, tamb\u00e9m em settings.py, ap\u00f3s a declara\u00e7\u00e3o do INSTALLED_APPS a vari\u00e1vel:\n\n\nsettings.py\n\n\nCORS_ORIGIN_ALLOW_ALL\n \n=\n \nTrue",
            "title": "09. Configurando o CORS para uso futuro das APIs"
        },
        {
            "location": "/Django/09. Configurando o CORS para uso futuro das APIs/#09-configurando-o-cors-para-uso-futuro-das-apis",
            "text": "",
            "title": "09. Configurando o CORS para uso futuro das APIs"
        },
        {
            "location": "/Django/09. Configurando o CORS para uso futuro das APIs/#conceito-de-cors",
            "text": "CORS  \nCompartilhamento de recursos de origens cruzadas \u00e9 um mecanismo que usa cabe\u00e7alhos HTTP adicionais para garantir permiss\u00e3o de acesso a recursos de um servidor diferente do da origem da p\u00e1gina (dom\u00ednio) correntemente em uso. Um user agent realiza um requisi\u00e7\u00e3o HTTP de origem cruzada quando executa uma requisi\u00e7\u00e3o de um dom\u00ednio, protocolo ou porta diferente do qual originou o documento corrente.  Fonte / Saiba mais em:  https://developer.mozilla.org/pt-BR/docs/Web/HTTP/Controle_Acesso_CORS    Por que eu preciso me preocupar com isso?  Como iremos trabalhar com uma aplica\u00e7\u00e3o  FRONTEND  separada do backend, pode ser que a nossa aplica\u00e7\u00e3o  FRONTEND  esteja hospedada em um servidor e o nosso  BACKEND  em outro.",
            "title": "Conceito de CORS"
        },
        {
            "location": "/Django/09. Configurando o CORS para uso futuro das APIs/#configurando-o-cors",
            "text": "Edite o arquivo  settings.py  e adicione em MIDDLEWARE na\nprimeira linha:  settings.py  'corsheaders.middleware.CorsMiddleware' ,   E adicione depois, tamb\u00e9m em settings.py, ap\u00f3s a declara\u00e7\u00e3o do INSTALLED_APPS a vari\u00e1vel:  settings.py  CORS_ORIGIN_ALLOW_ALL   =   True",
            "title": "Configurando o CORS"
        },
        {
            "location": "/Django/10. Configurando o REST_FRAMEWORK/",
            "text": "10. Configurando o REST_FRAMEWORK\n\u00b6\n\n\nLIB REST FRAMEWORK\n\u00b6\n\n\nEssa lib nos ajudar\u00e1 a trabalhar com o Django como API Rest.\n\n\nAtivando a LIB REST FRAMEWORK\n\u00b6\n\n\nEdite o arquivo \nsettings.py\n e adicione abaixo de INSTALLED_APPS e CORS_ORIGIN_ALLOW_ALL o c\u00f3digo:\n\n\nREST_FRAMEWORK\n \n=\n \n{\n\n    \n'DEFAULT_PERMISSION_CLASSES'\n:\n \n(\n\n        \n'rest_framework.permissions.IsAuthenticated'\n,\n\n        \n# 'rest_framework.permissions.DjangoModelPermissions',  # Habilitar se quiser fazer valer o controle de acesso do Admin do Django\n\n    \n),\n\n    \n'DEFAULT_FILTER_BACKENDS'\n:\n \n(\n\n        \n'django_filters.rest_framework.DjangoFilterBackend'\n,\n\n    \n),\n\n    \n'DEFAULT_AUTHENTICATION_CLASSES'\n:\n \n(\n\n        \n'rest_framework.authentication.TokenAuthentication'\n,\n\n        \n# 'rest_framework.authentication.SessionAuthentication', # Ativar em modo de desenvolvimento pra facilitar os testes da API com m\u00e9todos GET\n\n    \n),\n\n    \n'DEFAULT_PARSER_CLASSES'\n:\n \n(\n\n        \n'rest_framework.parsers.JSONParser'\n,\n\n    \n),\n\n    \n'COERCE_DECIMAL_TO_STRING'\n:\n \nFalse\n,\n\n    \n'DEFAULT_PAGINATION_CLASS'\n:\n \n'rest_framework.pagination.LimitOffsetPagination'\n,\n\n\n}",
            "title": "10. Configurando o REST_FRAMEWORK"
        },
        {
            "location": "/Django/10. Configurando o REST_FRAMEWORK/#10-configurando-o-rest_framework",
            "text": "",
            "title": "10. Configurando o REST_FRAMEWORK"
        },
        {
            "location": "/Django/10. Configurando o REST_FRAMEWORK/#lib-rest-framework",
            "text": "Essa lib nos ajudar\u00e1 a trabalhar com o Django como API Rest.",
            "title": "LIB REST FRAMEWORK"
        },
        {
            "location": "/Django/10. Configurando o REST_FRAMEWORK/#ativando-a-lib-rest-framework",
            "text": "Edite o arquivo  settings.py  e adicione abaixo de INSTALLED_APPS e CORS_ORIGIN_ALLOW_ALL o c\u00f3digo:  REST_FRAMEWORK   =   { \n     'DEFAULT_PERMISSION_CLASSES' :   ( \n         'rest_framework.permissions.IsAuthenticated' , \n         # 'rest_framework.permissions.DjangoModelPermissions',  # Habilitar se quiser fazer valer o controle de acesso do Admin do Django \n     ), \n     'DEFAULT_FILTER_BACKENDS' :   ( \n         'django_filters.rest_framework.DjangoFilterBackend' , \n     ), \n     'DEFAULT_AUTHENTICATION_CLASSES' :   ( \n         'rest_framework.authentication.TokenAuthentication' , \n         # 'rest_framework.authentication.SessionAuthentication', # Ativar em modo de desenvolvimento pra facilitar os testes da API com m\u00e9todos GET \n     ), \n     'DEFAULT_PARSER_CLASSES' :   ( \n         'rest_framework.parsers.JSONParser' , \n     ), \n     'COERCE_DECIMAL_TO_STRING' :   False , \n     'DEFAULT_PAGINATION_CLASS' :   'rest_framework.pagination.LimitOffsetPagination' ,  }",
            "title": "Ativando a LIB REST FRAMEWORK"
        },
        {
            "location": "/Django/11. Registrando a nossa App (core) no Django/",
            "text": "11. Registrando a nossa App (core) no Django\n\u00b6\n\n\nRegistrar a App em INSTALLED_APPS\n\u00b6\n\n\nPor conven\u00e7\u00e3o \u00e9 muito comum utilizarmos como primeira aplica\u00e7\u00e3o a palavra: core, que significa N\u00daCLEO, ou melhor, N\u00daCLEO PRINCIPAL, mas poderia ser qualquer outro nome.\n\n\n1\ndjango-admin startapp core\n\n\n\n\n\n\nUma vez rodado esse comando acima voc\u00ea notar\u00e1 que aparecer\u00e1 no diret\u00f3rio da sua aplica\u00e7\u00e3o uma \npasta = core\n.\n\n\nAgora, precisamos registrar essa aplica\u00e7\u00e3o no \nsettings.py\n.\n\n\n# Apps locais que criarmos\n\n\nLOCAL_APPS\n \n=\n \n[\n\n    \n'api.core'\n,\n\n\n]",
            "title": "11. Registrando a nossa App (core) no Django"
        },
        {
            "location": "/Django/11. Registrando a nossa App (core) no Django/#11-registrando-a-nossa-app-core-no-django",
            "text": "",
            "title": "11. Registrando a nossa App (core) no Django"
        },
        {
            "location": "/Django/11. Registrando a nossa App (core) no Django/#registrar-a-app-em-installed_apps",
            "text": "Por conven\u00e7\u00e3o \u00e9 muito comum utilizarmos como primeira aplica\u00e7\u00e3o a palavra: core, que significa N\u00daCLEO, ou melhor, N\u00daCLEO PRINCIPAL, mas poderia ser qualquer outro nome.  1 django-admin startapp core   Uma vez rodado esse comando acima voc\u00ea notar\u00e1 que aparecer\u00e1 no diret\u00f3rio da sua aplica\u00e7\u00e3o uma  pasta = core .  Agora, precisamos registrar essa aplica\u00e7\u00e3o no  settings.py .  # Apps locais que criarmos  LOCAL_APPS   =   [ \n     'api.core' ,  ]",
            "title": "Registrar a App em INSTALLED_APPS"
        },
        {
            "location": "/Django/12. Preparando a autentica\u00e7\u00e3o via TOKEN/",
            "text": "12. Preparando a autentica\u00e7\u00e3o via TOKEN\n\u00b6\n\n\nCriando a tabela Token\n\u00b6\n\n\nAgora, vamos ativar a autentica\u00e7\u00e3o via TOKEN. Para isso, basta digitar na linha de comando:\n\n\n1\nmanage migrate\n\n\n\n\n\n\nVoc\u00ea dever\u00e1 ver algo como:\n\n\n1\n2\n3\n4\n5\nOperations to perform:\n  Apply all migrations: admin, auth, authtoken, contenttypes, sessions\nRunning migrations:\n\n  Applying authtoken.0001_initial... OK\n\n  Applying authtoken.0002_auto_20160226_1747... OK\n\n\n\n\n\n\nVerificando a cria\u00e7\u00e3o\n\u00b6\n\n\nAgora se rodar o server novamente:\n\n\n1\nmanage runserver localhost:8081\n\n\n\n\n\n\nVoc\u00ea ver\u00e1 que o token apareceu no admin do django:",
            "title": "12. Preparando a autentica\u00e7\u00e3o via TOKEN"
        },
        {
            "location": "/Django/12. Preparando a autentica\u00e7\u00e3o via TOKEN/#12-preparando-a-autenticacao-via-token",
            "text": "",
            "title": "12. Preparando a autentica\u00e7\u00e3o via TOKEN"
        },
        {
            "location": "/Django/12. Preparando a autentica\u00e7\u00e3o via TOKEN/#criando-a-tabela-token",
            "text": "Agora, vamos ativar a autentica\u00e7\u00e3o via TOKEN. Para isso, basta digitar na linha de comando:  1 manage migrate   Voc\u00ea dever\u00e1 ver algo como:  1\n2\n3\n4\n5 Operations to perform:\n  Apply all migrations: admin, auth, authtoken, contenttypes, sessions\nRunning migrations:   Applying authtoken.0001_initial... OK   Applying authtoken.0002_auto_20160226_1747... OK",
            "title": "Criando a tabela Token"
        },
        {
            "location": "/Django/12. Preparando a autentica\u00e7\u00e3o via TOKEN/#verificando-a-criacao",
            "text": "Agora se rodar o server novamente:  1 manage runserver localhost:8081   Voc\u00ea ver\u00e1 que o token apareceu no admin do django:",
            "title": "Verificando a cria\u00e7\u00e3o"
        },
        {
            "location": "/Django/13. Criando o nosso primeiro CRUD/",
            "text": "13. Criando o nosso primeiro CRUD\n\u00b6\n\n\nVamos criar agora um pequeno CRUD bem simples para exemplificar o uso do Admin do Django e depois veremos como ir\u00e1 funcionar como Rest Api.\n\n\nExemplo: Tarefas\n\u00b6\n\n\nPara isso, iremos criar uma tabela no banco bem simples, apenas com 3 campos, chamada: Tarefas.\n\n\nPadr\u00e3o MVT (Model, View, Template)\n\u00b6\n\n\nNo django, o padr\u00e3o de desenvolvimento \u00e9 MVT e n\u00e3o MVC, mais adiante vamos entender melhor isso.\n\n\nCriando o Model: Tarefas\n\u00b6\n\n\nAbrir o arquivo \ncore > models.py\n e implementar o c\u00f3digo abaixo:\n\n\nclass\n \nTarefa\n(\nmodels\n.\nModel\n):\n\n\n    \nSTATUS\n \n=\n \n(\n\n        \n(\n'P'\n,\n \n'Pendente'\n),\n\n        \n(\n'F'\n,\n \n'Finalizada'\n),\n\n        \n(\n'C'\n,\n \n'Cancelada'\n)\n\n    \n)\n\n\n    \ndescricao\n \n=\n \nmodels\n.\nCharField\n(\nmax_length\n=\n255\n)\n\n    \nstatus\n \n=\n \nmodels\n.\nCharField\n(\nmax_length\n=\n1\n,\n \nchoices\n=\nSTATUS\n,\n \ndefault\n=\n'P'\n)\n\n\n    \ndef\n \n__str__\n(\nself\n):\n\n        \nreturn\n \nself\n.\ndescricao\n\n\n    \nclass\n \nMeta\n:\n\n        \nordering\n \n=\n \n(\n'id'\n,\n \n'descricao'\n)\n\n\n\n\n\nHabilitando no Admin do Django o model Tarefas\n\u00b6\n\n\nVamos habilitar no Admin do Django os recursos de CRUD e mais recursos de pesquisa e filtro e determinar quais campos (fields) queremos que apare\u00e7a no GRID.\n\n\nEditar o arquivo \ncore > admin.py\n e registrar o Model criado:\n\n\nfrom\n \ndjango.contrib\n \nimport\n \nadmin\n\n\nfrom\n \n.models\n \nimport\n \nTarefa\n\n\n# Register your models here.\n\n\n\n# admin.site.register(Tarefa) # Se fosse pra registrar de forma simples\n\n\n\n@admin.register\n(\nTarefa\n)\n\n\nclass\n \nTarefaAdmin\n(\nadmin\n.\nModelAdmin\n):\n\n    \nlist_display\n \n=\n \n[\n'descricao'\n,\n \n'status'\n]\n\n    \nlist_filter\n \n=\n \n(\n'descricao'\n,\n \n'status'\n)\n\n    \nsearch_fields\n \n=\n \n(\n'descricao'\n,)",
            "title": "13. Criando o nosso primeiro CRUD"
        },
        {
            "location": "/Django/13. Criando o nosso primeiro CRUD/#13-criando-o-nosso-primeiro-crud",
            "text": "Vamos criar agora um pequeno CRUD bem simples para exemplificar o uso do Admin do Django e depois veremos como ir\u00e1 funcionar como Rest Api.",
            "title": "13. Criando o nosso primeiro CRUD"
        },
        {
            "location": "/Django/13. Criando o nosso primeiro CRUD/#exemplo-tarefas",
            "text": "Para isso, iremos criar uma tabela no banco bem simples, apenas com 3 campos, chamada: Tarefas.",
            "title": "Exemplo: Tarefas"
        },
        {
            "location": "/Django/13. Criando o nosso primeiro CRUD/#padrao-mvt-model-view-template",
            "text": "No django, o padr\u00e3o de desenvolvimento \u00e9 MVT e n\u00e3o MVC, mais adiante vamos entender melhor isso.",
            "title": "Padr\u00e3o MVT (Model, View, Template)"
        },
        {
            "location": "/Django/13. Criando o nosso primeiro CRUD/#criando-o-model-tarefas",
            "text": "Abrir o arquivo  core > models.py  e implementar o c\u00f3digo abaixo:  class   Tarefa ( models . Model ): \n\n     STATUS   =   ( \n         ( 'P' ,   'Pendente' ), \n         ( 'F' ,   'Finalizada' ), \n         ( 'C' ,   'Cancelada' ) \n     ) \n\n     descricao   =   models . CharField ( max_length = 255 ) \n     status   =   models . CharField ( max_length = 1 ,   choices = STATUS ,   default = 'P' ) \n\n     def   __str__ ( self ): \n         return   self . descricao \n\n     class   Meta : \n         ordering   =   ( 'id' ,   'descricao' )",
            "title": "Criando o Model: Tarefas"
        },
        {
            "location": "/Django/13. Criando o nosso primeiro CRUD/#habilitando-no-admin-do-django-o-model-tarefas",
            "text": "Vamos habilitar no Admin do Django os recursos de CRUD e mais recursos de pesquisa e filtro e determinar quais campos (fields) queremos que apare\u00e7a no GRID.  Editar o arquivo  core > admin.py  e registrar o Model criado:  from   django.contrib   import   admin  from   .models   import   Tarefa  # Register your models here.  # admin.site.register(Tarefa) # Se fosse pra registrar de forma simples  @admin.register ( Tarefa )  class   TarefaAdmin ( admin . ModelAdmin ): \n     list_display   =   [ 'descricao' ,   'status' ] \n     list_filter   =   ( 'descricao' ,   'status' ) \n     search_fields   =   ( 'descricao' ,)",
            "title": "Habilitando no Admin do Django o model Tarefas"
        },
        {
            "location": "/Django/14. Trabalhando com os Migrations/",
            "text": "Trabalhando com os Migrations\n\n\n\n\nFazendo a M\u00e1gica acontecer\n\u00b6\n\n\nAgora \u00e9 a hora da m\u00e1gica (rs), basta executar o comando:\n\n\nmanage makemigrations\n\n\n\n\nE o django ir\u00e1 criar a migration da tabela \ntarefa\n chamada de \n0001_initial.py\n.\n\n\nAgora vamos executar o comando abaixo para criar em s\u00ed a tabela no banco de dados:\n\n\nmanage migrate\n\n\n\n\nConven\u00e7\u00e3o de Prefixo\n\u00b6\n\n\nPor convens\u00e3o, o django ir\u00e1 criar a tabela no banco chamada de: \ncore_tarefa\n, ou seja, ele ir\u00e1 gerar um prefixo: \"core_\" que \u00e9 o nome da nossa App criada.\n\n\nVoc\u00ea pode comprovar conforme imagem abaixo obtida entrando no mysql:\n\n\nmysql -u root -p\n\n\n\n\n\n\nFor\u00e7ar o nome da tabela no model\n\u00b6\n\n\n\n\nFor\u00e7ando o nome da tabela a ser criado sem o prefixo.\n\n\n\n\nAbra o arquivo \ncore > models.py\n e adicione o seguinte c\u00f3digo dentro do class Meta:\n\n\ndb_table\n \n=\n \n'tarefas'\n\n\n\n\n\nFicar\u00e1 assim:\n\n\nfrom\n \ndjango.db\n \nimport\n \nmodels\n\n\n\n# Create your models here.\n\n\n\nclass\n \nTarefa\n(\nmodels\n.\nModel\n):\n\n\n    \nSTATUS\n \n=\n \n(\n\n        \n(\n'P'\n,\n \n'Pendente'\n),\n\n        \n(\n'F'\n,\n \n'Finalizada'\n),\n\n        \n(\n'C'\n,\n \n'Cancelada'\n)\n\n    \n)\n\n\n    \ndescricao\n \n=\n \nmodels\n.\nCharField\n(\nmax_length\n=\n255\n)\n\n    \nstatus\n \n=\n \nmodels\n.\nCharField\n(\nmax_length\n=\n1\n,\n \nchoices\n=\nSTATUS\n,\n \ndefault\n=\n'P'\n)\n\n\n    \ndef\n \n__str__\n(\nself\n):\n\n        \nreturn\n \nself\n.\ndescricao\n\n\n    \nclass\n \nMeta\n:\n\n        \nordering\n \n=\n \n(\n'id'\n,\n \n'descricao'\n)\n\n\n        \ndb_table\n \n=\n \n'tarefas'\n\n\n\n\n\nRevisando as Migrations\n\u00b6\n\n\nImagine que agora iremos precisar recriar a migration novamente e desfazer a que criamos.\n\n\nPara visualizar as migrations j\u00e1 criadas/executadas, digite o comando:\n\n\nmanage showmigrations core\n\n\n\n\nVoc\u00ea ter\u00e1 algo como:\n\n\n[X] 0001_initial\n\n\n\n\nRevertendo as Migrations do Zero\n\u00b6\n\n\nComo estamos no in\u00edcio da aplica\u00e7\u00e3o, podemos reverter todas as migrations com o comando:\n\n\nmanage migrate core zero\n\n\n\n\nSe executarmos novamente o comando para ver as migrations executadas, teremos:\n\n\nmanage showmigrations core\n\n\n\n\nDever\u00e1 ter algo como:\n\n\n [ ] 0001_initial\n\n\n\n\nRecriando as Migrations\n\u00b6\n\n\nAgora, podemos remover o arquivo \ncore > migrations > 0001_initial.py\n e recri\u00e1-lo com o comando:\n\n\nmanage makemigrations\n\n\n\n\nVoc\u00ea vai notar se editar o arquivo que ele criou em options a instru\u00e7\u00e3o abaixo:\n\n\n'db_table'\n:\n \n'tarefas'\n,\n\n\n\n\n\nSe tudo correu bem e voc\u00ea entrar no banco de dados (mysql), voc\u00ea dever\u00e1 ter a sua tabela anterior: \ncore_tabelas\n exclu\u00edda e a nova tabela: \ntarefas\n gerada com sucesso conforme a imagem abaixo:\n\n\n\n\nDica: Fixando o comando\n\u00b6\n\n\n\n\nMigration\n\n\nmanage migrate core zero",
            "title": "14. Trabalhando com os Migrations"
        },
        {
            "location": "/Django/14. Trabalhando com os Migrations/#fazendo-a-magica-acontecer",
            "text": "Agora \u00e9 a hora da m\u00e1gica (rs), basta executar o comando:  manage makemigrations  E o django ir\u00e1 criar a migration da tabela  tarefa  chamada de  0001_initial.py .  Agora vamos executar o comando abaixo para criar em s\u00ed a tabela no banco de dados:  manage migrate",
            "title": "Fazendo a M\u00e1gica acontecer"
        },
        {
            "location": "/Django/14. Trabalhando com os Migrations/#convencao-de-prefixo",
            "text": "Por convens\u00e3o, o django ir\u00e1 criar a tabela no banco chamada de:  core_tarefa , ou seja, ele ir\u00e1 gerar um prefixo: \"core_\" que \u00e9 o nome da nossa App criada.  Voc\u00ea pode comprovar conforme imagem abaixo obtida entrando no mysql:  mysql -u root -p",
            "title": "Conven\u00e7\u00e3o de Prefixo"
        },
        {
            "location": "/Django/14. Trabalhando com os Migrations/#forcar-o-nome-da-tabela-no-model",
            "text": "For\u00e7ando o nome da tabela a ser criado sem o prefixo.   Abra o arquivo  core > models.py  e adicione o seguinte c\u00f3digo dentro do class Meta:  db_table   =   'tarefas'   Ficar\u00e1 assim:  from   django.db   import   models  # Create your models here.  class   Tarefa ( models . Model ): \n\n     STATUS   =   ( \n         ( 'P' ,   'Pendente' ), \n         ( 'F' ,   'Finalizada' ), \n         ( 'C' ,   'Cancelada' ) \n     ) \n\n     descricao   =   models . CharField ( max_length = 255 ) \n     status   =   models . CharField ( max_length = 1 ,   choices = STATUS ,   default = 'P' ) \n\n     def   __str__ ( self ): \n         return   self . descricao \n\n     class   Meta : \n         ordering   =   ( 'id' ,   'descricao' )           db_table   =   'tarefas'",
            "title": "For\u00e7ar o nome da tabela no model"
        },
        {
            "location": "/Django/14. Trabalhando com os Migrations/#revisando-as-migrations",
            "text": "Imagine que agora iremos precisar recriar a migration novamente e desfazer a que criamos.  Para visualizar as migrations j\u00e1 criadas/executadas, digite o comando:  manage showmigrations core  Voc\u00ea ter\u00e1 algo como:  [X] 0001_initial",
            "title": "Revisando as Migrations"
        },
        {
            "location": "/Django/14. Trabalhando com os Migrations/#revertendo-as-migrations-do-zero",
            "text": "Como estamos no in\u00edcio da aplica\u00e7\u00e3o, podemos reverter todas as migrations com o comando:  manage migrate core zero  Se executarmos novamente o comando para ver as migrations executadas, teremos:  manage showmigrations core  Dever\u00e1 ter algo como:   [ ] 0001_initial",
            "title": "Revertendo as Migrations do Zero"
        },
        {
            "location": "/Django/14. Trabalhando com os Migrations/#recriando-as-migrations",
            "text": "Agora, podemos remover o arquivo  core > migrations > 0001_initial.py  e recri\u00e1-lo com o comando:  manage makemigrations  Voc\u00ea vai notar se editar o arquivo que ele criou em options a instru\u00e7\u00e3o abaixo:  'db_table' :   'tarefas' ,   Se tudo correu bem e voc\u00ea entrar no banco de dados (mysql), voc\u00ea dever\u00e1 ter a sua tabela anterior:  core_tabelas  exclu\u00edda e a nova tabela:  tarefas  gerada com sucesso conforme a imagem abaixo:",
            "title": "Recriando as Migrations"
        },
        {
            "location": "/Django/14. Trabalhando com os Migrations/#dica-fixando-o-comando",
            "text": "Migration  manage migrate core zero",
            "title": "Dica: Fixando o comando"
        },
        {
            "location": "/Django/15. Testando nosso primeiro CRUD/",
            "text": "15. Testando nosso primeiro CRUD\n\u00b6\n\n\nTestar a aplica\u00e7\u00e3o\n\u00b6\n\n\nmanage runserver 127.0.0.1:8081\n\n\n\n\n\n\nAbrir o admin no navegador: \nhttp://localhost:8081/admin/\n\n\n\n\nVoc\u00ea dever\u00e1 ter algo do tipo:\n\n\n\n\nAdmin do Django com o m\u00f3dulo de Tarefas dentro do Core\n\n\nCrud Completo\n\u00b6\n\n\n\n\nAbrir o admin no navegador: \nhttp://localhost:8081/admin/core/tarefa/\n ou clicar simplesmente em Tarefas no m\u00f3dulo do Admin acima:\n\n\n\n\n\n  \nCRUD : Com todas as funcionalidades\n\n\n\n  \nCRUD : Incluir\n\n\n\n  \nCRUD : Pesquisar\n\n\n\n  \nCRUD : Editar (clicar na descri\u00e7\u00e3o)\n\n\n\n  \nCRUD : Excluir\n\n\nVoc\u00ea vai notar que o DJANGO fez o CRUD completo pra n\u00f3s.\n\n\n\u00c9 importante ressaltar que esse \nCRUD\n possui o recurso de \npesquisa\n (search), de \nfiltro\n e de \ninsert\n, \nedit\n e \ndelete\n e isso se deu por conta da implementa\u00e7\u00e3o feita no arquivo \ncore > admin.py\n abaixo:\n\n\n1\n2\n3\n4\n5\n@admin.register\n(\nTarefa\n)\n\n\nclass\n \nTarefaAdmin\n(\nadmin\n.\nModelAdmin\n):\n\n\n    \nlist_display\n \n=\n \n[\n'id'\n,\n \n'descricao'\n,\n \n'status'\n]\n\n\n    \nlist_filter\n \n=\n \n(\n'descricao'\n,\n \n'status'\n)\n\n\n    \nsearch_fields\n \n=\n \n(\n'descricao'\n,)",
            "title": "15. Testando nosso primeiro CRUD"
        },
        {
            "location": "/Django/15. Testando nosso primeiro CRUD/#15-testando-nosso-primeiro-crud",
            "text": "",
            "title": "15. Testando nosso primeiro CRUD"
        },
        {
            "location": "/Django/15. Testando nosso primeiro CRUD/#testar-a-aplicacao",
            "text": "manage runserver 127.0.0.1:8081   Abrir o admin no navegador:  http://localhost:8081/admin/   Voc\u00ea dever\u00e1 ter algo do tipo:   Admin do Django com o m\u00f3dulo de Tarefas dentro do Core",
            "title": "Testar a aplica\u00e7\u00e3o"
        },
        {
            "location": "/Django/15. Testando nosso primeiro CRUD/#crud-completo",
            "text": "Abrir o admin no navegador:  http://localhost:8081/admin/core/tarefa/  ou clicar simplesmente em Tarefas no m\u00f3dulo do Admin acima:   \n   CRUD : Com todas as funcionalidades  \n   CRUD : Incluir  \n   CRUD : Pesquisar  \n   CRUD : Editar (clicar na descri\u00e7\u00e3o)  \n   CRUD : Excluir  Voc\u00ea vai notar que o DJANGO fez o CRUD completo pra n\u00f3s.  \u00c9 importante ressaltar que esse  CRUD  possui o recurso de  pesquisa  (search), de  filtro  e de  insert ,  edit  e  delete  e isso se deu por conta da implementa\u00e7\u00e3o feita no arquivo  core > admin.py  abaixo:  1\n2\n3\n4\n5 @admin.register ( Tarefa )  class   TarefaAdmin ( admin . ModelAdmin ):       list_display   =   [ 'id' ,   'descricao' ,   'status' ]       list_filter   =   ( 'descricao' ,   'status' )       search_fields   =   ( 'descricao' ,)",
            "title": "Crud Completo"
        },
        {
            "location": "/Django/16. Chegou a Hora do REST/",
            "text": "16. Chegou a Hora do REST\n\u00b6\n\n\nA minha maior necessidade para o uso do Django \u00e9 para trabalhar com API REST.\n\n\nPara isso, vamos fazer a devida configura\u00e7\u00e3o para ativar essa funcionalidade na Tabela: Tarefas que criamos.\n\n\nIniciando\n\u00b6\n\n\nPrecisamos criar dentro da pasta \ncore\n tr\u00eas arquivos:\n\n\nviews.py, serializers.py e urls.py\n\n\nMarcado\n\nviews.py\n\n\n1\n2\n3\n4\n5\n6\n7\n8\nfrom\n \ndjango.shortcuts\n \nimport\n \nrender\n\n\nfrom\n \n.serializers\n \nimport\n \n*\n  \n# ou Tarefa, ...\n\n\nfrom\n \nrest_framework\n \nimport\n \nviewsets\n,\n \nresponse\n\n\n\nclass\n \nTarefaViewSet\n(\nviewsets\n.\nModelViewSet\n):\n\n\n    \nqueryset\n \n=\n \nTarefa\n.\nobjects\n.\nall\n()\n\n    \nserializer_class\n \n=\n \nTarefaSerializer\n\n\n\n\n\n\n\nserializers.py\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\nfrom\n \n.models\n \nimport\n \nTarefa\n\n\nfrom\n \nrest_framework\n \nimport\n \nserializers\n\n\n\nclass\n \nTarefaSerializer\n(\nserializers\n.\nModelSerializer\n):\n\n\n\nstatus_display\n \n=\n \nserializers\n.\nSerializerMethodField\n()\n\n\n\ndef\n \nget_status_display\n(\nself\n,\n \nobj\n):\n\n  \nreturn\n \nobj\n.\nget_status_display\n()\n\n\n\nclass\n \nMeta\n:\n\n        \nmodel\n \n=\n \nTarefa\n\n        \nfields\n \n=\n \n'__all__'\n \n# ('descricao', 'status')\n\n\n\n\n\n\n\nurls.py\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\nfrom\n \ndjango.urls\n \nimport\n \npath\n,\n \ninclude\n\n\nfrom\n \n.views\n \nimport\n \n*\n\n\nfrom\n \nrest_framework\n \nimport\n \nrouters\n\n\n\nrouter\n \n=\n \nrouters\n.\nDefaultRouter\n(\ntrailing_slash\n=\nTrue\n)\n\n\nrouter\n.\nregister\n(\n'tarefa'\n,\n \nTarefaViewSet\n)\n\n\n\nurlpatterns\n \n=\n \n[\n\n    \npath\n(\n'api/'\n,\n \ninclude\n(\nrouter\n.\nurls\n)),\n\n\n]\n\n\n\n\n\n\n\nAgora, s\u00f3 precisamos referenciar o arquivo \ncore > urls.py\n do core no arquivo \nurls.py\n da aplica\u00e7\u00e3o.\n\n\nO arquivo dever\u00e1 estar assim:\n\n\n1\n2\n3\n4\n5\n6\nfrom\n \ndjango.contrib\n \nimport\n \nadmin\n\n\nfrom\n \ndjango.urls\n \nimport\n \npath\n\n\n\nurlpatterns\n \n=\n \n[\n\n    \npath\n(\n'admin/'\n,\n \nadmin\n.\nsite\n.\nurls\n),\n\n\n]\n\n\n\n\n\n\n\nFazer as altera\u00e7\u00f5es para que ele fique assim:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nfrom\n \ndjango.contrib\n \nimport\n \nadmin\n\n\nfrom\n \ndjango.urls\n \nimport\n \npath\n,\n \ninclude\n\n\n\nurlpatterns\n \n=\n \n[\n\n    \npath\n(\n'admin/'\n,\n \nadmin\n.\nsite\n.\nurls\n),\n\n    \npath\n(\n''\n,\n \ninclude\n(\n'api.core.urls'\n)),\n\n    \npath\n(\n'api-auth/'\n,\n \ninclude\n(\n'rest_framework.urls'\n,\n \nnamespace\n=\n'rest_framework'\n)),\n\n    \npath\n(\n'rest-auth/'\n,\n \ninclude\n(\n'rest_auth.urls'\n)),\n\n\n]\n\n\n\n\n\n\n\nVamos Testar tudo agora\n\u00b6\n\n\nPara fazer os testes, iremos utilizar o POSTMAN. Como o mesmo \u00e9 super conhecido, n\u00e3o ser\u00e1 necess\u00e1rio explicar como instal\u00e1-lo.\n\n\nIremos fazer a valida\u00e7\u00e3o do CRUD atrav\u00e9s das URLs abaixo:\n\n\nAutentica\u00e7\u00e3o\n\u00b6\n\n\nAntes de tudo, precisamos saber que o sistema estar\u00e1 validando as rotas, ou seja, o usu\u00e1rio dever\u00e1 estar autenticado para execut\u00e1-las.\n\n\nPara isso, precisamos obter atrav\u00e9s da rota abaixo o TOKEN JWT que ser\u00e1 utilizado posteriormente em todas as opera\u00e7\u00f5es para a realiza\u00e7\u00e3o das outras opera\u00e7\u00f5es.\n\n\nhttp://localhost:8081/rest-auth/login/\n\n\nMethod\n:\n \nPOST\n\n\nurl\n:\n \nhttp\n:\n//\nlocalhost\n:\n8081\n/\nrest\n-\nauth\n/\nlogin\n/\n\n\nHeaders\n:\n \nContent\n-\nType\n \n=\n \napplication\n/\njson\n\n\nraw\n\n\n{\n\n    \n\"username\"\n:\n \n\"admin\"\n,\n\n    \n\"password\"\n:\n \n\"admin123\"\n\n\n}\n\n\n\n\n\n  \nPreenchimento do Headers\n\n\n\n  \nPreenchimento da requisi\u00e7\u00e3o\n\n\nConforme voc\u00ea viu pela imagem acima, o DJANGO nos retornou o token JWT:\n\n\n{\n\n    \n\"key\"\n:\n \n\"52825719dbd5d629efef041044ef5edb7707b2c1\"\n\n\n}\n\n\n\n\n\n\n\nAgora basta usarmos ele nas pr\u00f3ximas requisi\u00e7\u00f5es.\n\n\nhttp://localhost:8081/api/tarefa\n\n\nMethod\n:\n \nGET\n\n\nurl\n:\n \nhttp\n:\n//\nlocalhost\n:\n8081\n/\napi\n/\ntarefa\n\n\nHeaders\n:\n \nAuthorization\n \n=\n \nToken\n \n52825719\ndbd5d629efef041044ef5edb7707b2c1\n\n\n\n\n\n  \nRequisi\u00e7\u00e3o do tipo GET para listar todas as Tarefas\n\n\nhttp://localhost:8081/api/tarefa/2/\n\n\nMethod\n:\n \nPUT\n\n\nurl\n:\n \nhttp\n:\n//\nlocalhost\n:\n8081\n/\napi\n/\ntarefa\n/\n2\n/\n\n\nHeaders\n:\n \nAuthorization\n \n=\n \nToken\n \n52825719\ndbd5d629efef041044ef5edb7707b2c1\n\n\n\nBody\n:\n \nraw\n\n\n{\n\n    \n\"id\"\n:\n \n2\n,\n\n    \n\"descricao\"\n:\n \n\"Testando edi\u00e7\u00e3o da Tarefa\"\n,\n\n    \n\"status\"\n:\n \n\"P\"\n\n\n}\n\n\n\n\n\n  \nPreenchimento dos Headers\n\n\n\n  \nRequisi\u00e7\u00e3o do tipo PUT para editar a Tarefa de ID = 2\n\n\nhttp://localhost:8081/api/tarefa/\n\n\nMethod\n:\n \nPOST\n\n\nurl\n:\n \nhttp\n:\n//\nlocalhost\n:\n8081\n/\napi\n/\ntarefa\n/\n\n\nHeaders\n:\n \nAuthorization\n \n=\n \nToken\n \n52825719\ndbd5d629efef041044ef5edb7707b2c1\n\n\n\nBody\n:\n \nraw\n\n\n{\n\n    \n\"descricao\"\n:\n \n\"Demonstrando como cadastrar uma tarefa...\"\n,\n\n    \n\"status\"\n:\n \n\"P\"\n\n\n}\n\n\n\n\n\n  \nPreenchimento dos Headers\n\n\n\n  \nRequisi\u00e7\u00e3o do tipo POST para INCLUIR uma nova Tarefa\n\n\nhttp://localhost:8081/api/tarefa/2/\n\n\nMethod\n:\n \nDELETE\n\n\nurl\n:\n \nhttp\n:\n//\nlocalhost\n:\n8081\n/\napi\n/\ntarefa\n/\n2\n/\n\n\nHeaders\n:\n \nAuthorization\n \n=\n \nToken\n \n52825719\ndbd5d629efef041044ef5edb7707b2c1\n\n\n\n\n\n  \nPreenchimento dos Headers\n\n\n\n  \nRequisi\u00e7\u00e3o do tipo DELETE para deletar a Tarefa de ID = 2 (204 No Content)\n\n\n\n  \nRequisi\u00e7\u00e3o do tipo DELETE para deletar a Tarefa de ID = 2 retornando em erro 404",
            "title": "16. Chegou a Hora do REST"
        },
        {
            "location": "/Django/16. Chegou a Hora do REST/#16-chegou-a-hora-do-rest",
            "text": "A minha maior necessidade para o uso do Django \u00e9 para trabalhar com API REST.  Para isso, vamos fazer a devida configura\u00e7\u00e3o para ativar essa funcionalidade na Tabela: Tarefas que criamos.",
            "title": "16. Chegou a Hora do REST"
        },
        {
            "location": "/Django/16. Chegou a Hora do REST/#iniciando",
            "text": "Precisamos criar dentro da pasta  core  tr\u00eas arquivos:  views.py, serializers.py e urls.py  Marcado views.py  1\n2\n3\n4\n5\n6\n7\n8 from   django.shortcuts   import   render  from   .serializers   import   *    # ou Tarefa, ...  from   rest_framework   import   viewsets ,   response  class   TarefaViewSet ( viewsets . ModelViewSet ): \n\n     queryset   =   Tarefa . objects . all () \n     serializer_class   =   TarefaSerializer    serializers.py   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 from   .models   import   Tarefa  from   rest_framework   import   serializers  class   TarefaSerializer ( serializers . ModelSerializer ):  status_display   =   serializers . SerializerMethodField ()  def   get_status_display ( self ,   obj ): \n   return   obj . get_status_display ()  class   Meta : \n         model   =   Tarefa \n         fields   =   '__all__'   # ('descricao', 'status')    urls.py   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 from   django.urls   import   path ,   include  from   .views   import   *  from   rest_framework   import   routers  router   =   routers . DefaultRouter ( trailing_slash = True )  router . register ( 'tarefa' ,   TarefaViewSet )  urlpatterns   =   [ \n     path ( 'api/' ,   include ( router . urls )),  ]    Agora, s\u00f3 precisamos referenciar o arquivo  core > urls.py  do core no arquivo  urls.py  da aplica\u00e7\u00e3o.  O arquivo dever\u00e1 estar assim:  1\n2\n3\n4\n5\n6 from   django.contrib   import   admin  from   django.urls   import   path  urlpatterns   =   [ \n     path ( 'admin/' ,   admin . site . urls ),  ]    Fazer as altera\u00e7\u00f5es para que ele fique assim:  1\n2\n3\n4\n5\n6\n7\n8\n9 from   django.contrib   import   admin  from   django.urls   import   path ,   include  urlpatterns   =   [ \n     path ( 'admin/' ,   admin . site . urls ), \n     path ( '' ,   include ( 'api.core.urls' )), \n     path ( 'api-auth/' ,   include ( 'rest_framework.urls' ,   namespace = 'rest_framework' )), \n     path ( 'rest-auth/' ,   include ( 'rest_auth.urls' )),  ]",
            "title": "Iniciando"
        },
        {
            "location": "/Django/16. Chegou a Hora do REST/#vamos-testar-tudo-agora",
            "text": "Para fazer os testes, iremos utilizar o POSTMAN. Como o mesmo \u00e9 super conhecido, n\u00e3o ser\u00e1 necess\u00e1rio explicar como instal\u00e1-lo.  Iremos fazer a valida\u00e7\u00e3o do CRUD atrav\u00e9s das URLs abaixo:",
            "title": "Vamos Testar tudo agora"
        },
        {
            "location": "/Django/16. Chegou a Hora do REST/#autenticacao",
            "text": "Antes de tudo, precisamos saber que o sistema estar\u00e1 validando as rotas, ou seja, o usu\u00e1rio dever\u00e1 estar autenticado para execut\u00e1-las.  Para isso, precisamos obter atrav\u00e9s da rota abaixo o TOKEN JWT que ser\u00e1 utilizado posteriormente em todas as opera\u00e7\u00f5es para a realiza\u00e7\u00e3o das outras opera\u00e7\u00f5es.  http://localhost:8081/rest-auth/login/  Method :   POST  url :   http : // localhost : 8081 / rest - auth / login /  Headers :   Content - Type   =   application / json  raw  { \n     \"username\" :   \"admin\" , \n     \"password\" :   \"admin123\"  }   \n   Preenchimento do Headers  \n   Preenchimento da requisi\u00e7\u00e3o  Conforme voc\u00ea viu pela imagem acima, o DJANGO nos retornou o token JWT:  { \n     \"key\" :   \"52825719dbd5d629efef041044ef5edb7707b2c1\"  }    Agora basta usarmos ele nas pr\u00f3ximas requisi\u00e7\u00f5es.  http://localhost:8081/api/tarefa  Method :   GET  url :   http : // localhost : 8081 / api / tarefa  Headers :   Authorization   =   Token   52825719 dbd5d629efef041044ef5edb7707b2c1   \n   Requisi\u00e7\u00e3o do tipo GET para listar todas as Tarefas  http://localhost:8081/api/tarefa/2/  Method :   PUT  url :   http : // localhost : 8081 / api / tarefa / 2 /  Headers :   Authorization   =   Token   52825719 dbd5d629efef041044ef5edb7707b2c1  Body :   raw  { \n     \"id\" :   2 , \n     \"descricao\" :   \"Testando edi\u00e7\u00e3o da Tarefa\" , \n     \"status\" :   \"P\"  }   \n   Preenchimento dos Headers  \n   Requisi\u00e7\u00e3o do tipo PUT para editar a Tarefa de ID = 2  http://localhost:8081/api/tarefa/  Method :   POST  url :   http : // localhost : 8081 / api / tarefa /  Headers :   Authorization   =   Token   52825719 dbd5d629efef041044ef5edb7707b2c1  Body :   raw  { \n     \"descricao\" :   \"Demonstrando como cadastrar uma tarefa...\" , \n     \"status\" :   \"P\"  }   \n   Preenchimento dos Headers  \n   Requisi\u00e7\u00e3o do tipo POST para INCLUIR uma nova Tarefa  http://localhost:8081/api/tarefa/2/  Method :   DELETE  url :   http : // localhost : 8081 / api / tarefa / 2 /  Headers :   Authorization   =   Token   52825719 dbd5d629efef041044ef5edb7707b2c1   \n   Preenchimento dos Headers  \n   Requisi\u00e7\u00e3o do tipo DELETE para deletar a Tarefa de ID = 2 (204 No Content)  \n   Requisi\u00e7\u00e3o do tipo DELETE para deletar a Tarefa de ID = 2 retornando em erro 404",
            "title": "Autentica\u00e7\u00e3o"
        },
        {
            "location": "/Django/17. Revis\u00e3o de Conceitos/",
            "text": "17. Revis\u00e3o de Conceitos\n\u00b6\n\n\nviews.py\n\n\n\u00c9 o arquivo aonde configurarei as rotas do DJANGO.",
            "title": "17. Revis\u00e3o de Conceitos"
        },
        {
            "location": "/Django/17. Revis\u00e3o de Conceitos/#17-revisao-de-conceitos",
            "text": "views.py  \u00c9 o arquivo aonde configurarei as rotas do DJANGO.",
            "title": "17. Revis\u00e3o de Conceitos"
        },
        {
            "location": "/Django/97. Sequencia de Comandos/",
            "text": "97. Sequencia de Comandos\n\u00b6\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\nmkdir\n \napi\n-\ncurso\n\n\ncd\n \napi\n-\ncurso\n\n\n\npython\n \n-\nm\n \nvenv\n \n.\nvenv\n\n\n\n.\nvenv\n\\\nScripts\n\\\nactivate\n\n\n\npip\n \ninstall\n \npipenv\n\n\n\nCopiar\n \no\n \narquivo\n \nPipenv\n \ne\n \nPipenv\n.\nlock\n \npara\n \na\n \npasta\n \ndo\n \nprojeto\n\n\n\npipenv\n \ninstall\n \ndjango\n\n\n\ndjango\n-\nadmin\n \nstartproject\n \nmeuPrimeiroProjeto\n \n.\n\n\n\npython\n \nmanage\n.\npy\n \nmigrate\n\n\n\npython\n \nmanage\n.\npy\n \ncreatesuperuser\n\n  \nfarnetani\n\n  \nfarnetani\n@gmail.com\n\n  \nminhasenha\n\n\n\npython\n \nmanage\n.\npy\n \nrunserver\n \nlocalhost\n:\n8081\n\n\n\nAbrir\n \no\n \narquivo\n \nmeuPrimeiroProjeto\n \n>\n \nurls\n.\npy\n\n\n\nCriar\n \numa\n \nrota\n:\n \nHello\n \nWorld\n:\n\n\n  \nfrom\n \n.views\n \nimport\n \nhello\n\n\n  \npath\n(\n'hello/'\n,\n \nhello\n)\n\n\n\nCriar\n \no\n \narquivo\n \nmeuPrimeiroProjeto\n \n>\n \nviews\n.\npy\n\n\n  \nfrom\n \ndjango.http\n \nimport\n \nHttpResponse\n\n\n  \ndef\n \nhello\n(\nrequest\n):\n\n    \nreturn\n \nHttpResponse\n(\n'Hello World!'\n)\n\n\n  \ndef\n \narticles\n(\nrequest\n,\n \nyear\n):\n\n    \nreturn\n \nHttpResponse\n(\n'O ano enviado foi: '\n \n+\n \nstr\n(\nyear\n))\n\n\n\n  \nAdicionar\n \nno\n \narquivo\n \nurls\n.\npy\n\n\n  \npath\n(\n'articles/<int:year>/'\n,\n \narticles\n),\n\n\n  \nhttp\n:\n//\nlocalhost\n:\n8081\n/\narticles\n/\n2018\n/",
            "title": "97. Sequencia de Comandos"
        },
        {
            "location": "/Django/97. Sequencia de Comandos/#97-sequencia-de-comandos",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48 mkdir   api - curso  cd   api - curso  python   - m   venv   . venv  . venv \\ Scripts \\ activate  pip   install   pipenv  Copiar   o   arquivo   Pipenv   e   Pipenv . lock   para   a   pasta   do   projeto  pipenv   install   django  django - admin   startproject   meuPrimeiroProjeto   .  python   manage . py   migrate  python   manage . py   createsuperuser \n   farnetani \n   farnetani @gmail.com \n   minhasenha  python   manage . py   runserver   localhost : 8081  Abrir   o   arquivo   meuPrimeiroProjeto   >   urls . py  Criar   uma   rota :   Hello   World : \n\n   from   .views   import   hello \n\n   path ( 'hello/' ,   hello )  Criar   o   arquivo   meuPrimeiroProjeto   >   views . py \n\n   from   django.http   import   HttpResponse \n\n   def   hello ( request ): \n     return   HttpResponse ( 'Hello World!' ) \n\n   def   articles ( request ,   year ): \n     return   HttpResponse ( 'O ano enviado foi: '   +   str ( year )) \n\n\n   Adicionar   no   arquivo   urls . py \n\n   path ( 'articles/<int:year>/' ,   articles ), \n\n   http : // localhost : 8081 / articles / 2018 /",
            "title": "97. Sequencia de Comandos"
        },
        {
            "location": "/Django/98. Ciclo Django/",
            "text": "98. Ciclo Django\n\u00b6",
            "title": "98. Ciclo Django"
        },
        {
            "location": "/Django/98. Ciclo Django/#98-ciclo-django",
            "text": "",
            "title": "98. Ciclo Django"
        },
        {
            "location": "/Django/99. Tabela de Comandos/",
            "text": "99. Tabela de Comandos\n\u00b6\n\n\n\n  \n\n    \n\n    \n\n  \n\n  \n\n    \n\n      \nComando\n\n      \nFuncionalidade\n\n    \n\n  \n\n  \n\n    \n\n      \npythom -m venv .venv\n\n      \nCria um Virtual Env (ambiente virtual) que isola o ambiente da sua aplica\u00e7\u00e3o do sistema operacional.\n\n    \n\n    \n\n      \n.venv\\Scripts\\activate\n\n      \nAtiva o virtual env da aplica\u00e7\u00e3o.\n\n    \n\n    \n\n      \ndeactivate\n\n      \nDesativa / Sai do virtual env da aplica\u00e7\u00e3o.\n\n    \n\n    \n\n      \npip install django\n\n      \nInstala a \u00faltimva vers\u00e3o do Django.\n\n    \n\n    \n\n      \ndjango-admin startproject nomedoprojeto .\n\n      \nCria um projeto django chamado: nomedoprojeto.\n\n    \n\n    \n\n      \npython manage.py runserver 127.0.0.1:8081\n\n      \nInicia o servidor na m\u00e1quina local na porta 8081.\n\n    \n\n    \n\n      \npip install pipenv\n\n      \nInstala o gerenciador de pacotes do python. (semelhante ao NPM, ele cria os arquivos Pipfile e Pipfile.lock e te possibilita separar libs de produ\u00e7\u00e3o de libs de desenvolvimento.\n\n    \n\n    \n\n      \nmanage makemigrations\n\n      \nGera as migrations com base nos models criados.\n\n    \n\n    \n\n      \nmanage migrate\n\n      \nExecuta as migrations geradas.\n\n    \n\n    \n\n      \nmanage showmigrations nomedaapp (ex: core)\n\n      \nMostra as migrations j\u00e1 executadas.\n\n    \n\n    \n\n      \nmanage makemigrations --empty nomedamigration\n\n      \nGera uma migration em branco.\n\n    \n\n    \n\n      \n\n          \n# Mysql\n\n          \n\n          pipenv install mysqlclient\n          \n\n          \n\n          \n# Libs para se criar o arquivo de ambiente .env\n\n          \n\n          pipenv install python-decouple\n          \n\n          pipenv install dj-database-url\n          \n\n          \n\n          \n# Libs para se trabalhar com api no django\n\n          \n\n          pipenv install djangorestframework\n          \n\n          pipenv install django-rest-auth\n          \n\n          pipenv install django-filter\n          \n\n          pipenv install django-cors-headers\n          \n\n          pipenv install django-extensions\n          \n\n          \n# Lib para gerar logs do sql gerado\n\n          \n\n          pipenv install sqlformatter\n          \n\n          \n# Notebook ipython\n\n          \n\n          pipenv install notebook --dev\n          \n\n          pipenv install \"ipython[notebook]\" --dev\n      \n\n      \nPacotes mais utilizados.",
            "title": "99. Tabela de Comandos"
        },
        {
            "location": "/Django/99. Tabela de Comandos/#99-tabela-de-comandos",
            "text": "Comando \n       Funcionalidade \n     \n   \n   \n     \n       pythom -m venv .venv \n       Cria um Virtual Env (ambiente virtual) que isola o ambiente da sua aplica\u00e7\u00e3o do sistema operacional. \n     \n     \n       .venv\\Scripts\\activate \n       Ativa o virtual env da aplica\u00e7\u00e3o. \n     \n     \n       deactivate \n       Desativa / Sai do virtual env da aplica\u00e7\u00e3o. \n     \n     \n       pip install django \n       Instala a \u00faltimva vers\u00e3o do Django. \n     \n     \n       django-admin startproject nomedoprojeto . \n       Cria um projeto django chamado: nomedoprojeto. \n     \n     \n       python manage.py runserver 127.0.0.1:8081 \n       Inicia o servidor na m\u00e1quina local na porta 8081. \n     \n     \n       pip install pipenv \n       Instala o gerenciador de pacotes do python. (semelhante ao NPM, ele cria os arquivos Pipfile e Pipfile.lock e te possibilita separar libs de produ\u00e7\u00e3o de libs de desenvolvimento. \n     \n     \n       manage makemigrations \n       Gera as migrations com base nos models criados. \n     \n     \n       manage migrate \n       Executa as migrations geradas. \n     \n     \n       manage showmigrations nomedaapp (ex: core) \n       Mostra as migrations j\u00e1 executadas. \n     \n     \n       manage makemigrations --empty nomedamigration \n       Gera uma migration em branco. \n     \n     \n       \n           # Mysql \n           \n          pipenv install mysqlclient\n           \n           \n           # Libs para se criar o arquivo de ambiente .env \n           \n          pipenv install python-decouple\n           \n          pipenv install dj-database-url\n           \n           \n           # Libs para se trabalhar com api no django \n           \n          pipenv install djangorestframework\n           \n          pipenv install django-rest-auth\n           \n          pipenv install django-filter\n           \n          pipenv install django-cors-headers\n           \n          pipenv install django-extensions\n           \n           # Lib para gerar logs do sql gerado \n           \n          pipenv install sqlformatter\n           \n           # Notebook ipython \n           \n          pipenv install notebook --dev\n           \n          pipenv install \"ipython[notebook]\" --dev\n       \n       Pacotes mais utilizados.",
            "title": "99. Tabela de Comandos"
        },
        {
            "location": "/Flask/API em Flask/",
            "text": "API em Flask\n\u00b6\n\n\nData: 21/03/2018\n\n\n\n\nExemplo do Tutorial\ngithub: \nhttps://github.com/farnetani/farnetani_python_api_flask\n\n\n\n\n\n\nPreparando o Ambiente PYTHON (>=3.6)\n\u00b6\n\n\nCriando Diret\u00f3rio do Projeto\n\u00b6\n\n\ncd\\\nc:\\\nmkdir web-flask\ncd web-flask\nmkdir api-flask\ncd api-flask\n\n\n\n\n\n\nCriando o Virtual Env\n\u00b6\n\n\npython -m venv venv\n\n\n\n\nAtivando o Virtual Env\n\u00b6\n\n\nvenv\\scripts\\activate\n\n\n\n\n\n\nInstalando o gerenciador de pacotes: pipenv (melhor que pip)\n\u00b6\n\n\npip install pipenv\n\n\n\n\n\n\nInstalando as libs que usaremos\n\u00b6\n\n\npipenv install flask # Dispensa coment\u00e1rios\npipenv install flask-sqlalchemy # Para gerenciar o banco de dados\npipenv install flask-restless # Para gerar o CRUD atrav\u00e9s de nossos models\npipenv install flask-login # Para gerar a autentica\u00e7\u00e3o\n\n\n\n\n\n\nCriando Estrutura do Projeto\n\u00b6\n\n\n\n\nCriar o arquivo run.py na raiz do projeto.\n\n\nCriar a pasta app.\n\n\nCriar as subpastas: models e routes em app.\n\n\n\n\n    app\\models\n    app\\routes\n\n\n\n\n\n\nCriar em cada pasta o arquivo: \n__init__.py\n para determinar que cada pasta ser\u00e1 um m\u00f3dulo.\n\n\n\n\n    app\\models\\__init__.py\n    app\\routes\\__init__.py\n    app\\__init__.py\n    run.py\n\n\n\n\nConte\u00fado dos arquivos de cada pasta:\n\u00b6\n\n\napp/__init__.py\n\n\n1\n2\n3\nfrom\n \nflask\n \nimport\n \nFlask\n\n\n\napp\n \n=\n \nFlask\n(\n__name__\n)\n\n\n\n\n\n\n\nrun.py\n\n\n1\n2\n3\n4\nfrom\n \napp\n \nimport\n \napp\n\n\n\nif\n \n__name__\n \n==\n \n'__main__'\n:\n\n    \napp\n.\nrun\n(\nport\n=\n8080\n,\n \ndebug\n=\nTrue\n)\n\n\n\n\n\n\n\napp/routes/__init__.py\n\n\n1\n2\n3\n4\n5\nfrom\n \napp\n \nimport\n \napp\n\n\n\n@app.route\n(\n'/'\n)\n\n\ndef\n \nindex\n():\n\n    \nreturn\n \n\"Ol\u00e1 Mundo!\"\n\n\n\n\n\n\n\nrun.py\n (Importar o m\u00f3dulo de rotas)\n\n\n1\n2\n3\n4\n5\n6\n7\nfrom\n \napp\n \nimport\n \napp\n\n\n\n# Importando rotas\n\n\nfrom\n \napp.routes\n \nimport\n \n*\n\n\n\n\nif\n \n__name__\n \n==\n \n'__main__'\n:\n\n    \napp\n.\nrun\n(\nport\n=\n8080\n,\n \ndebug\n=\nTrue\n)\n\n\n\n\n\n\n\nConfigurando o banco de dados\n\u00b6\n\n\nCriar a pasta: database na raiz do projeto.\n\n\nNo arquivo \n__init__.py\n da pasta \napp\n:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\nfrom\n \nflask\n \nimport\n \nFlask\n\n\nfrom\n \nflask_sqlalchemy\n \nimport\n \nSQLAlchemy\n\n\n\napp\n \n=\n \nFlask\n(\n__name__\n)\n\n\n\n\napp\n.\nconfig\n[\n'SQLALCHEMY_DATABASE_URI'\n]\n \n=\n \n'sqlite:///database/bancodedados.db'\n\n\ndb\n \n=\n \nSQLAlchemy\n(\napp\n)\n\n\n\n\nclass\n \nUsuario\n(\ndb\n.\nModel\n):\n\n\n    \nid\n \n=\n \ndb\n.\nColumn\n(\ndb\n.\nInteger\n,\n \nprimary_key\n=\nTrue\n)\n\n\n    \nnome\n \n=\n \ndb\n.\nColumn\n(\ndb\n.\nString\n(\n100\n))\n\n\n\n\ndb\n.\ncreate_all\n()\n\n\n\n\n\n\n\nConfigurando o Flask-Restless\n\u00b6\n\n\nImportar o APIManager: \nfrom flask_restless import APIManager\n\ne criar um manager (gerenciador): \nmanager = APIManager(app, flask_sqlalchemy_db=db)\n\n\nRescrever o arquivo \n__init__.py\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\nfrom\n \nflask\n \nimport\n \nFlask\n\n\nfrom\n \nflask_sqlalchemy\n \nimport\n \nSQLAlchemy\n\n\nfrom\n \nflask_restless\n \nimport\n \nAPIManager\n\n\n\n\napp\n \n=\n \nFlask\n(\n__name__\n)\n\n\n\napp\n.\nconfig\n[\n'SQLALCHEMY_DATABASE_URI'\n]\n \n=\n \n'sqlite:///database/storage.db'\n\n\ndb\n \n=\n \nSQLAlchemy\n(\napp\n)\n\n\n\n\nmanager\n \n=\n \nAPIManager\n(\napp\n,\n \nflask_sqlalchemy_db\n=\ndb\n)\n\n\n\n\n\n\n\nFlask-Restless\n\u00b6\n\n\nCria todos os m\u00e9todos de CRUD.\n\n\n\n\nIniciando a aplica\u00e7\u00e3o\n\u00b6\n\n\n\n\nCriar o model:\n\n\n\n\nusuario.py\n:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\nfrom\n \napp\n \nimport\n \ndb\n\n\nfrom\n \napp\n \nimport\n \nmanager\n\n\n\nclass\n \nCliente\n(\ndb\n.\nModel\n):\n\n    \nid\n \n=\n \ndb\n.\nColumn\n(\ndb\n.\nInteger\n,\n \nprimary_key\n=\nTrue\n)\n\n    \nnome\n \n=\n \ndb\n.\nColumn\n(\ndb\n.\nString\n(\n100\n))\n\n    \ndt_nascimento\n \n=\n \ndb\n.\nColumn\n(\ndb\n.\nDateTime\n)\n\n    \ncpf\n \n=\n \ndb\n.\nColumn\n(\ndb\n.\nString\n(\n14\n))\n\n    \nemail\n \n=\n \ndb\n.\nColumn\n(\ndb\n.\nString\n(\n100\n),\n \nunique\n=\nTrue\n)\n\n\n\ndb\n.\ncreate_all\n()\n\n\n# Aqui acontece toda a m\u00e1gica. \u00c9 a linha respons\u00e1vel por criar os M\u00c9TODOS automaticamente pra n\u00f3s\n\n\nmanager\n.\ncreate_api\n(\nCliente\n,\n \nmethods\n=\n[\n'POST'\n,\n \n'GET'\n,\n \n'PUT'\n,\n \n'DELETE'\n])\n\n\n\n\n\n\n\n\n\n\n\nReferenciar o model criado em:\n\n\n\n\n__init__.py\n:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\nfrom\n \napp\n \nimport\n \napp\n\n\n\n# Importando rotas\n\n\nfrom\n \napp.routes\n \nimport\n \n*\n\n\n\n# Importando models\n\n\nfrom\n \napp.models\n \nimport\n \nusuario\n\n\n\n\nif\n \n__name__\n \n==\n \n'__main__'\n:\n\n    \napp\n.\nrun\n(\nport\n=\n8080\n,\n \ndebug\n=\nTrue\n)\n\n\n\n\n\n\n\n\n\n\n\nSe acessarmos agora no navegador, vamos ver que nossa API j\u00e1 est\u00e1 pronta:\n\n\n\n\nhttp://localhost:8080/api/cliente\n, veremos que a API est\u00e1 funcionando:\n\n\n//\n \nhttp://localhost:\n8080\n/api/cliente\n\n\n{\n\n  \n\"num_results\"\n:\n \n0\n,\n\n  \n\"objects\"\n:\n \n[\n\n\n  \n],\n\n  \n\"page\"\n:\n \n1\n,\n\n  \n\"total_pages\"\n:\n \n0\n\n\n}\n\n\n\n\n\n\n\nObserva\u00e7\u00f5es\n\u00b6\n\n\nPor padr\u00e3o, o manager do flask-restless ir\u00e1 gerar o nome da rota em min\u00fasculo. O \nnome do model\n n\u00e3o pode usar \nUNDERSCORE\n, tem que usar a regra do camelo: \nGrupoUsuario\n e n\u00e3o \nGrupo_Usuario\n.\n\n\nTestes com Postman\n\u00b6\n\n\nCREATE: \nhttp://localhost:8080/api/cliente\n\n\nmethod\n:\n \nPOST\n\n\nHeaders\n:\n \nkey\n \n=\n \nContent\n-\nType\n \n|\n \nValue\n \n=\n \napplication\n/\njson\n\n\nurl\n:\n \nhttp\n:\n//\nlocalhost\n:\n8080\n/\napi\n/\ncliente\n\n\nraw\n\n\n{\n\n    \n\"nome\"\n:\n \n\"Junior\"\n,\n\n    \n\"dt_nascimento\"\n:\n \n\"1977-12-31 00:00:00\"\n,\n\n    \n\"cpf\"\n:\n \n\"12345678901\"\n,\n\n    \n\"email\"\n:\n \n\"farnetani@gmail.com\"\n\n\n}\n\n\n\nResult\n:\n\n\n\n{\n\n    \n\"cpf\"\n:\n \n\"12345678901\"\n,\n\n    \n\"dt_nascimento\"\n:\n \n\"1977-12-31T00:00:00\"\n,\n\n    \n\"email\"\n:\n \n\"farnetani@gmail.com\"\n,\n\n    \n\"id\"\n:\n \n1\n,\n\n    \n\"nome\"\n:\n \n\"Junior\"\n\n\n}\n\n\n\n\n\nGET: \nhttp://localhost:8080/api/cliente\n\n\nmethod\n:\n \nGET\n\n\nHeaders\n:\n \nkey\n \n=\n \nContent\n-\nType\n \n|\n \nValue\n \n=\n \napplication\n/\njson\n\n\nurl\n:\n \nhttp\n:\n//\nlocalhost\n:\n8080\n/\napi\n/\ncliente\n\n\n\nResult\n:\n\n\n\n{\n\n    \n\"num_results\"\n:\n \n1\n,\n\n    \n\"objects\"\n:\n \n[\n\n        \n{\n\n            \n\"cpf\"\n:\n \n\"12345678901\"\n,\n\n            \n\"dt_nascimento\"\n:\n \n\"1977-12-31T00:00:00\"\n,\n\n            \n\"email\"\n:\n \n\"farnetani@gmail.com\"\n,\n\n            \n\"id\"\n:\n \n1\n,\n\n            \n\"nome\"\n:\n \n\"Junior\"\n\n        \n}\n\n    \n],\n\n    \n\"page\"\n:\n \n1\n,\n\n    \n\"total_pages\"\n:\n \n1\n\n\n}\n\n\n\n\n\nCriando o model: endereco\n\u00b6\n\n\nendereco.py\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nfrom\n \napp\n \nimport\n \ndb\n\n\nfrom\n \napp\n \nimport\n \nmanager\n\n\n\nclass\n \nEndereco\n(\ndb\n.\nModel\n):\n\n    \nid\n \n=\n \ndb\n.\nColumn\n(\ndb\n.\nInteger\n,\n \nprimary_key\n=\nTrue\n)\n\n    \nlogradouro\n \n=\n \ndb\n.\nColumn\n(\ndb\n.\nString\n(\n100\n))\n\n    \nnumero\n \n=\n \ndb\n.\nColumn\n(\ndb\n.\nString\n(\n10\n))\n\n    \nbairro\n \n=\n \ndb\n.\nColumn\n(\ndb\n.\nString\n(\n50\n))\n\n\n\ndb\n.\ncreate_all\n()\n\n\nmanager\n.\ncreate_api\n(\nEndereco\n,\n \nmethods\n=\n[\n'POST'\n,\n'DELETE'\n,\n'PUT'\n,\n'GET'\n])\n\n\n\n\n\n\n\nReferenciando a chave no model: usuario\n\u00b6\n\n\nusuario.py\n\n\nendereco_id\n \n=\n \ndb\n.\nColumn\n(\ndb\n.\nInteger\n,\n \ndb\n.\nForeignKey\n(\n'endereco.id'\n))\n\n\nendereco\n \n=\n \ndb\n.\nrelationship\n(\n'Endereco'\n)\n\n\n\n\n\n\n\nTestando com o postman\n\u00b6\n\n\nmethod\n:\n \nPOST\n\n\nHeaders\n:\n \nkey\n \n=\n \nContent\n-\nType\n \n|\n \nValue\n \n=\n \napplication\n/\njson\n\n\nurl\n:\n \nhttp\n:\n//\nlocalhost\n:\n8080\n/\napi\n/\nendereco\n\n\nraw\n\n\n{\n\n    \n\"logradouro\"\n:\n \n\"Rua Jacintho Libanio\"\n,\n\n    \n\"numero\"\n:\n \n\"420\"\n,\n\n    \n\"bairro\"\n:\n \n\"Sao Carlos\"\n\n\n}\n\n\n\nResult\n:\n\n\n\n{\n\n    \n\"bairro\"\n:\n \n\"Sao Carlos\"\n,\n\n    \n\"id\"\n:\n \n1\n,\n\n    \n\"logradouro\"\n:\n \n\"Rua Jacintho Libanio\"\n,\n\n    \n\"numero\"\n:\n \n\"420\"\n\n\n}\n\n\n\n\n\nCriando um arquivo em PYTHON de exemplo pra testar as requisi\u00e7\u00f5es\n\u00b6\n\n\npipenv install requests\n\n\nexemplo-requisicao.py\n\n\nimport\n \nrequests\n\n\nimport\n \njson\n\n\n\nurl\n \n=\n \n'http://127.0.0.1:8080/api/cliente'\n\n\nheaders\n \n=\n \n{\n'Content-Type'\n:\n \n'application/json'\n}\n\n\n\nfilters\n \n=\n \n[\ndict\n(\nnome\n=\n'Sauro'\n,\n \nop\n=\n'like'\n,\n \nval\n=\n'%y%'\n)]\n\n\nparams\n \n=\n \ndict\n(\nq\n=\njson\n.\ndumps\n(\ndict\n(\nfilters\n=\nfilters\n)))\n\n\n\nresponse\n \n=\n \nrequests\n.\nget\n(\nurl\n,\n \nparams\n=\nparams\n,\n \nheaders\n=\nheaders\n)\n\n\nassert\n \nresponse\n.\nstatus_code\n \n==\n \n200\n\n\nprint\n(\nresponse\n.\njson\n())\n\n\n\n\n\nPara executar o teste:\n\n\n\n\nStart o servidor: \npython run.py\n\n\nExecute o arquivo acima de exemplo: \npython exemplo-requisicao.py\n\n   Voc\u00ea ver\u00e1 o resultado no console!\n\n\n\n\nLinks\n\u00b6\n\n\nhttp://flask-sqlalchemy.pocoo.org/2.3/quickstart/#a-minimal-application\n\n\nhttps://flask-restless.readthedocs.io/en/stable/customizing.html\n\n\nCursos recomendados:\n\u00b6\n\n\nhttps://www.udemy.com/crie-apis-rest-com-python/learn/v4/overview",
            "title": "API em Flask"
        },
        {
            "location": "/Flask/API em Flask/#api-em-flask",
            "text": "Data: 21/03/2018   Exemplo do Tutorial github:  https://github.com/farnetani/farnetani_python_api_flask",
            "title": "API em Flask"
        },
        {
            "location": "/Flask/API em Flask/#preparando-o-ambiente-python-36",
            "text": "",
            "title": "Preparando o Ambiente PYTHON (&gt;=3.6)"
        },
        {
            "location": "/Flask/API em Flask/#criando-diretorio-do-projeto",
            "text": "cd\\\nc:\\\nmkdir web-flask\ncd web-flask\nmkdir api-flask\ncd api-flask",
            "title": "Criando Diret\u00f3rio do Projeto"
        },
        {
            "location": "/Flask/API em Flask/#criando-o-virtual-env",
            "text": "python -m venv venv",
            "title": "Criando o Virtual Env"
        },
        {
            "location": "/Flask/API em Flask/#ativando-o-virtual-env",
            "text": "venv\\scripts\\activate",
            "title": "Ativando o Virtual Env"
        },
        {
            "location": "/Flask/API em Flask/#instalando-o-gerenciador-de-pacotes-pipenv-melhor-que-pip",
            "text": "pip install pipenv",
            "title": "Instalando o gerenciador de pacotes: pipenv (melhor que pip)"
        },
        {
            "location": "/Flask/API em Flask/#instalando-as-libs-que-usaremos",
            "text": "pipenv install flask # Dispensa coment\u00e1rios\npipenv install flask-sqlalchemy # Para gerenciar o banco de dados\npipenv install flask-restless # Para gerar o CRUD atrav\u00e9s de nossos models\npipenv install flask-login # Para gerar a autentica\u00e7\u00e3o",
            "title": "Instalando as libs que usaremos"
        },
        {
            "location": "/Flask/API em Flask/#criando-estrutura-do-projeto",
            "text": "Criar o arquivo run.py na raiz do projeto.  Criar a pasta app.  Criar as subpastas: models e routes em app.       app\\models\n    app\\routes   Criar em cada pasta o arquivo:  __init__.py  para determinar que cada pasta ser\u00e1 um m\u00f3dulo.       app\\models\\__init__.py\n    app\\routes\\__init__.py\n    app\\__init__.py\n    run.py",
            "title": "Criando Estrutura do Projeto"
        },
        {
            "location": "/Flask/API em Flask/#conteudo-dos-arquivos-de-cada-pasta",
            "text": "app/__init__.py  1\n2\n3 from   flask   import   Flask  app   =   Flask ( __name__ )    run.py  1\n2\n3\n4 from   app   import   app  if   __name__   ==   '__main__' : \n     app . run ( port = 8080 ,   debug = True )    app/routes/__init__.py  1\n2\n3\n4\n5 from   app   import   app  @app.route ( '/' )  def   index (): \n     return   \"Ol\u00e1 Mundo!\"    run.py  (Importar o m\u00f3dulo de rotas)  1\n2\n3\n4\n5\n6\n7 from   app   import   app  # Importando rotas  from   app.routes   import   *   if   __name__   ==   '__main__' : \n     app . run ( port = 8080 ,   debug = True )",
            "title": "Conte\u00fado dos arquivos de cada pasta:"
        },
        {
            "location": "/Flask/API em Flask/#configurando-o-banco-de-dados",
            "text": "Criar a pasta: database na raiz do projeto.  No arquivo  __init__.py  da pasta  app :   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 from   flask   import   Flask  from   flask_sqlalchemy   import   SQLAlchemy  app   =   Flask ( __name__ )   app . config [ 'SQLALCHEMY_DATABASE_URI' ]   =   'sqlite:///database/bancodedados.db'  db   =   SQLAlchemy ( app )   class   Usuario ( db . Model ):       id   =   db . Column ( db . Integer ,   primary_key = True )       nome   =   db . Column ( db . String ( 100 ))   db . create_all ()",
            "title": "Configurando o banco de dados"
        },
        {
            "location": "/Flask/API em Flask/#configurando-o-flask-restless",
            "text": "Importar o APIManager:  from flask_restless import APIManager \ne criar um manager (gerenciador):  manager = APIManager(app, flask_sqlalchemy_db=db)  Rescrever o arquivo  __init__.py   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 from   flask   import   Flask  from   flask_sqlalchemy   import   SQLAlchemy  from   flask_restless   import   APIManager   app   =   Flask ( __name__ )  app . config [ 'SQLALCHEMY_DATABASE_URI' ]   =   'sqlite:///database/storage.db'  db   =   SQLAlchemy ( app )   manager   =   APIManager ( app ,   flask_sqlalchemy_db = db )",
            "title": "Configurando o Flask-Restless"
        },
        {
            "location": "/Flask/API em Flask/#flask-restless",
            "text": "Cria todos os m\u00e9todos de CRUD.",
            "title": "Flask-Restless"
        },
        {
            "location": "/Flask/API em Flask/#iniciando-a-aplicacao",
            "text": "Criar o model:   usuario.py :   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 from   app   import   db  from   app   import   manager  class   Cliente ( db . Model ): \n     id   =   db . Column ( db . Integer ,   primary_key = True ) \n     nome   =   db . Column ( db . String ( 100 )) \n     dt_nascimento   =   db . Column ( db . DateTime ) \n     cpf   =   db . Column ( db . String ( 14 )) \n     email   =   db . Column ( db . String ( 100 ),   unique = True )  db . create_all ()  # Aqui acontece toda a m\u00e1gica. \u00c9 a linha respons\u00e1vel por criar os M\u00c9TODOS automaticamente pra n\u00f3s  manager . create_api ( Cliente ,   methods = [ 'POST' ,   'GET' ,   'PUT' ,   'DELETE' ])      Referenciar o model criado em:   __init__.py :   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 from   app   import   app  # Importando rotas  from   app.routes   import   *  # Importando models  from   app.models   import   usuario   if   __name__   ==   '__main__' : \n     app . run ( port = 8080 ,   debug = True )      Se acessarmos agora no navegador, vamos ver que nossa API j\u00e1 est\u00e1 pronta:   http://localhost:8080/api/cliente , veremos que a API est\u00e1 funcionando:  //   http://localhost: 8080 /api/cliente  { \n   \"num_results\" :   0 , \n   \"objects\" :   [ \n\n   ], \n   \"page\" :   1 , \n   \"total_pages\" :   0  }",
            "title": "Iniciando a aplica\u00e7\u00e3o"
        },
        {
            "location": "/Flask/API em Flask/#observacoes",
            "text": "Por padr\u00e3o, o manager do flask-restless ir\u00e1 gerar o nome da rota em min\u00fasculo. O  nome do model  n\u00e3o pode usar  UNDERSCORE , tem que usar a regra do camelo:  GrupoUsuario  e n\u00e3o  Grupo_Usuario .",
            "title": "Observa\u00e7\u00f5es"
        },
        {
            "location": "/Flask/API em Flask/#testes-com-postman",
            "text": "CREATE:  http://localhost:8080/api/cliente  method :   POST  Headers :   key   =   Content - Type   |   Value   =   application / json  url :   http : // localhost : 8080 / api / cliente  raw  { \n     \"nome\" :   \"Junior\" , \n     \"dt_nascimento\" :   \"1977-12-31 00:00:00\" , \n     \"cpf\" :   \"12345678901\" , \n     \"email\" :   \"farnetani@gmail.com\"  }  Result :  { \n     \"cpf\" :   \"12345678901\" , \n     \"dt_nascimento\" :   \"1977-12-31T00:00:00\" , \n     \"email\" :   \"farnetani@gmail.com\" , \n     \"id\" :   1 , \n     \"nome\" :   \"Junior\"  }   GET:  http://localhost:8080/api/cliente  method :   GET  Headers :   key   =   Content - Type   |   Value   =   application / json  url :   http : // localhost : 8080 / api / cliente  Result :  { \n     \"num_results\" :   1 , \n     \"objects\" :   [ \n         { \n             \"cpf\" :   \"12345678901\" , \n             \"dt_nascimento\" :   \"1977-12-31T00:00:00\" , \n             \"email\" :   \"farnetani@gmail.com\" , \n             \"id\" :   1 , \n             \"nome\" :   \"Junior\" \n         } \n     ], \n     \"page\" :   1 , \n     \"total_pages\" :   1  }",
            "title": "Testes com Postman"
        },
        {
            "location": "/Flask/API em Flask/#criando-o-model-endereco",
            "text": "endereco.py   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 from   app   import   db  from   app   import   manager  class   Endereco ( db . Model ): \n     id   =   db . Column ( db . Integer ,   primary_key = True ) \n     logradouro   =   db . Column ( db . String ( 100 )) \n     numero   =   db . Column ( db . String ( 10 )) \n     bairro   =   db . Column ( db . String ( 50 ))  db . create_all ()  manager . create_api ( Endereco ,   methods = [ 'POST' , 'DELETE' , 'PUT' , 'GET' ])",
            "title": "Criando o model: endereco"
        },
        {
            "location": "/Flask/API em Flask/#referenciando-a-chave-no-model-usuario",
            "text": "usuario.py  endereco_id   =   db . Column ( db . Integer ,   db . ForeignKey ( 'endereco.id' ))  endereco   =   db . relationship ( 'Endereco' )",
            "title": "Referenciando a chave no model: usuario"
        },
        {
            "location": "/Flask/API em Flask/#testando-com-o-postman",
            "text": "method :   POST  Headers :   key   =   Content - Type   |   Value   =   application / json  url :   http : // localhost : 8080 / api / endereco  raw  { \n     \"logradouro\" :   \"Rua Jacintho Libanio\" , \n     \"numero\" :   \"420\" , \n     \"bairro\" :   \"Sao Carlos\"  }  Result :  { \n     \"bairro\" :   \"Sao Carlos\" , \n     \"id\" :   1 , \n     \"logradouro\" :   \"Rua Jacintho Libanio\" , \n     \"numero\" :   \"420\"  }",
            "title": "Testando com o postman"
        },
        {
            "location": "/Flask/API em Flask/#criando-um-arquivo-em-python-de-exemplo-pra-testar-as-requisicoes",
            "text": "pipenv install requests  exemplo-requisicao.py  import   requests  import   json  url   =   'http://127.0.0.1:8080/api/cliente'  headers   =   { 'Content-Type' :   'application/json' }  filters   =   [ dict ( nome = 'Sauro' ,   op = 'like' ,   val = '%y%' )]  params   =   dict ( q = json . dumps ( dict ( filters = filters )))  response   =   requests . get ( url ,   params = params ,   headers = headers )  assert   response . status_code   ==   200  print ( response . json ())   Para executar o teste:   Start o servidor:  python run.py  Execute o arquivo acima de exemplo:  python exemplo-requisicao.py \n   Voc\u00ea ver\u00e1 o resultado no console!",
            "title": "Criando um arquivo em PYTHON de exemplo pra testar as requisi\u00e7\u00f5es"
        },
        {
            "location": "/Flask/API em Flask/#links",
            "text": "http://flask-sqlalchemy.pocoo.org/2.3/quickstart/#a-minimal-application  https://flask-restless.readthedocs.io/en/stable/customizing.html",
            "title": "Links"
        },
        {
            "location": "/Flask/API em Flask/#cursos-recomendados",
            "text": "https://www.udemy.com/crie-apis-rest-com-python/learn/v4/overview",
            "title": "Cursos recomendados:"
        },
        {
            "location": "/Javascript/",
            "text": "Javascript\n\u00b6",
            "title": "Javascript"
        },
        {
            "location": "/Javascript/#javascript",
            "text": "",
            "title": "Javascript"
        },
        {
            "location": "/Links-Top/",
            "text": "Links\n\u00b6\n\n\nDesenvolvimento\n\u00b6\n\n\nMkdocs + Material + Django + Senha\n\u00b6\n\n\nhttps://github.com/farnetani/django_material_mkdocs\n\n\ndjango_mkdocs\n\u00b6\n\n\nhttps://www.hacksoft.io/blog/integrating-a-password-protected-mkdocs-in-django/\n\n\nhttps://github.com/farnetani/django_mkdocs",
            "title": "Links"
        },
        {
            "location": "/Links-Top/#links",
            "text": "",
            "title": "Links"
        },
        {
            "location": "/Links-Top/#desenvolvimento",
            "text": "",
            "title": "Desenvolvimento"
        },
        {
            "location": "/Links-Top/#mkdocs-material-django-senha",
            "text": "https://github.com/farnetani/django_material_mkdocs",
            "title": "Mkdocs + Material + Django + Senha"
        },
        {
            "location": "/Links-Top/#django_mkdocs",
            "text": "https://www.hacksoft.io/blog/integrating-a-password-protected-mkdocs-in-django/  https://github.com/farnetani/django_mkdocs",
            "title": "django_mkdocs"
        },
        {
            "location": "/PHP/",
            "text": "PHP\n\u00b6",
            "title": "PHP"
        },
        {
            "location": "/PHP/#php",
            "text": "",
            "title": "PHP"
        },
        {
            "location": "/Python/",
            "text": "Python\n\u00b6",
            "title": "Python"
        },
        {
            "location": "/Python/#python",
            "text": "",
            "title": "Python"
        },
        {
            "location": "/Vuejs/Eslint/",
            "text": "Eslint e Extens\u00f5es para Visual Studio Code\n\u00b6\n\n\nctrl\n+\nalt\n+\nf\n \nno\n \nwindows\n\n\nctrl\n+\nshit\n+\np\n \ne\n \nselecionar\n \nESLint\n:\n \nFix\n \nall\n \nproblems\n\n\n\nPara\n \nevitar\n \nisso\n,\n \nativar\n \no\n \nautoFixOnSave\n\n\n\nIr\n \nem\n:\n \nFile\n>\nPreferences\n>\nSettings\n\n\n    \n\"eslint.autoFixOnSave\"\n:\n \ntrue\n,\n\n    \n\"javascript.format.insertSpaceBeforeFunctionParenthesis\"\n:\n \ntrue\n,\n\n    \n\"vetur.format.defaultFormatter.js\"\n:\n \n\"vscode-typescript\"\n,\n\n    \n\"vetur.format.defaultFormatter.html\"\n:\n \n\"js-beautify-html\"\n,\n\n    \n\"eslint.validate\"\n:\n \n[\n\n        \n\"javascript\"\n,\n\n        \n\"javascriptreact\"\n,\n\n        \n\"typescript\"\n,\n\n        \n{\n\n            \n\"language\"\n:\n \n\"vue\"\n,\n\n            \n\"autoFix\"\n:\n \ntrue\n\n        \n},\n\n        \n{\n\n            \n\"language\"\n:\n \n\"html\"\n,\n\n            \n\"autoFix\"\n:\n \ntrue\n\n        \n},\n\n        \n{\n\n            \n\"language\"\n:\n \n\"javascript\"\n,\n\n            \n\"autoFix\"\n:\n \ntrue\n\n        \n}\n\n    \n]\n\n\n\n\n\nFonte: \nhttp://www.vuejs-brasil.com.br/deixe-o-eslint-trabalhar-para-voce-no-visual-studio-code/\n\n\n```",
            "title": "Eslint e Extens\u00f5es para Visual Studio Code"
        },
        {
            "location": "/Vuejs/Eslint/#eslint-e-extensoes-para-visual-studio-code",
            "text": "ctrl + alt + f   no   windows  ctrl + shit + p   e   selecionar   ESLint :   Fix   all   problems  Para   evitar   isso ,   ativar   o   autoFixOnSave  Ir   em :   File > Preferences > Settings \n\n     \"eslint.autoFixOnSave\" :   true , \n     \"javascript.format.insertSpaceBeforeFunctionParenthesis\" :   true , \n     \"vetur.format.defaultFormatter.js\" :   \"vscode-typescript\" , \n     \"vetur.format.defaultFormatter.html\" :   \"js-beautify-html\" , \n     \"eslint.validate\" :   [ \n         \"javascript\" , \n         \"javascriptreact\" , \n         \"typescript\" , \n         { \n             \"language\" :   \"vue\" , \n             \"autoFix\" :   true \n         }, \n         { \n             \"language\" :   \"html\" , \n             \"autoFix\" :   true \n         }, \n         { \n             \"language\" :   \"javascript\" , \n             \"autoFix\" :   true \n         } \n     ]   Fonte:  http://www.vuejs-brasil.com.br/deixe-o-eslint-trabalhar-para-voce-no-visual-studio-code/  ```",
            "title": "Eslint e Extens\u00f5es para Visual Studio Code"
        },
        {
            "location": "/Vuejs/",
            "text": "Vuejs\n\u00b6",
            "title": "Vuejs"
        },
        {
            "location": "/Vuejs/#vuejs",
            "text": "",
            "title": "Vuejs"
        },
        {
            "location": "/wgalleti.github.io/desenvolvimento/angular/",
            "text": "Dicas de Angular\n\u00b6\n\n\nTradu\u00e7\u00e3o (usando angular-i18n)\n\u00b6\n\n\nnpm install angular-i18n --save\n\n\nEdite o arquivo \napp.module.ts\n\n\nimport\n \n{\n \nLOCALE_ID\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\n\nproviders\n:\n \n[\n\n    \n...\n\n    \n{\nprovide\n: \nLOCALE_ID\n,\n \nuseValue\n:\n \n'pt-br'\n},\n\n    \n...\n\n\n]\n\n\n\n\n\nLodash\n\u00b6\n\n\nnpm i -S lodash\n\n\nnpm install @types/lodash --save-dev --save-exact\n\n\nimport\n \n_\n \nfrom\n \n'lodash'\n;\n \n\n\n_\n.\nalgumacoisa\n();",
            "title": "Dicas de Angular"
        },
        {
            "location": "/wgalleti.github.io/desenvolvimento/angular/#dicas-de-angular",
            "text": "",
            "title": "Dicas de Angular"
        },
        {
            "location": "/wgalleti.github.io/desenvolvimento/angular/#traducao-usando-angular-i18n",
            "text": "npm install angular-i18n --save  Edite o arquivo  app.module.ts  import   {   LOCALE_ID   }   from   '@angular/core' ;  providers :   [ \n     ... \n     { provide :  LOCALE_ID ,   useValue :   'pt-br' }, \n     ...  ]",
            "title": "Tradu\u00e7\u00e3o (usando angular-i18n)"
        },
        {
            "location": "/wgalleti.github.io/desenvolvimento/angular/#lodash",
            "text": "npm i -S lodash  npm install @types/lodash --save-dev --save-exact  import   _   from   'lodash' ;   _ . algumacoisa ();",
            "title": "Lodash"
        },
        {
            "location": "/wgalleti.github.io/desenvolvimento/angularjs/snippets_sublime/",
            "text": "",
            "title": "Snippets sublime"
        },
        {
            "location": "/wgalleti.github.io/desenvolvimento/angularjs/snippets_vscode/",
            "text": "",
            "title": "Snippets vscode"
        },
        {
            "location": "/wgalleti.github.io/desenvolvimento/angularjs/ui_router/",
            "text": "",
            "title": "Ui router"
        },
        {
            "location": "/wgalleti.github.io/desenvolvimento/javascript/arrays/",
            "text": "Dicas uteis para manipula\u00e7\u00e3o de arrays\n\u00b6\n\n\nDistinct\n\u00b6\n\n\nconstant\n \ndata\n \n=\n \n[{\n\n        \n\"COD_EMPR\"\n:\n \n2\n,\n\n        \n\"UNIDADE\"\n:\n \n\"Rafaela\"\n,\n\n        \n\"DATA\"\n:\n \n\"2017-08-13\"\n,\n\n        \n\"QTD_FARDOS\"\n:\n \n258\n,\n\n        \n\"PESO_FARDOS\"\n:\n \n53859.54\n\n    \n},{\n\n        \n\"COD_EMPR\"\n:\n \n5\n,\n\n        \n\"UNIDADE\"\n:\n \n\"Tres Lagoas\"\n,\n\n        \n\"DATA\"\n:\n \n\"2017-08-13\"\n,\n\n        \n\"QTD_FARDOS\"\n:\n \n659\n,\n\n        \n\"PESO_FARDOS\"\n:\n \n149127.67\n\n    \n},{\n\n        \n\"COD_EMPR\"\n:\n \n2\n,\n\n        \n\"UNIDADE\"\n:\n \n\"Rafaela\"\n,\n\n        \n\"DATA\"\n:\n \n\"2017-08-14\"\n,\n\n        \n\"QTD_FARDOS\"\n:\n \n460\n,\n\n        \n\"PESO_FARDOS\"\n:\n \n99821.9\n\n    \n},{\n\n        \n\"COD_EMPR\"\n:\n \n5\n,\n\n        \n\"UNIDADE\"\n:\n \n\"Tres Lagoas\"\n,\n\n        \n\"DATA\"\n:\n \n\"2017-08-14\"\n,\n\n        \n\"QTD_FARDOS\"\n:\n \n848\n,\n\n        \n\"PESO_FARDOS\"\n:\n \n191857.24\n\n\n}];\n\n\n\nconst\n \nunidades\n \n=\n \ndata\n.\nmap\n(\nitem\n \n=>\n \n{\n\n    \nreturn\n \nitem\n.\nUNIDADE\n;\n\n\n}).\nfilter\n((\nv\n,\n \ni\n,\n \na\n)\n \n=>\n \na\n.\nindexOf\n(\nv\n)\n \n===\n \ni\n);",
            "title": "Dicas uteis para manipula\u00e7\u00e3o de arrays"
        },
        {
            "location": "/wgalleti.github.io/desenvolvimento/javascript/arrays/#dicas-uteis-para-manipulacao-de-arrays",
            "text": "",
            "title": "Dicas uteis para manipula\u00e7\u00e3o de arrays"
        },
        {
            "location": "/wgalleti.github.io/desenvolvimento/javascript/arrays/#distinct",
            "text": "constant   data   =   [{ \n         \"COD_EMPR\" :   2 , \n         \"UNIDADE\" :   \"Rafaela\" , \n         \"DATA\" :   \"2017-08-13\" , \n         \"QTD_FARDOS\" :   258 , \n         \"PESO_FARDOS\" :   53859.54 \n     },{ \n         \"COD_EMPR\" :   5 , \n         \"UNIDADE\" :   \"Tres Lagoas\" , \n         \"DATA\" :   \"2017-08-13\" , \n         \"QTD_FARDOS\" :   659 , \n         \"PESO_FARDOS\" :   149127.67 \n     },{ \n         \"COD_EMPR\" :   2 , \n         \"UNIDADE\" :   \"Rafaela\" , \n         \"DATA\" :   \"2017-08-14\" , \n         \"QTD_FARDOS\" :   460 , \n         \"PESO_FARDOS\" :   99821.9 \n     },{ \n         \"COD_EMPR\" :   5 , \n         \"UNIDADE\" :   \"Tres Lagoas\" , \n         \"DATA\" :   \"2017-08-14\" , \n         \"QTD_FARDOS\" :   848 , \n         \"PESO_FARDOS\" :   191857.24  }];  const   unidades   =   data . map ( item   =>   { \n     return   item . UNIDADE ;  }). filter (( v ,   i ,   a )   =>   a . indexOf ( v )   ===   i );",
            "title": "Distinct"
        },
        {
            "location": "/wgalleti.github.io/desenvolvimento/javascriptvue/telerik/samples/",
            "text": "Exemplos de Uso\n\u00b6\n\n\nCustomizar coluna\n\u00b6\n\n\nExiste casos onde precisamos adicionar templates a uma coluna. No caso do kendo-grid, vamos usar o atributo \ntemplate\n do kendo-column.\n\n\nOBS:\n Estou usando o vuetify\n\n\nExemplo:\n\n\n\n\nC\u00f3digo:\n\n\n<\ntemplate\n>\n\n    \n<\nkendo\n-\ngrid\n \n:\ndata\n-\nsource\n=\n\"dataSource\"\n\n                \n:\npageable\n=\n\"false\"\n\n                \n:\nsortable\n=\n\"true\"\n\n                \nref\n=\n\"grid\"\n>\n\n        \n<\nkendo\n-\ngrid\n-\ncolumn\n \nfield\n=\n\"status_display\"\n\n                            \ntitle\n=\n\"Status\"\n\n                            \n:\nwidth\n=\n\"120\"\n\n\n                            \n:\ntemplate\n=\n\"status_display_template\"\n><\n/kendo-grid-column>\n\n\n        \n<\nkendo\n-\ngrid\n-\ncolumn\n \nfield\n=\n\"descricao\"\n\n                            \ntitle\n=\n\"Anota\u00e7\u00e3o\"\n><\n/kendo-grid-column>\n\n    \n<\n/kendo-grid>\n\n\n<\n/template>\n\n\n\n<\nscript\n>\n\n\nexport\n \ndefault\n \n{\n\n  \ncomputed\n:\n \n{\n\n    \ndataSource\n \n()\n \n{\n\n      \nreturn\n \nnew\n \nkendo\n.\ndata\n.\nDataSource\n({\n\n        \ntransport\n:\n \n{\n\n          \nread\n:\n \n{\n\n            \nurl\n:\n \n'minhaapi'\n\n          \n}\n\n        \n}\n\n      \n})\n\n    \n},\n\n\n    \nstatus_display_template\n \n()\n \n{\n\n\n      \nreturn\n \n`<div class=\"chip #= status_display === 'Pendente' ? 'red' : 'green' # white--text\"><span class=\"chip__content\">#= status_display #</span></div>`\n\n\n    \n}\n\n\n  \n}\n\n\n}\n\n\n<\n/script>\n\n\n\n\n\nIcones em comandos\n\u00b6\n\n\nExemplo:\n\n\n\n\nC\u00f3digo:\n\n\n<\ntemplate\n>\n\n    \n<\nkendo\n-\ngrid\n \n:\ndata\n-\nsource\n=\n\"dataSource\"\n\n                \n:\npageable\n=\n\"false\"\n\n                \n:\nsortable\n=\n\"true\"\n\n                \nv\n-\non\n:\ndatabound\n=\n\"gridBound\"\n\n                \nref\n=\n\"grid\"\n>\n\n        \n<\nkendo\n-\ngrid\n-\ncolumn\n \nfield\n=\n\"status_display\"\n\n                            \ntitle\n=\n\"Status\"\n\n                            \n:\nwidth\n=\n\"120\"\n\n                            \n:\ntemplate\n=\n\"status_display_template\"\n><\n/kendo-grid-column>\n\n        \n<\nkendo\n-\ngrid\n-\ncolumn\n \nfield\n=\n\"descricao\"\n\n                            \ntitle\n=\n\"Anota\u00e7\u00e3o\"\n><\n/kendo-grid-column>\n\n\n        \n<\nkendo\n-\ngrid\n-\ncolumn\n \n:\ncommand\n=\n\"resolverCmd\"\n \n:\nwidth\n=\n\"70\"\n><\n/kendo-grid-column>\n\n\n        \n<\nkendo\n-\ngrid\n-\ncolumn\n \n:\ncommand\n=\n\"cancelarCmd\"\n \n:\nwidth\n=\n\"70\"\n><\n/kendo-grid-column>\n\n\n    \n<\n/kendo-grid>\n\n\n<\n/template>\n\n\n\n<\nscript\n>\n\n\nexport\n \ndefault\n \n{\n\n  \ncomputed\n:\n \n{\n\n    \ncancelarCmd\n \n()\n \n{\n\n\n      \nreturn\n \n{\n\n\n        \nname\n:\n \n'cancelar'\n,\n\n\n        \ntext\n:\n \n' '\n,\n\n\n        \nclassName\n:\n \n'k-button-icon'\n,\n\n\n        \nclick\n \n(\ne\n)\n \n{\n\n\n          \ne\n.\npreventDefault\n()\n\n\n          \nconsole\n.\nlog\n(\ne\n)\n\n\n        \n}\n\n\n      \n}\n\n\n    \n},\n\n\n    \nresolverCmd\n \n()\n \n{\n\n\n      \nreturn\n \n{\n\n\n        \nname\n:\n \n'resolver'\n,\n\n\n        \ntext\n:\n \n' '\n,\n\n\n        \nclassName\n:\n \n'k-button-icon'\n,\n\n\n        \nclick\n \n(\ne\n)\n \n{\n\n\n          \ne\n.\npreventDefault\n()\n\n\n          \nconsole\n.\nlog\n(\ne\n)\n\n\n        \n}\n\n      \n}\n\n    \n},\n      \n    \ndataSource\n \n()\n \n{\n\n      \nreturn\n \nnew\n \nkendo\n.\ndata\n.\nDataSource\n({\n\n        \ntransport\n:\n \n{\n\n          \nread\n:\n \n{\n\n            \nurl\n:\n \n'minhaapi'\n\n          \n}\n\n        \n}\n\n      \n})\n\n    \n},\n\n    \nstatus_display_template\n \n()\n \n{\n\n      \nreturn\n \n`<div class=\"chip #= status_display === 'Pendente' ? 'red' : 'green' # white--text\"><span class=\"chip__content\">#= status_display #</span></div>`\n\n    \n}\n\n  \n},\n\n  \nmethods\n:\n \n{\n\n\n    \ngridBound\n \n(\ne\n)\n \n{\n\n\n      \n$\n(\n'.k-grid-resolver'\n).\naddClass\n(\n'k-icon'\n).\naddClass\n(\n' k-i-check'\n)\n\n\n      \n$\n(\n'.k-grid-cancelar'\n).\naddClass\n(\n'k-icon'\n).\naddClass\n(\n' k-i-close-outline'\n)\n\n\n    \n}\n\n\n  \n}\n\n\n}\n\n\n<\n/script>",
            "title": "Exemplos de Uso"
        },
        {
            "location": "/wgalleti.github.io/desenvolvimento/javascriptvue/telerik/samples/#exemplos-de-uso",
            "text": "",
            "title": "Exemplos de Uso"
        },
        {
            "location": "/wgalleti.github.io/desenvolvimento/javascriptvue/telerik/samples/#customizar-coluna",
            "text": "Existe casos onde precisamos adicionar templates a uma coluna. No caso do kendo-grid, vamos usar o atributo  template  do kendo-column.  OBS:  Estou usando o vuetify  Exemplo:   C\u00f3digo:  < template > \n     < kendo - grid   : data - source = \"dataSource\" \n                 : pageable = \"false\" \n                 : sortable = \"true\" \n                 ref = \"grid\" > \n         < kendo - grid - column   field = \"status_display\" \n                             title = \"Status\" \n                             : width = \"120\"                               : template = \"status_display_template\" >< /kendo-grid-column>           < kendo - grid - column   field = \"descricao\" \n                             title = \"Anota\u00e7\u00e3o\" >< /kendo-grid-column> \n     < /kendo-grid>  < /template>  < script >  export   default   { \n   computed :   { \n     dataSource   ()   { \n       return   new   kendo . data . DataSource ({ \n         transport :   { \n           read :   { \n             url :   'minhaapi' \n           } \n         } \n       }) \n     },       status_display_template   ()   {         return   `<div class=\"chip #= status_display === 'Pendente' ? 'red' : 'green' # white--text\"><span class=\"chip__content\">#= status_display #</span></div>`       }     }  }  < /script>",
            "title": "Customizar coluna"
        },
        {
            "location": "/wgalleti.github.io/desenvolvimento/javascriptvue/telerik/samples/#icones-em-comandos",
            "text": "Exemplo:   C\u00f3digo:  < template > \n     < kendo - grid   : data - source = \"dataSource\" \n                 : pageable = \"false\" \n                 : sortable = \"true\" \n                 v - on : databound = \"gridBound\" \n                 ref = \"grid\" > \n         < kendo - grid - column   field = \"status_display\" \n                             title = \"Status\" \n                             : width = \"120\" \n                             : template = \"status_display_template\" >< /kendo-grid-column> \n         < kendo - grid - column   field = \"descricao\" \n                             title = \"Anota\u00e7\u00e3o\" >< /kendo-grid-column>           < kendo - grid - column   : command = \"resolverCmd\"   : width = \"70\" >< /kendo-grid-column>           < kendo - grid - column   : command = \"cancelarCmd\"   : width = \"70\" >< /kendo-grid-column>       < /kendo-grid>  < /template>  < script >  export   default   { \n   computed :   { \n     cancelarCmd   ()   {         return   {           name :   'cancelar' ,           text :   ' ' ,           className :   'k-button-icon' ,           click   ( e )   {             e . preventDefault ()             console . log ( e )           }         }       },       resolverCmd   ()   {         return   {           name :   'resolver' ,           text :   ' ' ,           className :   'k-button-icon' ,           click   ( e )   {             e . preventDefault ()             console . log ( e )           } \n       } \n     },       \n     dataSource   ()   { \n       return   new   kendo . data . DataSource ({ \n         transport :   { \n           read :   { \n             url :   'minhaapi' \n           } \n         } \n       }) \n     }, \n     status_display_template   ()   { \n       return   `<div class=\"chip #= status_display === 'Pendente' ? 'red' : 'green' # white--text\"><span class=\"chip__content\">#= status_display #</span></div>` \n     } \n   }, \n   methods :   {       gridBound   ( e )   {         $ ( '.k-grid-resolver' ). addClass ( 'k-icon' ). addClass ( ' k-i-check' )         $ ( '.k-grid-cancelar' ). addClass ( 'k-icon' ). addClass ( ' k-i-close-outline' )       }     }  }  < /script>",
            "title": "Icones em comandos"
        },
        {
            "location": "/wgalleti.github.io/desenvolvimento/javascriptvue/telerik/startproject/",
            "text": "Criar projeto usando VueCli + Telerik KendoUI\n\u00b6\n\n\nGlobais\n\u00b6\n\n\nInstale o \nvue-cli\n e o \nyarn\n\n\nnpm i -g vue-cli yarn\n\n\n\n\nCriando o projeto\n\u00b6\n\n\nvue init webpack telerikDemo\n\n? Project name telerikdemo\n? Project description Demo de utiliza\u00e7\u00e3o \ndo\n KendoUI com vuejs\n? Author William Galleti <william.galleti@gmail.com>\n? Vue build standalone\n? Install vue-router? Yes\n? Use ESLint to lint your code? Yes\n? Pick an ESLint preset Standard\n? Set up unit tests No\n? Setup e2e tests with Nightwatch? No\n? Should we run \n`\nnpm install\n`\n \nfor\n you after the project has been created? \n(\nrecommended\n)\n no\n\n   vue-cli \u00b7 Generated \n\"telerikDemo\"\n.\n\n\n# Project initialization finished!\n\n\n# ========================\n\n\nTo get started:\n\n  \ncd\n telerikDemo\n  npm install \n(\nor \nif\n using yarn: yarn\n)\n\n  npm run lint -- --fix \n(\nor \nfor\n yarn: yarn run lint --fix\n)\n\n  npm run dev\n\nDocumentation can be found at https://vuejs-templates.github.io/webpack\n\n\n\n\nRode a instala\u00e7\u00e3o das depend\u00eancias:\n\n\nyarn install\n\n\n\n\nAntes de continuar, vamos efetuar algumas mudan\u00e7as na estrutura do \nwebpack\n e do \neslint\n para podermos utilizar o jquery e o kendoui.\n\n\nEntre na pasta do projeto \ncd telerikDemo\n\nAcesse o arquivo \nbuild/webpack.dev.conf.js\n e \nbuild/webpack.prod.conf.js\n e adicione no array \nplugins\n o seguinte objeto:\n\n\nconst\n \ndevWebpackConfig\n \n=\n \nmerge\n(\nbaseWebpackConfig\n,\n \n{\n\n  \n...\n\n\n  \nplugins\n:\n \n[\n\n\n    \nnew\n \nwebpack\n.\nProvidePlugin\n({\n\n\n      \njQuery\n:\n \n'jquery'\n,\n\n\n      \n$\n:\n \n'jquery'\n,\n\n\n      \njquery\n:\n \n'jquery'\n\n\n    \n})\n\n\n  \n],\n\n\n  \n...\n\n\n\n\n\nAgora, acesse o arquivo \n.eslintrc.js\n e adicione o jquery no atributo \nenv\n e crie o atributo \nglobals\n adicionando o atributo \nkendo\n \n\n\nmodule\n.\nexports\n \n=\n \n{\n\n  \n...\n\n  \nenv\n:\n \n{\n\n    \nbrowser\n:\n \ntrue\n,\n\n\n    \njquery\n:\n \ntrue\n\n\n  \n},\n\n\n  \nglobals\n:\n \n{\n\n\n    \nkendo\n:\n \nfalse\n\n\n  \n},\n\n\n  \n...\n\n\n}\n\n\n\n\n\nFeito isso finalizamos a parte de setup do webpack e eslint, agora vamos para as instala\u00e7\u00f5es e configura\u00e7\u00f5es\n\n\nInstalando as dependencias e configurando\n\u00b6\n\n\n\n\njquery\n\n\nkendo-ui\n\n\nkendo-theme-default\n\n\nkendo-theme-material\n\n\nkendo-datasource-vue-wrapper\n\n\nkendo-grid-vue-wrapper\n\n\n\n\nyarn add jquery @progress/kendo-ui, @progress/kendo-theme-default @progress/kendo-theme-material @progress/kendo-datasource-vue-wrapper @progress/kendo-grid-vue-wrapper \n\n\n\n\nFeito isso, vamos criar uma pasta \nsrc/plugins\n e dentro dela, criar o arquivo \nkendo.js\n\n\nNele vamos adicionar as importa\u00e7\u00f5es e inicializa\u00e7\u00e3o do kendo no vue\n\n\nimport\n \nVue\n \nfrom\n \n'vue'\n\n\nimport\n \n'@progress/kendo-ui'\n\n\nimport\n \n'@progress/kendo-theme-default/dist/all.css'\n\n\nimport\n \n'@progress/kendo-theme-material/dist/all.css'\n\n\nimport\n \n{\n \nKendoDataSource\n,\n \nKendoDataSourceInstaller\n \n}\n \nfrom\n \n'@progress/kendo-datasource-vue-wrapper'\n\n\nimport\n \n{\n \nKendoGrid\n,\n \nKendoGridInstaller\n \n}\n \nfrom\n \n'@progress/kendo-grid-vue-wrapper'\n\n\n\nVue\n.\nuse\n(\nKendoDataSourceInstaller\n)\n\n\nVue\n.\nuse\n(\nKendoGridInstaller\n)\n\n\n\nVue\n.\ncomponent\n(\nKendoDataSource\n)\n\n\nVue\n.\ncomponent\n(\nKendoGrid\n)\n\n\n\n\n\nAgora no nosso \nsrc/main.js\n, vamos importar nosso \nkendo.js\n\n\nimport\n \nVue\n \nfrom\n \n'vue'\n\n\nimport\n \nApp\n \nfrom\n \n'./App'\n\n\nimport\n \nrouter\n \nfrom\n \n'./router'\n\n\nimport\n \n'@/plugins/kendo'\n\n\n\n\nVue\n.\nconfig\n.\nproductionTip\n \n=\n \nfalse\n\n\n\n/* eslint-disable no-new */\n\n\nnew\n \nVue\n({\n\n  \nel\n:\n \n'#app'\n,\n\n  \nrouter\n,\n\n  \ncomponents\n:\n \n{\n \nApp\n \n},\n\n  \ntemplate\n:\n \n'<App/>'\n\n\n})\n\n\n\n\n\nInternacionaliza\u00e7\u00e3o\n\u00b6\n\n\nPara traduzir para \npt-br\n, edite o arquivo \nsrc/plugins/kendo.js\n e importar o cultures referente ao idioma e definir na v\u00e1riavel \nkendo.culture\n o idioma.\n\n\nimport\n \nVue\n \nfrom\n \n'vue'\n\n\nimport\n \n'@progress/kendo-ui'\n\n\nimport\n \n'@progress/kendo-theme-default/dist/all.css'\n\n\nimport\n \n'@progress/kendo-theme-material/dist/all.css'\n\n\nimport\n \n'@progress/kendo-ui/js/cultures/kendo.culture.pt-BR'\n\n\nimport\n \n{\n \nKendoDataSource\n,\n \nKendoDataSourceInstaller\n \n}\n \nfrom\n \n'@progress/kendo-datasource-vue-wrapper'\n\n\nimport\n \n{\n \nKendoGrid\n,\n \nKendoGridInstaller\n \n}\n \nfrom\n \n'@progress/kendo-grid-vue-wrapper'\n\n\n\nkendo\n.\nculture\n(\n'pt-BR'\n)\n\n\n\n\nVue\n.\nuse\n(\nKendoDataSourceInstaller\n)\n\n\nVue\n.\nuse\n(\nKendoGridInstaller\n)\n\n\n\nVue\n.\ncomponent\n(\nKendoDataSource\n)\n\n\nVue\n.\ncomponent\n(\nKendoGrid\n)",
            "title": "Startproject"
        },
        {
            "location": "/wgalleti.github.io/desenvolvimento/javascriptvue/telerik/startproject/#criar-projeto-usando-vuecli-telerik-kendoui",
            "text": "",
            "title": "Criar projeto usando VueCli + Telerik KendoUI"
        },
        {
            "location": "/wgalleti.github.io/desenvolvimento/javascriptvue/telerik/startproject/#globais",
            "text": "Instale o  vue-cli  e o  yarn  npm i -g vue-cli yarn",
            "title": "Globais"
        },
        {
            "location": "/wgalleti.github.io/desenvolvimento/javascriptvue/telerik/startproject/#criando-o-projeto",
            "text": "vue init webpack telerikDemo\n\n? Project name telerikdemo\n? Project description Demo de utiliza\u00e7\u00e3o  do  KendoUI com vuejs\n? Author William Galleti <william.galleti@gmail.com>\n? Vue build standalone\n? Install vue-router? Yes\n? Use ESLint to lint your code? Yes\n? Pick an ESLint preset Standard\n? Set up unit tests No\n? Setup e2e tests with Nightwatch? No\n? Should we run  ` npm install `   for  you after the project has been created?  ( recommended )  no\n\n   vue-cli \u00b7 Generated  \"telerikDemo\" . # Project initialization finished!  # ======================== \n\nTo get started:\n\n   cd  telerikDemo\n  npm install  ( or  if  using yarn: yarn ) \n  npm run lint -- --fix  ( or  for  yarn: yarn run lint --fix ) \n  npm run dev\n\nDocumentation can be found at https://vuejs-templates.github.io/webpack  Rode a instala\u00e7\u00e3o das depend\u00eancias:  yarn install  Antes de continuar, vamos efetuar algumas mudan\u00e7as na estrutura do  webpack  e do  eslint  para podermos utilizar o jquery e o kendoui.  Entre na pasta do projeto  cd telerikDemo \nAcesse o arquivo  build/webpack.dev.conf.js  e  build/webpack.prod.conf.js  e adicione no array  plugins  o seguinte objeto:  const   devWebpackConfig   =   merge ( baseWebpackConfig ,   { \n   ...     plugins :   [       new   webpack . ProvidePlugin ({         jQuery :   'jquery' ,         $ :   'jquery' ,         jquery :   'jquery'       })     ],     ...   Agora, acesse o arquivo  .eslintrc.js  e adicione o jquery no atributo  env  e crie o atributo  globals  adicionando o atributo  kendo    module . exports   =   { \n   ... \n   env :   { \n     browser :   true ,       jquery :   true     },     globals :   {       kendo :   false     },     ...  }   Feito isso finalizamos a parte de setup do webpack e eslint, agora vamos para as instala\u00e7\u00f5es e configura\u00e7\u00f5es",
            "title": "Criando o projeto"
        },
        {
            "location": "/wgalleti.github.io/desenvolvimento/javascriptvue/telerik/startproject/#instalando-as-dependencias-e-configurando",
            "text": "jquery  kendo-ui  kendo-theme-default  kendo-theme-material  kendo-datasource-vue-wrapper  kendo-grid-vue-wrapper   yarn add jquery @progress/kendo-ui, @progress/kendo-theme-default @progress/kendo-theme-material @progress/kendo-datasource-vue-wrapper @progress/kendo-grid-vue-wrapper   Feito isso, vamos criar uma pasta  src/plugins  e dentro dela, criar o arquivo  kendo.js  Nele vamos adicionar as importa\u00e7\u00f5es e inicializa\u00e7\u00e3o do kendo no vue  import   Vue   from   'vue'  import   '@progress/kendo-ui'  import   '@progress/kendo-theme-default/dist/all.css'  import   '@progress/kendo-theme-material/dist/all.css'  import   {   KendoDataSource ,   KendoDataSourceInstaller   }   from   '@progress/kendo-datasource-vue-wrapper'  import   {   KendoGrid ,   KendoGridInstaller   }   from   '@progress/kendo-grid-vue-wrapper'  Vue . use ( KendoDataSourceInstaller )  Vue . use ( KendoGridInstaller )  Vue . component ( KendoDataSource )  Vue . component ( KendoGrid )   Agora no nosso  src/main.js , vamos importar nosso  kendo.js  import   Vue   from   'vue'  import   App   from   './App'  import   router   from   './router'  import   '@/plugins/kendo'   Vue . config . productionTip   =   false  /* eslint-disable no-new */  new   Vue ({ \n   el :   '#app' , \n   router , \n   components :   {   App   }, \n   template :   '<App/>'  })",
            "title": "Instalando as dependencias e configurando"
        },
        {
            "location": "/wgalleti.github.io/desenvolvimento/javascriptvue/telerik/startproject/#internacionalizacao",
            "text": "Para traduzir para  pt-br , edite o arquivo  src/plugins/kendo.js  e importar o cultures referente ao idioma e definir na v\u00e1riavel  kendo.culture  o idioma.  import   Vue   from   'vue'  import   '@progress/kendo-ui'  import   '@progress/kendo-theme-default/dist/all.css'  import   '@progress/kendo-theme-material/dist/all.css'  import   '@progress/kendo-ui/js/cultures/kendo.culture.pt-BR'  import   {   KendoDataSource ,   KendoDataSourceInstaller   }   from   '@progress/kendo-datasource-vue-wrapper'  import   {   KendoGrid ,   KendoGridInstaller   }   from   '@progress/kendo-grid-vue-wrapper'  kendo . culture ( 'pt-BR' )   Vue . use ( KendoDataSourceInstaller )  Vue . use ( KendoGridInstaller )  Vue . component ( KendoDataSource )  Vue . component ( KendoGrid )",
            "title": "Internacionaliza\u00e7\u00e3o"
        },
        {
            "location": "/wgalleti.github.io/desenvolvimento/oracle/backup/",
            "text": "",
            "title": "Backup"
        },
        {
            "location": "/wgalleti.github.io/desenvolvimento/oracle/connect/",
            "text": "",
            "title": "Connect"
        },
        {
            "location": "/wgalleti.github.io/desenvolvimento/oracle/import/",
            "text": "",
            "title": "Import"
        },
        {
            "location": "/wgalleti.github.io/desenvolvimento/pythondjango/heroku/",
            "text": "Criando Projeto django e enviando para o HEROKU\n\u00b6\n\n\nVamos criar um projeto simples para ser utilizado com o heroku.\n\n\nPrepara\u00e7\u00e3o do ambiente\n\u00b6\n\n\n\n\nNote\n\n\nUtilizando python 3.6.2\n\n\n\n\n\n\nCrie o diretorio para o projeto e entre no mesmo \nmkdir %nomeprojeto & cd $_\n\n\nCriar o ambiente virtual \npython -m venv .venv\n\n\nAtivar ambiente \nsource .venv/bin/activate\n\n\nInstalar dependencias \npip install django dj-database-url dj-static python-decouple gunicorn psycopg2\n\n\n\n\nDetalhando as depend\u00eancias\n\u00b6\n\n\n\n\ndjango: MAGIC\n\n\ndj-database-url: M\u00f3dulo para converter url em dicionario de conex\u00e3o\n\n\ndj-static: M\u00f3dulo para servir arquivos est\u00e1ticos\n\n\npython-decouple: M\u00f3dulo que ajuda na parte de segura\u00e7a da aplica\u00e7\u00e3o (utilizar parametros via arquivo .env)\n\n\ngunicorn: Servidor web\n\n\npsycopg2: M\u00f3dulo de acesso ao postgres\n\n\n\n\nInicando o projeto\n\u00b6\n\n\nAp\u00f3s o ambiente preparado, vamos iniciar o projeto.\n\nPrimeiro, vamos salvar os m\u00f3dulos que nosso projeto necessita:\n\n\npip freeze > requirements.txt\n\n\nAp\u00f3s isso, vamos criar nosso projeto:\n\n\ndjango-admin startproject %nomeprojeto .\n\n\n\n\nNote\n\n\nUtilizo o ponto para n\u00e3o criar subpasta no projeto!!!\n\n\n\n\nConfigura\u00e7\u00f5es do Projeto:\n\u00b6\n\n\nPrimeiro, vamos ao arquivo \nsettings.py\n. Nele, iremos informar as chaves do projeto, conex\u00e3o de banco de dados, caminhos, etc.\n\n\nPara aumentar a seguran\u00e7a, e remover desse arquivo dados de senha e chave, vamos utilizar o python-decouple.\n\nPara isso vamos criar o arquivo \n.env\n na raiz do projeto.\n\n\nNele vamos informar os seguintes itens:\n\n\nSECRET_KEY=***********************************(Copiar do seu settings.py)\nDEBUG=True\n\n\n\n\nAgora dentro do nosso \nsetting.py\n, vamos efetuar os imports do decouple e dj-database-url, logo ap\u00f3s o \nimport os\n:\n\n\nfrom\n \ndecouple\n \nimport\n \nconfig\n\n\nfrom\n \ndj_database_url\n \nimport\n \nparse\n \nas\n \ndburl\n\n\n\n\n\nAgora vamos configurar nosso \nSECRET_KEY\n e \nDEBUG\n para buscar as informa\u00e7\u00f5es do arquivo \n.env\n\n\n# SECURITY WARNING: keep the secret key used in production secret!\n\n\nSECRET_KEY\n \n=\n \nconfig\n(\n'SECRET_KEY'\n)\n\n\n\n# SECURITY WARNING: don't run with debug turned on in production!\n\n\nDEBUG\n \n=\n \nconfig\n(\n'DEBUG'\n,\n \ndefault\n=\nFalse\n,\n \ncast\n=\nbool\n)\n\n\n\n\n\nEm desenvolvimento, vamos usar o \nsqlite\n, ent\u00e3o para configur\u00e1-lo, vamos criar uma vari\u00e1vel, passando o valor padr\u00e3o para caso n\u00e3o houver informa\u00e7\u00f5es de conex\u00e3o no arquivo \n.env\n\n\n# Database\n\n\n# https://docs.djangoproject.com/en/1.10/ref/settings/#databases\n\n\n\ndefault_db_url\n \n=\n \n'sqlite:///'\n \n+\n \nos\n.\npath\n.\njoin\n(\nBASE_DIR\n,\n \n'db.sqlite3'\n)\n\n\n\n\n\nA nossa string de conex\u00e3o, ir\u00e1 ficar dessa forma:\n\n\nDATABASES\n \n=\n \n{\n\n    \n'default'\n:\n \nconfig\n(\n'DATABASE_URL'\n,\n \ndefault\n=\ndefault_db_url\n,\n \ncast\n=\ndburl\n)\n\n\n}\n\n\n\n\n\nAgora vamos efetuar algumas outras configura\u00e7\u00f5es importantes como hosts permitidos para acessar, linguagem, timezone, local dos arquivos staticos e etc.\n\n\n# hosts\n\n\nALLOWED_HOSTS\n \n=\n \n[\n\n    \n'*'\n\n\n]\n\n\n# tradu\u00e7\u00e3o\n\n\nLANGUAGE_CODE\n \n=\n \n'pt-br'\n\n\n# timestamp\n\n\nTIME_ZONE\n \n=\n \n'America/Cuiaba'\n\n\n\n\n\n\u00c9 importante tamb\u00e9m configurar onde ficar\u00e3o os arquivos est\u00e1tico\n\n\n# Static files (CSS, JavaScript, Images)\n\n\n# https://docs.djangoproject.com/en/1.11/howto/static-files/\n\n\n\nSTATIC_URL\n \n=\n \n'/static/'\n\n\nSTATIC_ROOT\n \n=\n \nos\n.\npath\n.\njoin\n(\nBASE_DIR\n,\n \n'staticfiles'\n)\n\n\n\n\n\nSe tudo estiver correto, podemos rodar as migra\u00e7\u00f5es e iniciar nosso projeto \npython manage.py migrate\n e \npython manage.py runserver 0.0.0.0:8000\n\n\n\n\nNote\n\n\nSe estiver no Unix, podemos criar um alias para facilitar a vida \nalias manage='python $VIRTUAL_ENV/../manage.py'\n e usar o comando \nmanage migrate\n e \nmanage runserver\n\nNo windows, crie um arquivo manage.bat em .venv\\scritps com o seguinte conte\u00fado \n@python \"%VIRTUAL_ENV%\\..\\manage.py\" %*\n \n\n\n\n\nConfigura\u00e7\u00f5es do Heroku:\n\u00b6\n\n\nFeito isso, vamos adicionar algumas estruturas do HEROKU:\n\n\nPara isso, vamos precisar criar o app no heroku, criar os arquivos Procfile, runtime.txt.\n\n\nPrimeiro, precisamos informar quem vai servir os arquivos staticos no heroku, por isso utilizamos o m\u00f3dulo \ndj-static\n. Para isso, abra o arquivo \nwsgi.py\n:\n\n\nimport\n \nos\n\n\nfrom\n \ndj_static\n \nimport\n \nCling\n\n\n\nfrom\n \ndjango.core.wsgi\n \nimport\n \nget_wsgi_application\n\n\n\nos\n.\nenviron\n.\nsetdefault\n(\n\"DJANGO_SETTINGS_MODULE\"\n,\n \n\"atividades.settings\"\n)\n\n\n\napplication\n \n=\n \nCling\n(\nget_wsgi_application\n())\n\n\n\n\n\nAgora, vamos criar o arquivo \nProcfile\n, que informa ao heroku como que as coisas v\u00e3o acontecer:\n\n\nweb: gunicorn %nomeprojeto.wsgi --log-file -\n\n\n\n\nAgora, camos criar o arquivo \nruntime.txt\n, que informa qual vers\u00e3o do python vamos utilizar:\n\n\npython-3.6.2\n\n\n\n\nFeito isso, vamos preparar o git.\n\n\nPrimeiro, iniciamos o reposit\u00f3rio com o comando \ngit init\n e depois vamos criar o arquivo \n.gitignore\n, para n\u00e3o enviarmos alguns arquivos.\n\n\n.DS_Store\n.env\n.idea\n.venv\n*.sqlite3\n*pyc\n__pycache__\n\n\n\n\nFeito isso, vamos comitar os arquivos. Primeiro enviamos o .gitignore\n\n\ngit add .gitignore\ngit commit -m \"Add ignore config\"\n\n\n\n\nAgora, vamos importar o restante dos arquivos\n\n\ngit add .\ngit commit -m \"Import project\"\n\n\n\n\nCriando projeto no Heroku\n\u00b6\n\n\nAgora, vamos ao Heroku.\n\n\nNessa etapa, precisamos criar o app, configurar as variaveis, e enviar os arquivos.\n\n\nAntes de come\u00e7ar, instale o heroku client para utilizar os comandos.\n\n\n\n\nNote\n\n\nCaso tenha duvidas, siga \nhttps://devcenter.heroku.com/articles/heroku-cli\n\n\n\n\nVamos criar e configurar o app:\n\n\nheroku create %nomeprojeto --buildpack heroku/python\nheroku addons:create heroku-postgresql:hobby-dev\nheroku pg:promote\nheroku plugins:install heroku-config\nheroku config:push\n\n\n\n\nFeito isso, vamos enviar o projeto\n\n\ngit push heroku master\n\n\n\n\nCaso, tudo correto, projeto no ar!!!\n\n\nConclus\u00e3o\n\u00b6\n\n\nPara finalizar, precisamos rodar as migra\u00e7\u00f5es e criar o usuario admin:\n\n\nheroku run python manage.py migrate\nheroku run python manage.py createsuperuser\n\n\n\n\nAgradecimento\n\u00b6\n\n\nFeito isso, s\u00f3 utilizar eu app e desfrutar das funcionalidades do heroku! Valeu!\n\n\nAgradecimentos especiais:\n\n\n\n\nHenrique Bastos (\nhttps://welcometothedjango.com.br/\n)\n\n\nAlessandro Folk\n\n\nDoc do Heroku\n\n\nDoc do Django",
            "title": "Criando Projeto django e enviando para o HEROKU"
        },
        {
            "location": "/wgalleti.github.io/desenvolvimento/pythondjango/heroku/#criando-projeto-django-e-enviando-para-o-heroku",
            "text": "Vamos criar um projeto simples para ser utilizado com o heroku.",
            "title": "Criando Projeto django e enviando para o HEROKU"
        },
        {
            "location": "/wgalleti.github.io/desenvolvimento/pythondjango/heroku/#preparacao-do-ambiente",
            "text": "Note  Utilizando python 3.6.2    Crie o diretorio para o projeto e entre no mesmo  mkdir %nomeprojeto & cd $_  Criar o ambiente virtual  python -m venv .venv  Ativar ambiente  source .venv/bin/activate  Instalar dependencias  pip install django dj-database-url dj-static python-decouple gunicorn psycopg2",
            "title": "Prepara\u00e7\u00e3o do ambiente"
        },
        {
            "location": "/wgalleti.github.io/desenvolvimento/pythondjango/heroku/#detalhando-as-dependencias",
            "text": "django: MAGIC  dj-database-url: M\u00f3dulo para converter url em dicionario de conex\u00e3o  dj-static: M\u00f3dulo para servir arquivos est\u00e1ticos  python-decouple: M\u00f3dulo que ajuda na parte de segura\u00e7a da aplica\u00e7\u00e3o (utilizar parametros via arquivo .env)  gunicorn: Servidor web  psycopg2: M\u00f3dulo de acesso ao postgres",
            "title": "Detalhando as depend\u00eancias"
        },
        {
            "location": "/wgalleti.github.io/desenvolvimento/pythondjango/heroku/#inicando-o-projeto",
            "text": "Ap\u00f3s o ambiente preparado, vamos iniciar o projeto. \nPrimeiro, vamos salvar os m\u00f3dulos que nosso projeto necessita:  pip freeze > requirements.txt  Ap\u00f3s isso, vamos criar nosso projeto:  django-admin startproject %nomeprojeto .   Note  Utilizo o ponto para n\u00e3o criar subpasta no projeto!!!",
            "title": "Inicando o projeto"
        },
        {
            "location": "/wgalleti.github.io/desenvolvimento/pythondjango/heroku/#configuracoes-do-projeto",
            "text": "Primeiro, vamos ao arquivo  settings.py . Nele, iremos informar as chaves do projeto, conex\u00e3o de banco de dados, caminhos, etc.  Para aumentar a seguran\u00e7a, e remover desse arquivo dados de senha e chave, vamos utilizar o python-decouple. \nPara isso vamos criar o arquivo  .env  na raiz do projeto.  Nele vamos informar os seguintes itens:  SECRET_KEY=***********************************(Copiar do seu settings.py)\nDEBUG=True  Agora dentro do nosso  setting.py , vamos efetuar os imports do decouple e dj-database-url, logo ap\u00f3s o  import os :  from   decouple   import   config  from   dj_database_url   import   parse   as   dburl   Agora vamos configurar nosso  SECRET_KEY  e  DEBUG  para buscar as informa\u00e7\u00f5es do arquivo  .env  # SECURITY WARNING: keep the secret key used in production secret!  SECRET_KEY   =   config ( 'SECRET_KEY' )  # SECURITY WARNING: don't run with debug turned on in production!  DEBUG   =   config ( 'DEBUG' ,   default = False ,   cast = bool )   Em desenvolvimento, vamos usar o  sqlite , ent\u00e3o para configur\u00e1-lo, vamos criar uma vari\u00e1vel, passando o valor padr\u00e3o para caso n\u00e3o houver informa\u00e7\u00f5es de conex\u00e3o no arquivo  .env  # Database  # https://docs.djangoproject.com/en/1.10/ref/settings/#databases  default_db_url   =   'sqlite:///'   +   os . path . join ( BASE_DIR ,   'db.sqlite3' )   A nossa string de conex\u00e3o, ir\u00e1 ficar dessa forma:  DATABASES   =   { \n     'default' :   config ( 'DATABASE_URL' ,   default = default_db_url ,   cast = dburl )  }   Agora vamos efetuar algumas outras configura\u00e7\u00f5es importantes como hosts permitidos para acessar, linguagem, timezone, local dos arquivos staticos e etc.  # hosts  ALLOWED_HOSTS   =   [ \n     '*'  ]  # tradu\u00e7\u00e3o  LANGUAGE_CODE   =   'pt-br'  # timestamp  TIME_ZONE   =   'America/Cuiaba'   \u00c9 importante tamb\u00e9m configurar onde ficar\u00e3o os arquivos est\u00e1tico  # Static files (CSS, JavaScript, Images)  # https://docs.djangoproject.com/en/1.11/howto/static-files/  STATIC_URL   =   '/static/'  STATIC_ROOT   =   os . path . join ( BASE_DIR ,   'staticfiles' )   Se tudo estiver correto, podemos rodar as migra\u00e7\u00f5es e iniciar nosso projeto  python manage.py migrate  e  python manage.py runserver 0.0.0.0:8000   Note  Se estiver no Unix, podemos criar um alias para facilitar a vida  alias manage='python $VIRTUAL_ENV/../manage.py'  e usar o comando  manage migrate  e  manage runserver \nNo windows, crie um arquivo manage.bat em .venv\\scritps com o seguinte conte\u00fado  @python \"%VIRTUAL_ENV%\\..\\manage.py\" %*",
            "title": "Configura\u00e7\u00f5es do Projeto:"
        },
        {
            "location": "/wgalleti.github.io/desenvolvimento/pythondjango/heroku/#configuracoes-do-heroku",
            "text": "Feito isso, vamos adicionar algumas estruturas do HEROKU:  Para isso, vamos precisar criar o app no heroku, criar os arquivos Procfile, runtime.txt.  Primeiro, precisamos informar quem vai servir os arquivos staticos no heroku, por isso utilizamos o m\u00f3dulo  dj-static . Para isso, abra o arquivo  wsgi.py :  import   os  from   dj_static   import   Cling  from   django.core.wsgi   import   get_wsgi_application  os . environ . setdefault ( \"DJANGO_SETTINGS_MODULE\" ,   \"atividades.settings\" )  application   =   Cling ( get_wsgi_application ())   Agora, vamos criar o arquivo  Procfile , que informa ao heroku como que as coisas v\u00e3o acontecer:  web: gunicorn %nomeprojeto.wsgi --log-file -  Agora, camos criar o arquivo  runtime.txt , que informa qual vers\u00e3o do python vamos utilizar:  python-3.6.2  Feito isso, vamos preparar o git.  Primeiro, iniciamos o reposit\u00f3rio com o comando  git init  e depois vamos criar o arquivo  .gitignore , para n\u00e3o enviarmos alguns arquivos.  .DS_Store\n.env\n.idea\n.venv\n*.sqlite3\n*pyc\n__pycache__  Feito isso, vamos comitar os arquivos. Primeiro enviamos o .gitignore  git add .gitignore\ngit commit -m \"Add ignore config\"  Agora, vamos importar o restante dos arquivos  git add .\ngit commit -m \"Import project\"",
            "title": "Configura\u00e7\u00f5es do Heroku:"
        },
        {
            "location": "/wgalleti.github.io/desenvolvimento/pythondjango/heroku/#criando-projeto-no-heroku",
            "text": "Agora, vamos ao Heroku.  Nessa etapa, precisamos criar o app, configurar as variaveis, e enviar os arquivos.  Antes de come\u00e7ar, instale o heroku client para utilizar os comandos.   Note  Caso tenha duvidas, siga  https://devcenter.heroku.com/articles/heroku-cli   Vamos criar e configurar o app:  heroku create %nomeprojeto --buildpack heroku/python\nheroku addons:create heroku-postgresql:hobby-dev\nheroku pg:promote\nheroku plugins:install heroku-config\nheroku config:push  Feito isso, vamos enviar o projeto  git push heroku master  Caso, tudo correto, projeto no ar!!!",
            "title": "Criando projeto no Heroku"
        },
        {
            "location": "/wgalleti.github.io/desenvolvimento/pythondjango/heroku/#conclusao",
            "text": "Para finalizar, precisamos rodar as migra\u00e7\u00f5es e criar o usuario admin:  heroku run python manage.py migrate\nheroku run python manage.py createsuperuser",
            "title": "Conclus\u00e3o"
        },
        {
            "location": "/wgalleti.github.io/desenvolvimento/pythondjango/heroku/#agradecimento",
            "text": "Feito isso, s\u00f3 utilizar eu app e desfrutar das funcionalidades do heroku! Valeu!  Agradecimentos especiais:   Henrique Bastos ( https://welcometothedjango.com.br/ )  Alessandro Folk  Doc do Heroku  Doc do Django",
            "title": "Agradecimento"
        },
        {
            "location": "/wgalleti.github.io/desenvolvimento/pythondjango/jet_admin/",
            "text": "",
            "title": "Jet admin"
        },
        {
            "location": "/wgalleti.github.io/desenvolvimento/pythondjango/ldap/",
            "text": "Vamos conectar ao dominio \nwilliamgalleti.com\n\u00b6\n\n\nInstala\u00e7\u00e3o\n\u00b6\n\n\npip\n \ninstall\n \ndjango\n-\npython3\n-\nldap\n\n\n\n\n\nSettings\n\u00b6\n\n\nEdite o arquivo settings.py e:\n* Adicione em \nINSTALLED_APPS\n \n'django_python3_ldap',\n\n* Adicione as Seguintes vari\u00e1veis\n\n# Ldap Autentication\n\n\nLDAP_AUTH_URL\n \n=\n \n'ldap://192.168.0.10'\n\n\nLDAP_AUTH_USE_TLS\n \n=\n \nFalse\n\n\nLDAP_AUTH_SEARCH_BASE\n \n=\n \n'dc=williamgalleti,dc=com'\n\n\nLDAP_AUTH_OBJECT_CLASS\n \n=\n \n'person'\n\n\nLDAP_AUTH_USER_FIELDS\n \n=\n \n{\n\n    \n'username'\n:\n \n'sAMAccountName'\n,\n\n    \n'first_name'\n:\n \n'givenName'\n,\n\n    \n'last_name'\n:\n \n'sn'\n,\n\n    \n'email'\n:\n \n'mail'\n,\n\n\n}\n\n\nLDAP_AUTH_USER_LOOKUP_FIELDS\n \n=\n \n(\n'username'\n,)\n\n\nLDAP_AUTH_CLEAN_USER_DATA\n \n=\n \n'django_python3_ldap.utils.clean_user_data'\n\n\nLDAP_AUTH_SYNC_USER_RELATIONS\n \n=\n \n'django_python3_ldap.utils.sync_user_relations'\n\n\nLDAP_AUTH_FORMAT_SEARCH_FILTERS\n \n=\n \n'django_python3_ldap.utils.format_search_filters'\n\n\nLDAP_AUTH_FORMAT_USERNAME\n \n=\n \n'django_python3_ldap.utils.format_username_active_directory'\n\n\nLDAP_AUTH_ACTIVE_DIRECTORY_DOMAIN\n \n=\n \n'WILLIAMGALLETI'\n\n\nLDAP_AUTH_CONNECTION_USERNAME\n \n=\n \n'usuario'\n\n\n\n* Ajustar o django para encontrar a autentica\u00e7\u00e3o pelo LDAP. Adicione a tupla:\n\n# Autentica\u00e7\u00f5es\nAUTHENTICATION_BACKENDS = (\n    'django.contrib.auth.backends.ModelBackend',\n    'django_python3_ldap.auth.LDAPBackend',\n)\n\n\n\nConclus\u00e3o\n\u00b6\n\n\nCaso as informa\u00e7\u00f5es de conex\u00e3o acima estiverem corretas, basta logar com o usu\u00e1rio do LDAP na sua aplica\u00e7\u00e3o\n\n\nOBS:\n Caso tentar logar no admin, vai receber um aviso de falta de permiss\u00e3o. Quando o ldap recebe o usu\u00e1rio, ele vem sem permiss\u00f5es. Para promover o usu\u00e1rio, utilize o comando \npython manage.py ldap_promote NOMEDOUSUARIO\n\n\nOBS2:\n Caso queira receber todos os usu\u00e1rios (N\u00e3o recomendo), execute o comando \npython manage.py ldap_sync_users\n\n\nRefer\u00eancias\n\u00b6\n\n\nhttps://github.com/etianen/django-python3-ldap",
            "title": "Ldap"
        },
        {
            "location": "/wgalleti.github.io/desenvolvimento/pythondjango/ldap/#vamos-conectar-ao-dominio-williamgalleticom",
            "text": "",
            "title": "Vamos conectar ao dominio williamgalleti.com"
        },
        {
            "location": "/wgalleti.github.io/desenvolvimento/pythondjango/ldap/#instalacao",
            "text": "pip   install   django - python3 - ldap",
            "title": "Instala\u00e7\u00e3o"
        },
        {
            "location": "/wgalleti.github.io/desenvolvimento/pythondjango/ldap/#settings",
            "text": "Edite o arquivo settings.py e:\n* Adicione em  INSTALLED_APPS   'django_python3_ldap', \n* Adicione as Seguintes vari\u00e1veis # Ldap Autentication  LDAP_AUTH_URL   =   'ldap://192.168.0.10'  LDAP_AUTH_USE_TLS   =   False  LDAP_AUTH_SEARCH_BASE   =   'dc=williamgalleti,dc=com'  LDAP_AUTH_OBJECT_CLASS   =   'person'  LDAP_AUTH_USER_FIELDS   =   { \n     'username' :   'sAMAccountName' , \n     'first_name' :   'givenName' , \n     'last_name' :   'sn' , \n     'email' :   'mail' ,  }  LDAP_AUTH_USER_LOOKUP_FIELDS   =   ( 'username' ,)  LDAP_AUTH_CLEAN_USER_DATA   =   'django_python3_ldap.utils.clean_user_data'  LDAP_AUTH_SYNC_USER_RELATIONS   =   'django_python3_ldap.utils.sync_user_relations'  LDAP_AUTH_FORMAT_SEARCH_FILTERS   =   'django_python3_ldap.utils.format_search_filters'  LDAP_AUTH_FORMAT_USERNAME   =   'django_python3_ldap.utils.format_username_active_directory'  LDAP_AUTH_ACTIVE_DIRECTORY_DOMAIN   =   'WILLIAMGALLETI'  LDAP_AUTH_CONNECTION_USERNAME   =   'usuario'  \n* Ajustar o django para encontrar a autentica\u00e7\u00e3o pelo LDAP. Adicione a tupla: # Autentica\u00e7\u00f5es\nAUTHENTICATION_BACKENDS = (\n    'django.contrib.auth.backends.ModelBackend',\n    'django_python3_ldap.auth.LDAPBackend',\n)",
            "title": "Settings"
        },
        {
            "location": "/wgalleti.github.io/desenvolvimento/pythondjango/ldap/#conclusao",
            "text": "Caso as informa\u00e7\u00f5es de conex\u00e3o acima estiverem corretas, basta logar com o usu\u00e1rio do LDAP na sua aplica\u00e7\u00e3o  OBS:  Caso tentar logar no admin, vai receber um aviso de falta de permiss\u00e3o. Quando o ldap recebe o usu\u00e1rio, ele vem sem permiss\u00f5es. Para promover o usu\u00e1rio, utilize o comando  python manage.py ldap_promote NOMEDOUSUARIO  OBS2:  Caso queira receber todos os usu\u00e1rios (N\u00e3o recomendo), execute o comando  python manage.py ldap_sync_users",
            "title": "Conclus\u00e3o"
        },
        {
            "location": "/wgalleti.github.io/desenvolvimento/pythondjango/ldap/#referencias",
            "text": "https://github.com/etianen/django-python3-ldap",
            "title": "Refer\u00eancias"
        },
        {
            "location": "/wgalleti.github.io/desenvolvimento/pythondjango/queries/",
            "text": "Django Queries\n\u00b6\n\n\nO que aprendi fazendo queries no Django?\n\n\nFiltros\n\u00b6\n\n\n\n\n\n\n\n\nExpress\u00e3o\n\n\nResultado\n\n\n\n\n\n\n\n\n\n\na__exact=value\n\n\nCombina\u00e7\u00e3o exata\n\n\n\n\n\n\na__exact=None\n\n\nIS NULL\n\n\n\n\n\n\nx__iexact=value\n\n\nCombina\u00e7\u00e3o string ignorando mai\u00fascula e min\u00fascula\n\n\n\n\n\n\na__isnull=True\n\n\nIS NULL\n\n\n\n\n\n\na__isnull=False\n\n\nIS NOT NULL\n\n\n\n\n\n\na__contains=value\n\n\nCont\u00e9m na string\n\n\n\n\n\n\na__icontains=value\n\n\nCont\u00e9m na string ignorando mai\u00fascula e min\u00fascula\n\n\n\n\n\n\na__contains=value\n\n\nCombina\u00e7\u00e3o exata\n\n\n\n\n\n\na__exact=value\n\n\nCombina\u00e7\u00e3o exata",
            "title": "Django Queries"
        },
        {
            "location": "/wgalleti.github.io/desenvolvimento/pythondjango/queries/#django-queries",
            "text": "O que aprendi fazendo queries no Django?",
            "title": "Django Queries"
        },
        {
            "location": "/wgalleti.github.io/desenvolvimento/pythondjango/queries/#filtros",
            "text": "Express\u00e3o  Resultado      a__exact=value  Combina\u00e7\u00e3o exata    a__exact=None  IS NULL    x__iexact=value  Combina\u00e7\u00e3o string ignorando mai\u00fascula e min\u00fascula    a__isnull=True  IS NULL    a__isnull=False  IS NOT NULL    a__contains=value  Cont\u00e9m na string    a__icontains=value  Cont\u00e9m na string ignorando mai\u00fascula e min\u00fascula    a__contains=value  Combina\u00e7\u00e3o exata    a__exact=value  Combina\u00e7\u00e3o exata",
            "title": "Filtros"
        },
        {
            "location": "/wgalleti.github.io/desenvolvimento/pythondjango/rest_framework/",
            "text": "Usando Django Rest Framework\n\u00b6\n\n\n\n\nNote\n\n\nUsando python 3.5.2\n\n\n\n\nInstala\u00e7\u00e3o\n\u00b6\n\n\nCom seu projeto funcionando, vamos instalar os pacotes\n\n\npip install django-rest-auth djangorestframework django-filter\n\n\nDetalhando as depend\u00eancias\n\u00b6\n\n\n\n\ndjango-cors-headers\n: M\u00f3dulo para permitir acesso via cors (cross domain origin)\n\n\ndjango-filter\n: M\u00f3dulo para utilizar filtros no django\n\n\ndjango-rest-auth\n: M\u00f3dulo para autentica\u00e7\u00e3o via REST\n\n\ndjangorestframework\n: M\u00f3dulo para desenvolver apis REST\n\n\n\n\nConfigurando o projeto\n\u00b6\n\n\nVamos adicionar o \n'rest_framework'\n, \n'rest_framework.authtoken'\n, \n'rest_auth'\n ao \nINSTALLED_APPS\n, e criamos o a seguinte variavel no \nsettings.py\n\n\nAgora, vamos definir algumas configura\u00e7\u00f5es padr\u00f5es, como autentica\u00e7\u00e3o, parser de class, formata\u00e7\u00e3o e pagina\u00e7\u00e3o\n\n\nREST_FRAMEWORK\n \n=\n \n{\n\n    \n'DEFAULT_FILTER_BACKENDS'\n:\n \n(\n\n        \n'django_filters.rest_framework.DjangoFilterBackend'\n,\n\n    \n),\n\n    \n'DEFAULT_AUTHENTICATION_CLASSES'\n:\n \n(\n\n        \n'rest_framework.authentication.TokenAuthentication'\n,\n\n    \n),\n\n    \n'DEFAULT_PARSER_CLASSES'\n:\n \n(\n\n        \n'rest_framework.parsers.JSONParser'\n,\n\n    \n),\n\n    \n'COERCE_DECIMAL_TO_STRING'\n:\n \nFalse\n,\n\n    \n'DEFAULT_PAGINATION_CLASS'\n:\n \n'rest_framework.pagination.LimitOffsetPagination'\n,\n\n\n}\n\n\n\n\n\nCorsHeaders\n\u00b6\n\n\nComo vamos transformar nosso projeto em uma API RestFull, precisamos configurar as permiss\u00f5es de CORS (\ncross domain origins\n) e para isso vamos utilizar a biblioteca \ncors-headers\n\n\nPrimeiro, vamos instalar o m\u00f3dulo \npip install django-cors-headers\n\n\nAdicionando o \n'corsheaders'\n ao \nINSTALLED_APPS\n, e criamos o a seguinte variavel\n\n\n# Cors Headers\n\n\nCORS_ORIGIN_ALLOW_ALL\n \n=\n \nTrue\n\n\n\n\n\n\n\nNote\n\n\nOu voc\u00ea pode configurar os hosts que deseja permitir a conex\u00e3o. \nVeja a Documenta\u00e7\u00e3o oficial\n\n\n\n\nEm \nMIDDLEWARE\n, antes de \n'django.middleware.common.CommonMiddleware'\n, adicione \n'corsheaders.middleware.CorsMiddleware',\n\n\nFeito isso, s\u00f3 utilizar as facilidades do \ndjango-rest-framework\n\n\nExemplo de uso\n\u00b6\n\n\nVamos criar um exemplo de api para um crud da tabela de \npessoa\n\n\nNesse exemplo, vamos usar o cliente para consumir o restfull o \npostman\n\n\nModelo\n\u00b6\n\n\nVamos criar a classe \npessoa\n\n\nclass\n \nPessoa\n(\nmodels\n.\nModel\n):\n\n    \n\"\"\"Modelo de Pessoas\"\"\"\n\n\n    \nnome\n \n=\n \nmodels\n.\nCharField\n(\nmax_length\n=\n50\n)\n\n    \nemail\n \n=\n \nmodels\n.\nEmailField\n(\nunique\n=\nTrue\n)\n\n    \ntelefone\n \n=\n \nmodels\n.\nCharField\n(\nmax_length\n=\n15\n)\n\n    \ntem_whats\n \n=\n \nmodels\n.\nBooleanField\n(\ndefault\n=\nFalse\n)\n\n\n    \ndef\n \n__str__\n(\nself\n):\n\n        \nreturn\n \nself\n.\nnome\n\n\n    \nclass\n \nMeta\n:\n\n        \nordering\n \n=\n \n(\n'nome'\n,\n \n'email'\n)\n\n\n\n\n\nCriamos e aplicamos as migra\u00e7\u00f5es\n\n\n(\n.venv\n)\n wgalleti@mpGalleti api \n(\nmaster\n)\n $ python manage.py makemigrations\nMigrations \nfor\n \n'core'\n:\n  intranet/core/migrations/0002_pessoa.py\n    - Create model Pessoa\n\n\n(\n.venv\n)\n wgalleti@mpGalleti api \n(\nmaster\n)\n $ python manage.py migrate\nOperations to perform:\n  Apply all migrations: core\nRunning migrations:\n  Applying core.0002_pessoa... OK\n\n\n\n\nSerializer\n\u00b6\n\n\nFeito isso, vamos necessitar de uma classe para serializar esses dados, ent\u00e3o adicionaremos o arquivo \nserializers.py\n no seu \napp\n e nele vamos criar a classe para serializar pessoas\n\n\nfrom\n \nrest_framework\n \nimport\n \nserializers\n\n\n\nfrom\n \nintranet.core.models\n \nimport\n \nPessoa\n\n\n\nclass\n \nPessoaSerializer\n(\nserializers\n.\nModelSerializer\n):\n\n    \n\"\"\"Serializer para modelo de Pessoas\"\"\"\n\n\n    \nclass\n \nMeta\n:\n\n        \nmodel\n \n=\n \nPessoa\n\n        \nfields\n \n=\n \n'__all__'\n\n\n\n\n\nNessa classe, estamos dizendo que ela herda de \nserializer.ModelSerializer\n, que vamos usar o model \nPessoa\n e vamos utilizar todos os campos\n\n\nView\n\u00b6\n\n\nFeito isso, vamos criar o nosso view set, dentro de \nviews.py\n\n\nfrom\n \nrest_framework\n \nimport\n \nviewsets\n,\n \npermissions\n,\n \nresponse\n\n\nfrom\n \nrest_framework.filters\n \nimport\n \nDjangoFilterBackend\n\n\n\nfrom\n \nintranet.core.serializers\n \nimport\n \n*\n\n\n\nclass\n \nPessoaViewSet\n(\nviewsets\n.\nModelViewSet\n):\n\n    \n\"\"\"ViewSet para modelo de Pessoa\"\"\"\n\n\n    \nserializer_class\n \n=\n \nPessoaSerializer\n\n    \nqueryset\n \n=\n \nPessoa\n.\nobjects\n.\nall\n()\n\n    \nfilter_backends\n \n=\n \n(\nDjangoFilterBackend\n,)\n\n    \nfilter_fields\n \n=\n \n(\n'nome'\n,\n \n'email'\n)\n\n    \npermission_classes\n \n=\n \n(\npermissions\n.\nDjangoModelPermissions\n,)\n\n\n\n\n\nNessa classe, estamos dizendo que ela herda de \nviewset.ModelViewSet\n, que vamos utilizar o serializer_class a classe que criamos anteriomente \nPessoaSerializer\n a nossa pesquisa ser\u00e1 atrav\u00e9s o queryset \nPessoa.objects.all()\n.\n\n\nDefinimos que o m\u00e9todo de filtro \u00e9 o \nDjangoFilterBackend\n para podermos interagir com a url. Exemplo: Acessar http://url/api/pessoa/?nome=William\n\n\nDefinimos que os campos que poder\u00e3o ser filtrados s\u00e3o \nnome\n e \nemail\n\n\nE por ultimo, definimos que as permiss\u00f5es seguir\u00e3o as regras das Permiss\u00f5es de Modelo do Django \nDjangoModelPermissions\n\n\nUrl\n\u00b6\n\n\nFeito isso, basta registrar a url para usar!\n\n\nNo nosso \nurl.py\n vamos efetuar as seguinte configura\u00e7\u00f5es\n\n\nfrom\n \ndjango.conf.urls\n \nimport\n \nurl\n,\n \ninclude\n\n\n\nfrom\n \nrest_framework\n \nimport\n \nrouters\n\n\n\nfrom\n \nintranet.core.views\n \nimport\n \n*\n\n\n\nrouter\n \n=\n \nrouters\n.\nDefaultRouter\n(\ntrailing_slash\n=\nTrue\n)\n\n\nrouter\n.\nregister\n(\nr\n'pessoa'\n,\n \nPessoaViewSet\n)\n\n\n\nurlpatterns\n \n=\n \n[\n\n    \nurl\n(\nr\n'^api/'\n,\n \ninclude\n(\nrouter\n.\nurls\n)),\n\n\n]\n\n\n\n\n\nPrimeiro, criamos uma variavel \nrouter\n recebendo informa\u00e7\u00f5es de \nrouters.DefaultRouter\n. Ali definimos \ntrailing_slash=True\n para utiliza\u00e7\u00e3o em frameworks como \nangularjs\n, \nvue\n para que os mesmos for\u00e7em a preencher a \n/\n no final do metodo\n\n\nAp\u00f3s isso, registramos na url \npessoa\n o nosso viewSet\n\n\nAgora em nossas rotas mesmo, adicionamos as rotas que nosso \nrouter\n ir\u00e1 gerar!\n\n\nAcessando\n\u00b6\n\n\nPara testar tudo, vamos rodar nosso servidor \npython manage.py runserver\n e verificar a url \nhttp://localhost:8000/core/api\n\n\nSe aparecer a seguinte tela, \u00e9 porque est\u00e1 tudo funcionando\n\n\n\n\n\n\nNote\n\n\nDessa forma, voc\u00ea tera acesso aos metodos GET, POST, PUT, DELETE para manipular os arquivos\n\n\n\n\nValeu!",
            "title": "Usando Django Rest Framework"
        },
        {
            "location": "/wgalleti.github.io/desenvolvimento/pythondjango/rest_framework/#usando-django-rest-framework",
            "text": "Note  Usando python 3.5.2",
            "title": "Usando Django Rest Framework"
        },
        {
            "location": "/wgalleti.github.io/desenvolvimento/pythondjango/rest_framework/#instalacao",
            "text": "Com seu projeto funcionando, vamos instalar os pacotes  pip install django-rest-auth djangorestframework django-filter",
            "title": "Instala\u00e7\u00e3o"
        },
        {
            "location": "/wgalleti.github.io/desenvolvimento/pythondjango/rest_framework/#detalhando-as-dependencias",
            "text": "django-cors-headers : M\u00f3dulo para permitir acesso via cors (cross domain origin)  django-filter : M\u00f3dulo para utilizar filtros no django  django-rest-auth : M\u00f3dulo para autentica\u00e7\u00e3o via REST  djangorestframework : M\u00f3dulo para desenvolver apis REST",
            "title": "Detalhando as depend\u00eancias"
        },
        {
            "location": "/wgalleti.github.io/desenvolvimento/pythondjango/rest_framework/#configurando-o-projeto",
            "text": "Vamos adicionar o  'rest_framework' ,  'rest_framework.authtoken' ,  'rest_auth'  ao  INSTALLED_APPS , e criamos o a seguinte variavel no  settings.py  Agora, vamos definir algumas configura\u00e7\u00f5es padr\u00f5es, como autentica\u00e7\u00e3o, parser de class, formata\u00e7\u00e3o e pagina\u00e7\u00e3o  REST_FRAMEWORK   =   { \n     'DEFAULT_FILTER_BACKENDS' :   ( \n         'django_filters.rest_framework.DjangoFilterBackend' , \n     ), \n     'DEFAULT_AUTHENTICATION_CLASSES' :   ( \n         'rest_framework.authentication.TokenAuthentication' , \n     ), \n     'DEFAULT_PARSER_CLASSES' :   ( \n         'rest_framework.parsers.JSONParser' , \n     ), \n     'COERCE_DECIMAL_TO_STRING' :   False , \n     'DEFAULT_PAGINATION_CLASS' :   'rest_framework.pagination.LimitOffsetPagination' ,  }",
            "title": "Configurando o projeto"
        },
        {
            "location": "/wgalleti.github.io/desenvolvimento/pythondjango/rest_framework/#corsheaders",
            "text": "Como vamos transformar nosso projeto em uma API RestFull, precisamos configurar as permiss\u00f5es de CORS ( cross domain origins ) e para isso vamos utilizar a biblioteca  cors-headers  Primeiro, vamos instalar o m\u00f3dulo  pip install django-cors-headers  Adicionando o  'corsheaders'  ao  INSTALLED_APPS , e criamos o a seguinte variavel  # Cors Headers  CORS_ORIGIN_ALLOW_ALL   =   True    Note  Ou voc\u00ea pode configurar os hosts que deseja permitir a conex\u00e3o.  Veja a Documenta\u00e7\u00e3o oficial   Em  MIDDLEWARE , antes de  'django.middleware.common.CommonMiddleware' , adicione  'corsheaders.middleware.CorsMiddleware',  Feito isso, s\u00f3 utilizar as facilidades do  django-rest-framework",
            "title": "CorsHeaders"
        },
        {
            "location": "/wgalleti.github.io/desenvolvimento/pythondjango/rest_framework/#exemplo-de-uso",
            "text": "Vamos criar um exemplo de api para um crud da tabela de  pessoa  Nesse exemplo, vamos usar o cliente para consumir o restfull o  postman",
            "title": "Exemplo de uso"
        },
        {
            "location": "/wgalleti.github.io/desenvolvimento/pythondjango/rest_framework/#modelo",
            "text": "Vamos criar a classe  pessoa  class   Pessoa ( models . Model ): \n     \"\"\"Modelo de Pessoas\"\"\" \n\n     nome   =   models . CharField ( max_length = 50 ) \n     email   =   models . EmailField ( unique = True ) \n     telefone   =   models . CharField ( max_length = 15 ) \n     tem_whats   =   models . BooleanField ( default = False ) \n\n     def   __str__ ( self ): \n         return   self . nome \n\n     class   Meta : \n         ordering   =   ( 'nome' ,   'email' )   Criamos e aplicamos as migra\u00e7\u00f5es  ( .venv )  wgalleti@mpGalleti api  ( master )  $ python manage.py makemigrations\nMigrations  for   'core' :\n  intranet/core/migrations/0002_pessoa.py\n    - Create model Pessoa ( .venv )  wgalleti@mpGalleti api  ( master )  $ python manage.py migrate\nOperations to perform:\n  Apply all migrations: core\nRunning migrations:\n  Applying core.0002_pessoa... OK",
            "title": "Modelo"
        },
        {
            "location": "/wgalleti.github.io/desenvolvimento/pythondjango/rest_framework/#serializer",
            "text": "Feito isso, vamos necessitar de uma classe para serializar esses dados, ent\u00e3o adicionaremos o arquivo  serializers.py  no seu  app  e nele vamos criar a classe para serializar pessoas  from   rest_framework   import   serializers  from   intranet.core.models   import   Pessoa  class   PessoaSerializer ( serializers . ModelSerializer ): \n     \"\"\"Serializer para modelo de Pessoas\"\"\" \n\n     class   Meta : \n         model   =   Pessoa \n         fields   =   '__all__'   Nessa classe, estamos dizendo que ela herda de  serializer.ModelSerializer , que vamos usar o model  Pessoa  e vamos utilizar todos os campos",
            "title": "Serializer"
        },
        {
            "location": "/wgalleti.github.io/desenvolvimento/pythondjango/rest_framework/#view",
            "text": "Feito isso, vamos criar o nosso view set, dentro de  views.py  from   rest_framework   import   viewsets ,   permissions ,   response  from   rest_framework.filters   import   DjangoFilterBackend  from   intranet.core.serializers   import   *  class   PessoaViewSet ( viewsets . ModelViewSet ): \n     \"\"\"ViewSet para modelo de Pessoa\"\"\" \n\n     serializer_class   =   PessoaSerializer \n     queryset   =   Pessoa . objects . all () \n     filter_backends   =   ( DjangoFilterBackend ,) \n     filter_fields   =   ( 'nome' ,   'email' ) \n     permission_classes   =   ( permissions . DjangoModelPermissions ,)   Nessa classe, estamos dizendo que ela herda de  viewset.ModelViewSet , que vamos utilizar o serializer_class a classe que criamos anteriomente  PessoaSerializer  a nossa pesquisa ser\u00e1 atrav\u00e9s o queryset  Pessoa.objects.all() .  Definimos que o m\u00e9todo de filtro \u00e9 o  DjangoFilterBackend  para podermos interagir com a url. Exemplo: Acessar http://url/api/pessoa/?nome=William  Definimos que os campos que poder\u00e3o ser filtrados s\u00e3o  nome  e  email  E por ultimo, definimos que as permiss\u00f5es seguir\u00e3o as regras das Permiss\u00f5es de Modelo do Django  DjangoModelPermissions",
            "title": "View"
        },
        {
            "location": "/wgalleti.github.io/desenvolvimento/pythondjango/rest_framework/#url",
            "text": "Feito isso, basta registrar a url para usar!  No nosso  url.py  vamos efetuar as seguinte configura\u00e7\u00f5es  from   django.conf.urls   import   url ,   include  from   rest_framework   import   routers  from   intranet.core.views   import   *  router   =   routers . DefaultRouter ( trailing_slash = True )  router . register ( r 'pessoa' ,   PessoaViewSet )  urlpatterns   =   [ \n     url ( r '^api/' ,   include ( router . urls )),  ]   Primeiro, criamos uma variavel  router  recebendo informa\u00e7\u00f5es de  routers.DefaultRouter . Ali definimos  trailing_slash=True  para utiliza\u00e7\u00e3o em frameworks como  angularjs ,  vue  para que os mesmos for\u00e7em a preencher a  /  no final do metodo  Ap\u00f3s isso, registramos na url  pessoa  o nosso viewSet  Agora em nossas rotas mesmo, adicionamos as rotas que nosso  router  ir\u00e1 gerar!",
            "title": "Url"
        },
        {
            "location": "/wgalleti.github.io/desenvolvimento/pythondjango/rest_framework/#acessando",
            "text": "Para testar tudo, vamos rodar nosso servidor  python manage.py runserver  e verificar a url  http://localhost:8000/core/api  Se aparecer a seguinte tela, \u00e9 porque est\u00e1 tudo funcionando    Note  Dessa forma, voc\u00ea tera acesso aos metodos GET, POST, PUT, DELETE para manipular os arquivos   Valeu!",
            "title": "Acessando"
        },
        {
            "location": "/wgalleti.github.io/estudos/angular/",
            "text": "",
            "title": "Angular"
        },
        {
            "location": "/wgalleti.github.io/estudos/angularjs/",
            "text": "",
            "title": "Angularjs"
        },
        {
            "location": "/wgalleti.github.io/estudos/django/",
            "text": "",
            "title": "Django"
        },
        {
            "location": "/wgalleti.github.io/estudos/python/",
            "text": "",
            "title": "Python"
        },
        {
            "location": "/wgalleti.github.io/oracle/plsql/uteis/",
            "text": "Exportando dados com spool\n\u00b6\n\n\nVamos criar um script sql e um bat para exportar dados de uma determinada consulta para CSV (Grandes Volumes)\n\n\nPrimeiro, vamos preparar a consulta:\n\n\nPreparando a consulta\n\u00b6\n\n\nVou usar o seguinte comando de exemplo:\n\n\nSELECT\n \nA\n.\nCODEMP\n,\n\n       \nA\n.\nCODFIL\n,\n\n       \nA\n.\nNUMOCP\n,\n\n       \nA\n.\nCODPRO\n,\n\n       \nA\n.\nCODFAM\n,\n\n       \nA\n.\nPREFOR\n,\n\n       \nA\n.\nQTDFOR\n,\n\n       \nA\n.\nQTDCAN\n,\n\n       \nA\n.\nQTDABE\n,\n\n       \nA\n.\nQTDREC\n,\n\n       \nA\n.\nQTDPED\n,\n\n       \nA\n.\nVLRFIN\n,\n\n       \nA\n.\nPREUNI\n,\n\n       \nA\n.\nCODMOE\n,\n\n       \nA\n.\nSITIPO\n,\n\n       \nTO_CHAR\n(\nA\n.\nDATENT\n,\n'DD/MM/YYYY'\n)\n \nDATENT\n,\n\n       \nTO_CHAR\n(\nA\n.\nDATGER\n,\n'DD/MM/YYYY'\n)\n \nDATGER\n,\n\n       \nA\n.\nPERDSC\n,\n\n       \nA\n.\nVLRDSC\n,\n\n       \nA\n.\nCODDEP\n,\n\n       \nA\n.\nCODCCU\n,\n\n       \nA\n.\nCODEMP\n,\n\n       \nA\n.\nCODPRO\n,\n\n       \nB\n.\nDESPRO\n,\n\n       \nC\n.\nCODFOR\n\n  \nFROM\n \nSAPIENS\n.\nE420IPO\n \nA\n,\n\n       \nSAPIENS\n.\nE075PRO\n \nB\n,\n\n       \nSAPIENS\n.\nE420OCP\n \nC\n\n\nWHERE\n \nC\n.\nCODEMP\n \n=\n \nA\n.\nCODEMP\n\n  \nAND\n \nC\n.\nCODFIL\n \n=\n \nA\n.\nCODFIL\n\n  \nAND\n \nC\n.\nNUMOCP\n \n=\n \nA\n.\nNUMOCP\n\n  \nAND\n \nB\n.\nCODEMP\n \n=\n \nA\n.\nCODEMP\n\n  \nAND\n \nB\n.\nCODPRO\n \n=\n \nA\n.\nCODPRO\n\n  \nAND\n \nA\n.\nDATGER\n \nBETWEEN\n \n'01/02/2017'\n \nAND\n \n'10/02/2017'\n\n  \nAND\n \nA\n.\nSITIPO\n \nIN\n \n(\n1\n,\n \n2\n,\n \n3\n,\n \n8\n,\n \n9\n)\n\n\n\n\n\nPrimeiro, precisamos concatenar as colunas, transformandoas em uma \u00fanica coluna\n\n\nSELECT\n \nA\n.\nCODEMP\n||\n';'\n||\n\n       \nA\n.\nCODFIL\n||\n';'\n||\n\n       \nA\n.\nNUMOCP\n||\n';'\n||\n\n       \nA\n.\nCODPRO\n||\n';'\n||\n\n       \nA\n.\nCODFAM\n||\n';'\n||\n\n       \nA\n.\nPREFOR\n||\n';'\n||\n\n       \nA\n.\nQTDFOR\n||\n';'\n||\n\n       \nA\n.\nQTDCAN\n||\n';'\n||\n\n       \nA\n.\nQTDABE\n||\n';'\n||\n\n       \nA\n.\nQTDREC\n||\n';'\n||\n\n       \nA\n.\nQTDPED\n||\n';'\n||\n\n       \nA\n.\nVLRFIN\n||\n';'\n||\n\n       \nA\n.\nPREUNI\n||\n';'\n||\n\n       \nA\n.\nCODMOE\n||\n';'\n||\n\n       \nA\n.\nSITIPO\n||\n';'\n||\n\n       \nTO_CHAR\n(\nA\n.\nDATENT\n,\n'DD/MM/YYYY'\n)\n||\n';'\n||\n\n       \nTO_CHAR\n(\nA\n.\nDATGER\n,\n'DD/MM/YYYY'\n)\n||\n';'\n||\n\n       \nA\n.\nPERDSC\n||\n';'\n||\n\n       \nA\n.\nVLRDSC\n||\n';'\n||\n\n       \nA\n.\nCODDEP\n||\n';'\n||\n\n       \nA\n.\nCODCCU\n||\n';'\n||\n\n       \nA\n.\nCODEMP\n||\n';'\n||\n\n       \nA\n.\nCODPRO\n||\n';'\n||\n\n       \nB\n.\nDESPRO\n||\n';'\n||\n\n       \nC\n.\nCODFOR\n\n  \nFROM\n \n...\n\n\n\n\n\nAgora vamos criar uma consulta ficticia para gerar os nomes das colunas\n\n\nSELECT\n \n'CODEMP;CODFIL;NUMOCP;CODPRO;CODFAM;PREFOR;QTDFOR;QTDCAN;QTDABE;QTDREC;QTDPED;VLRFIN;PREUNI;CODMOE;SITIPO;DATENT;DATGER;PERDSC;VLRDSC;CODDEP;CODCCU;CODEMP;CODPRO;DESPRO;CODFOR'\n \nFROM\n \nDUAL\n\n\n\n\n\nVamos juntar as duas consultas e definir alguns parametros para o SQL em um arquivo com o nome \nconsulta.sql\n\n\nset\n \ncolsep\n \n';'\n\n\nset\n \necho\n \noff\n\n\nset\n \nfeedback\n \noff\n\n\nset\n \nlinesize\n \n1000\n\n\nset\n \npagesize\n \n0\n\n\nset\n \nsqlprompt\n \n''\n\n\nset\n \ntrimspool\n \non\n\n\nset\n \nheadsep\n \noff\n\n\n\nspool\n \nEXPORT\n.\nCSV\n\n\n\nSELECT\n \n'CODEMP;CODFIL;NUMOCP;CODPRO;CODFAM;PREFOR;QTDFOR;QTDCAN;QTDABE;QTDREC;QTDPED;VLRFIN;PREUNI;CODMOE;SITIPO;DATENT;DATGER;PERDSC;VLRDSC;CODDEP;CODCCU;CODEMP;CODPRO;DESPRO;CODFOR'\n \nFROM\n \nDUAL\n\n\nUNION\n \nALL\n\n\nSELECT\n \nA\n.\nCODEMP\n||\n';'\n||\n\n       \nA\n.\nCODFIL\n||\n';'\n||\n\n       \nA\n.\nNUMOCP\n||\n';'\n||\n\n       \nA\n.\nCODPRO\n||\n';'\n||\n\n       \nA\n.\nCODFAM\n||\n';'\n||\n\n       \nA\n.\nPREFOR\n||\n';'\n||\n\n       \nA\n.\nQTDFOR\n||\n';'\n||\n\n       \nA\n.\nQTDCAN\n||\n';'\n||\n\n       \nA\n.\nQTDABE\n||\n';'\n||\n\n       \nA\n.\nQTDREC\n||\n';'\n||\n\n       \nA\n.\nQTDPED\n||\n';'\n||\n\n       \nA\n.\nVLRFIN\n||\n';'\n||\n\n       \nA\n.\nPREUNI\n||\n';'\n||\n\n       \nA\n.\nCODMOE\n||\n';'\n||\n\n       \nA\n.\nSITIPO\n||\n';'\n||\n\n       \nTO_CHAR\n(\nA\n.\nDATENT\n,\n'DD/MM/YYYY'\n)\n||\n';'\n||\n\n       \nTO_CHAR\n(\nA\n.\nDATGER\n,\n'DD/MM/YYYY'\n)\n||\n';'\n||\n\n       \nA\n.\nPERDSC\n||\n';'\n||\n\n       \nA\n.\nVLRDSC\n||\n';'\n||\n\n       \nA\n.\nCODDEP\n||\n';'\n||\n\n       \nA\n.\nCODCCU\n||\n';'\n||\n\n       \nA\n.\nCODEMP\n||\n';'\n||\n\n       \nA\n.\nCODPRO\n||\n';'\n||\n\n       \nB\n.\nDESPRO\n||\n';'\n||\n\n       \nC\n.\nCODFOR\n\n  \nFROM\n \nSAPIENS\n.\nE420IPO\n \nA\n,\n\n       \nSAPIENS\n.\nE075PRO\n \nB\n,\n\n       \nSAPIENS\n.\nE420OCP\n \nC\n\n\nWHERE\n \nC\n.\nCODEMP\n \n=\n \nA\n.\nCODEMP\n\n  \nAND\n \nC\n.\nCODFIL\n \n=\n \nA\n.\nCODFIL\n\n  \nAND\n \nC\n.\nNUMOCP\n \n=\n \nA\n.\nNUMOCP\n\n  \nAND\n \nB\n.\nCODEMP\n \n=\n \nA\n.\nCODEMP\n\n  \nAND\n \nB\n.\nCODPRO\n \n=\n \nA\n.\nCODPRO\n\n  \nAND\n \nA\n.\nDATGER\n \nBETWEEN\n \n'01/02/2017'\n \nAND\n \n'10/02/2017'\n\n  \nAND\n \nA\n.\nSITIPO\n \nIN\n \n(\n1\n,\n \n2\n,\n \n3\n,\n \n8\n,\n \n9\n);\n\n\n\nspool\n \noff\n\n\nexit\n\n\n\n\n\nAgora, basta chamar o arquivo para ser executado pelo \nsqlplus\n:\n\n\nsqlplus usuario/senha@tns @consulta\n\n\n\n\nPara facilitar, crie um arquivo \n.bat\n para executar a a\u00e7\u00e3o.",
            "title": "Uteis"
        },
        {
            "location": "/wgalleti.github.io/oracle/plsql/uteis/#exportando-dados-com-spool",
            "text": "Vamos criar um script sql e um bat para exportar dados de uma determinada consulta para CSV (Grandes Volumes)  Primeiro, vamos preparar a consulta:",
            "title": "Exportando dados com spool"
        },
        {
            "location": "/wgalleti.github.io/oracle/plsql/uteis/#preparando-a-consulta",
            "text": "Vou usar o seguinte comando de exemplo:  SELECT   A . CODEMP , \n        A . CODFIL , \n        A . NUMOCP , \n        A . CODPRO , \n        A . CODFAM , \n        A . PREFOR , \n        A . QTDFOR , \n        A . QTDCAN , \n        A . QTDABE , \n        A . QTDREC , \n        A . QTDPED , \n        A . VLRFIN , \n        A . PREUNI , \n        A . CODMOE , \n        A . SITIPO , \n        TO_CHAR ( A . DATENT , 'DD/MM/YYYY' )   DATENT , \n        TO_CHAR ( A . DATGER , 'DD/MM/YYYY' )   DATGER , \n        A . PERDSC , \n        A . VLRDSC , \n        A . CODDEP , \n        A . CODCCU , \n        A . CODEMP , \n        A . CODPRO , \n        B . DESPRO , \n        C . CODFOR \n   FROM   SAPIENS . E420IPO   A , \n        SAPIENS . E075PRO   B , \n        SAPIENS . E420OCP   C  WHERE   C . CODEMP   =   A . CODEMP \n   AND   C . CODFIL   =   A . CODFIL \n   AND   C . NUMOCP   =   A . NUMOCP \n   AND   B . CODEMP   =   A . CODEMP \n   AND   B . CODPRO   =   A . CODPRO \n   AND   A . DATGER   BETWEEN   '01/02/2017'   AND   '10/02/2017' \n   AND   A . SITIPO   IN   ( 1 ,   2 ,   3 ,   8 ,   9 )   Primeiro, precisamos concatenar as colunas, transformandoas em uma \u00fanica coluna  SELECT   A . CODEMP || ';' || \n        A . CODFIL || ';' || \n        A . NUMOCP || ';' || \n        A . CODPRO || ';' || \n        A . CODFAM || ';' || \n        A . PREFOR || ';' || \n        A . QTDFOR || ';' || \n        A . QTDCAN || ';' || \n        A . QTDABE || ';' || \n        A . QTDREC || ';' || \n        A . QTDPED || ';' || \n        A . VLRFIN || ';' || \n        A . PREUNI || ';' || \n        A . CODMOE || ';' || \n        A . SITIPO || ';' || \n        TO_CHAR ( A . DATENT , 'DD/MM/YYYY' ) || ';' || \n        TO_CHAR ( A . DATGER , 'DD/MM/YYYY' ) || ';' || \n        A . PERDSC || ';' || \n        A . VLRDSC || ';' || \n        A . CODDEP || ';' || \n        A . CODCCU || ';' || \n        A . CODEMP || ';' || \n        A . CODPRO || ';' || \n        B . DESPRO || ';' || \n        C . CODFOR \n   FROM   ...   Agora vamos criar uma consulta ficticia para gerar os nomes das colunas  SELECT   'CODEMP;CODFIL;NUMOCP;CODPRO;CODFAM;PREFOR;QTDFOR;QTDCAN;QTDABE;QTDREC;QTDPED;VLRFIN;PREUNI;CODMOE;SITIPO;DATENT;DATGER;PERDSC;VLRDSC;CODDEP;CODCCU;CODEMP;CODPRO;DESPRO;CODFOR'   FROM   DUAL   Vamos juntar as duas consultas e definir alguns parametros para o SQL em um arquivo com o nome  consulta.sql  set   colsep   ';'  set   echo   off  set   feedback   off  set   linesize   1000  set   pagesize   0  set   sqlprompt   ''  set   trimspool   on  set   headsep   off  spool   EXPORT . CSV  SELECT   'CODEMP;CODFIL;NUMOCP;CODPRO;CODFAM;PREFOR;QTDFOR;QTDCAN;QTDABE;QTDREC;QTDPED;VLRFIN;PREUNI;CODMOE;SITIPO;DATENT;DATGER;PERDSC;VLRDSC;CODDEP;CODCCU;CODEMP;CODPRO;DESPRO;CODFOR'   FROM   DUAL  UNION   ALL  SELECT   A . CODEMP || ';' || \n        A . CODFIL || ';' || \n        A . NUMOCP || ';' || \n        A . CODPRO || ';' || \n        A . CODFAM || ';' || \n        A . PREFOR || ';' || \n        A . QTDFOR || ';' || \n        A . QTDCAN || ';' || \n        A . QTDABE || ';' || \n        A . QTDREC || ';' || \n        A . QTDPED || ';' || \n        A . VLRFIN || ';' || \n        A . PREUNI || ';' || \n        A . CODMOE || ';' || \n        A . SITIPO || ';' || \n        TO_CHAR ( A . DATENT , 'DD/MM/YYYY' ) || ';' || \n        TO_CHAR ( A . DATGER , 'DD/MM/YYYY' ) || ';' || \n        A . PERDSC || ';' || \n        A . VLRDSC || ';' || \n        A . CODDEP || ';' || \n        A . CODCCU || ';' || \n        A . CODEMP || ';' || \n        A . CODPRO || ';' || \n        B . DESPRO || ';' || \n        C . CODFOR \n   FROM   SAPIENS . E420IPO   A , \n        SAPIENS . E075PRO   B , \n        SAPIENS . E420OCP   C  WHERE   C . CODEMP   =   A . CODEMP \n   AND   C . CODFIL   =   A . CODFIL \n   AND   C . NUMOCP   =   A . NUMOCP \n   AND   B . CODEMP   =   A . CODEMP \n   AND   B . CODPRO   =   A . CODPRO \n   AND   A . DATGER   BETWEEN   '01/02/2017'   AND   '10/02/2017' \n   AND   A . SITIPO   IN   ( 1 ,   2 ,   3 ,   8 ,   9 );  spool   off  exit   Agora, basta chamar o arquivo para ser executado pelo  sqlplus :  sqlplus usuario/senha@tns @consulta  Para facilitar, crie um arquivo  .bat  para executar a a\u00e7\u00e3o.",
            "title": "Preparando a consulta"
        },
        {
            "location": "/wgalleti.github.io/servidores/apache/python/",
            "text": "Ubuntu 16.10 + Apache2 + Python + WSGI + Oracle\n\u00b6\n\n\nVamos instalar um servidor ubuntu 16.10 para hospedar p\u00e1ginas web desenvolvidas em python com framework django.\n\n\n\n\nRevisado e testado em 2017-06-28\n\n\n\n\nAtuliza\u00e7\u00e3o e pequenas corre\u00e7\u00f5es\n\u00b6\n\n\nAntes de come\u00e7ar, vamos resolver o problema de linguagem da vers\u00e3o 16.10\n\n\nComo \nroot\n\n\napt-get install language-pack-pt\nlocale-gen pt_BR.UTF-8\nreboot\n\n\n\n\nVamos efetuar as atualiza\u00e7\u00f5es\n\n\napt-get update\napt-get upgrade\napt-get dist-upgrade\n\n\n\n\nUsu\u00e1rios\n\u00b6\n\n\nAgora criamos o usu\u00e1rio \ndeploy\n\n\nuseradd -m -d /home/deploy -G adm,www-data,sudo -s /bin/bash deploy\npasswd deploy\n\n\n\n\nS\u00f3 para confirmar, verifique em \n/etc/passwd\n se ficou dessa forma\n\n\ndeploy:x:1001:1001::/home/deploy:/bin/bash\n\n\n\n\nAgora edite o arquivo \nnano /home/deploy/.profile\n e verifique se existe as seguinte informa\u00e7\u00f5es\n\n\n# ~/.profile: executed by the command interpreter for login shells.\n\n\n# This file is not read by bash(1), if ~/.bash_profile or ~/.bash_login\n\n\n# exists.\n\n\n# see /usr/share/doc/bash/examples/startup-files for examples.\n\n\n# the files are located in the bash-doc package.\n\n\n\n# the default umask is set in /etc/profile; for setting the umask\n\n\n# for ssh logins, install and configure the libpam-umask package.\n\n\n#umask 022\n\n\n\n# if running bash\n\n\nif\n \n[\n -n \n\"\n$BASH_VERSION\n\"\n \n]\n;\n \nthen\n\n\n    \n# include .bashrc if it exists\n\n\n    \nif\n \n[\n -f \n\"\n$HOME\n/.bashrc\"\n \n]\n;\n \nthen\n\n\n        . \n\"\n$HOME\n/.bashrc\"\n\n\n    \nfi\n\n\nfi\n\n\n\n\n# set PATH so it includes user's private bin directories\n\n\nPATH\n=\n\"\n$HOME\n/bin:\n$HOME\n/.local/bin:\n$PATH\n\"\n\n\n\n\n\nPreparando o servidor\n\u00b6\n\n\n\n\nTroque o usu\u00e1rio\n\n\nAs configura\u00e7\u00f5es abaixo poder\u00e3o ser feitas com usu\u00e1rio \ndeploy\n pois o mesmo foi criado como adminitrador!!!\n\n\n\n\nEfetue as configura\u00e7\u00f5es de rede para adicionar o endere\u00e7o de IP do servidor.\n\n\nPrimeiro, vamos preparar o ambiente de rede. Para isso, vamos determinar o endere\u00e7o de IP no arquivo \n/etc/host\n\n\n127.0.0.1       localhost\n127.0.1.1       nome_do_server\n192.168.0.IP    nome_do_server\n\n\n\n\nAgora vamos registrar o dominio de busca para que procure na rede interna, alterando o arquivo \nsudo nano /etc/resolvconf/resolv.conf.d/base\n\n\nsearch domain_name.com\n\n\n\n\nAgora rode o comando para aplicar as resolu\u00e7\u00f5es \nsudo resolvconf -u\n\n\nVamos reiniciar os servi\u00e7os de rede e efetuar os testes\n\n\nsudo /etc/init.d/networking restart\n\nnslookup nome_do_server\nnslookup nome_do_server.domain_name.com\n\n\n\n\nPrimeiro o GIT\n\u00b6\n\n\nPara instalar o git rode o comando \nsudo apt-get install git\n\n\nAp\u00f3s isso, vamos efetuar a configura\u00e7\u00e3o das vari\u00e1veis globais\n\n\ngit config --global user.name \n\"Seu Nome\"\n\ngit config --global user.email \n\"seuemail@domain.com\"\n\n\n\n\n\nAgora vamos adicionar uma chave publica para poder efetuar intera\u00e7\u00e3o com os projetos\n\n\nssh-keygen -t rsa -C \n\"email@domain\"\n\n\n\n\n\nCopie a chave (\ncat ~/.ssh/id_rsa.pub\n) para configura\u00e7\u00e3o de SSH na sua conta no reposit\u00f3rio online\n\n\nOracle Client\n\u00b6\n\n\nPara instalar o oracle, baixe os arquivos do oracle.com (instant_client linux_x64_x86 .rpm)\n\n\n\n\nLink para download\n\n\n\n\noracle-instantclient11.2-basic-11.2.0.3.0-1.x86_64.rpm\n\n\noracle-instantclient11.2-devel-11.2.0.4.0-1.x86_64.rpm\n\n\noracle-instantclient11.2-jdbc-11.2.0.4.0-1.x86_64.rpm\n\n\noracle-instantclient11.2-sqlplus-11.2.0.4.0-1.x86_64.rpm\n\n\n\n\n\n\nVamos utilizar o \nalien\n para efetuar a instala\u00e7\u00e3o (\nsudo apt-get install alien\n)\n\n\nsudo apt-get install alien\n\ncd\n diretorio_dos_arquivos.rpm\nsudo alien -i oracle-instantclient11.2-basic-11.2.0.3.0-1.x86_64.rpm\nsudo alien -i oracle-instantclient11.2-devel-11.2.0.4.0-1.x86_64.rpm\nsudo alien -i oracle-instantclient11.2-jdbc-11.2.0.4.0-1.x86_64.rpm\nsudo alien -i oracle-instantclient11.2-sqlplus-11.2.0.4.0-1.x86_64.rpm\n\n\n\n\nAgora, vamos editar as variaveis de ambiente para configurar algumas coisas que o client do oracle necessita. \nnano ~/.profile\n e adicione as seguintes linhas no final do arquivo:\n\n\n...\n\n\n# ORACLE\n\n\nexport\n \nORACLE_HOME\n=\n/usr/lib/oracle/11.2/client64/\n\nexport\n \nLD_LIBRARY_PATH\n=\n/usr/lib/oracle/11.2/client64/lib\n\nexport\n \nPATH\n=\n$PATH\n:\n$ORACLE_HOME\n/bin\n\nexport\n \nTNS_ADMIN\n=\n$ORACLE_HOME\n/network/admin\n\n\n\n\nAgora vamos efetuar as configura\u00e7\u00f5es com o comando \nsource ~/.profile\n\n\nPrecisamos criar o diret\u00f3rio para os apelidos de rede (TNS_ADMIN). \nsudo mkdir -p $TNS_ADMIN\n\n\nE por ultimo, precisamos criar o arquivo de tns (tnsnames.ora). \nsudo touch $TNS_ADMIN/tnsnames.ora\n\n\nEdite o mesmo e cole os nomes de rede atuais\n\n\nAntes de rodar o \nsqlplus\n, precisamos instalar a dependencia do \nlibaio.so\n\n\nsudo apt-get install libaio1 libaio-dev\n\n\n\n\nJavaScript\n\u00b6\n\n\nVamos instalar as dependencias para execu\u00e7\u00f5es dos javascripts\n\n\nPrimeiro, vamos instalar o node\n\n\nsudo apt-get install nodejs npm nodejs-legacy\n\n\n\n\nFeito isso, vamos testar instando dois pacotes ess\u00eanciais.\n\nsudo npm i -g gulp bower\n\n\n\nVerificando se esta tudo certo, rode:\n\n\nbower -v\ngulp -v\n\n\n\n\nPython e VirtualENV\n\u00b6\n\n\nPara n\u00e3o termos problemas de vers\u00f5es do sistema operacional, vamos utilizar o pyenv.\n\n\nAntes de prosseguir a instala\u00e7\u00e3o, precisamos instalar as seguintes depend\u00eancias:\n\n\nsudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils\n\n\n\n\nAgora vamos efetuar a instala\u00e7\u00e3o do pyenv\n\n\nsudo apt-get install git python-pip make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev\npip install virtualenvwrapper\n\ngit clone https://github.com/yyuu/pyenv.git ~/.pyenv\ngit clone https://github.com/yyuu/pyenv-virtualenvwrapper.git ~/.pyenv/plugins/pyenv-virtualenvwrapper\n\n\necho\n \n''\n >> ~/.profile\n\necho\n \n'# PYENV'\n >> ~/.profile\n\necho\n \n'export PYENV_ROOT=\"$HOME/.pyenv\"'\n >> ~/.profile\n\necho\n \n'export PATH=\"$PYENV_ROOT/bin:$PATH\"'\n >> ~/.profile\n\necho\n \n'eval \"$(pyenv init -)\"'\n >> ~/.profile\n\necho\n \n'pyenv virtualenvwrapper'\n >> ~/.profile\n\necho\n \n'export WORKON_HOME=~/virtualenvs'\n>> ~/.profile\n\n\n\n\nAtualize o arquivo com o comando \nsource ~/.profile\n e vamos efetuar a instala\u00e7\u00e3o da vers\u00e3o 3.5.2 do python.\n\n\npyenv install \n3\n.5.2\n\npyenv versions\n* system \n(\nset\n by /root/.pyenv/version\n)\n\n  \n3\n.5.2\n\n\n\n\nPara ativar a vers\u00e3o 3.5.2, vamos utilizar o comando \npyenv global 3.5.2\n\n\nPara verificar, utilize:\n\n\npython -V\nPython \n3\n.5.2\n\n\n\n\nApache\n\u00b6\n\n\nInstalando o apache e configurando o module wsgi\n\n\nInstala\u00e7\u00e3o\n\u00b6\n\n\nsudo apt-get install apache2\nsudo apt-get install libapache2-mod-wsgi-py3\n\ncd\n /etc/apache2/mods-enabled/\nsudo ln -sf ../mods-available/wsgi.conf\nsudo ln -sf ../mods-available/wsgi.load\n\n\n\n\nReinicie o apache \nsudo /etc/init.d/apache2 restart\n\n\nConfigura\u00e7\u00e3o\n\u00b6\n\n\nVamos configurar o o site do projeto (vou usar de exemplo a cota\u00e7\u00e3o web)\n\n\nPrimeiro clonamos o projeto\n\n\ncd\n ~/projects\ngit clone git@gitlab.com:wGalleti/webCotacao.git\n\n\n\n\nAgora que temos o caminho completo do projeto, \n/home/deploy/projects/webCotacao\n, vamos criar o virtualenv e configurar o os direcionamentos.\n\n\nCriando o virtualenv\n\n\npython -m venv .venv\n\nsource\n .venv/bin/activate\npip install --upgrade pip\npip install -r requirements.txt\ncp env_example .env\npython manage.py \ntest\n\n\n\n\n\nSe tudo tiver ok, seu projeto est\u00e1 pronto.\n\n\nAgora vamos configurar o apache para servir essa pasta.\n\n\nsudo nano /etc/apache2/sites-enabled/000-default.conf\n\n\n\n\nVamos deixar o arquivo da seguinte maneira, para servir os arquivos da api (na porta 8000)\n\n\n<VirtualHost *:8000>\n        Alias /static /home/deploy/projects/webCotacao/static\n        <Directory /home/deploy/projects/webCotacao/static >\n            Require all granted\n        </Directory>\n\n        <Directory /home/deploy/projects/webCotacao/cotacao >\n            <Files wsgi.py>\n                Require all granted\n            </Files>\n        </Directory>\n\n        WSGIDaemonProcess cotacaoweb python-home=/home/deploy/projects/webCotacao/.venv python-path=/home/deploy/projects/webCotacao\n        WSGIPassAuthorization On\n        WSGIProcessGroup cotacaoweb\n        WSGIScriptAlias / /home/deploy/projects/webCotacao/cotacao/wsgi.py\n\n        ErrorLog ${APACHE_LOG_DIR}/error_api.log\n        CustomLog ${APACHE_LOG_DIR}/access_api.log combined\n\n</VirtualHost>\n\n\n\n\nE para servir os arquivos stativos (frontend), ficara da seguinte maneira (na porta 80)\n\n\n<VirtualHost *:80>\n        DocumentRoot /home/deploy/projects/webCotacao/frontend/dist\n\n        <Directory /home/deploy/projects/webCotacao/frontend/dist>\n            Options +Indexes\n            DirectoryIndex index.html\n            Require all granted\n        </Directory>\n\n        ErrorLog ${APACHE_LOG_DIR}/error_site.log\n        CustomLog ${APACHE_LOG_DIR}/access_site.log combined\n\n</VirtualHost>\n\n\n\n\nAgora precisamos ativar a porta 8000 no apache.\n\n\nPara isso, adicione abaixo do comando \nListen 80\n o comando \nListen 8000\n no arquivo \n/etc/apache2/ports.conf\n e reinicie o apache \n/etc/init.d/apache2 restart\n\n\nUltimos ajustes\n\u00b6\n\n\nPermiss\u00f5es\n\u00b6\n\n\nEdite o arquivo \nsudo nano /etc/group\n e efetue as sequintes altera\u00e7\u00f5es\n\n\nOnde estiver \nwww-data:x:33:\n ficara \nwww-data:x:33:deploy\n\n\nOnde estiver  \ndeploy:x:1001:\n ficara \ndeploy:x:1001:www-data\n\n\nVari\u00e1veis\n\u00b6\n\n\nPara o apache poder interpretar as libs do \noracle_client\n \u00e9 ness\u00e1rio informar no arquivo \n/etc/apache2/envvars\n as vari\u00e1veis do \noracle\n\n\n# envvars - default environment variables for apache2ctl\n\n\n...\n\n\nexport\n \nORACLE_HOME\n=\n/usr/lib/oracle/11.2/client64/\n\nexport\n \nLD_LIBRARY_PATH\n=\n/usr/lib/oracle/11.2/client64/lib\n\nexport\n \nPATH\n=\n$PATH\n:\n$ORACLE_HOME\n/bin\n\nexport\n \nTNS_ADMIN\n=\n$ORACLE_HOME\n/network/admin\n\n\n\n\nReinicie o apache \nsudo /etc/init.d/apache2 restart\n\n\nExtras\n\u00b6\n\n\nPara facilitar a utiliza\u00e7\u00e3o das ferramentas, vamos implementar as seguintes configura\u00e7\u00f5es no arquivo profile \n~/.profile\n\n\n# Alias\n\n\nalias\n \nactive\n=\n'source .venv/bin/activate'\n \n# ativar vitualenv\n\n\nalias\n \ndeactive\n=\n'source ~/.profile'\n \n# desativar virutalenv\n\n\nalias\n \nmanage\n=\n'python $VIRTUAL_ENV/../manage.py'\n \n# chamar somente manage ao inv\u00e9s de python manage.py\n\n\nalias\n \nsqlplus\n=\n'rlwrap sqlplus'\n \n# poder utilizar ultimos comandos no sqlplus\n\n\n\n\n\nEfetuar as seguintes instala\u00e7\u00f5es \nsudo apt-get install rlwrap nmon htop\n\n\nNMON e HTOP\n\u00b6\n\n\nVamos utilizar essas ferramentas para monitoramento do sistema operacional.\n\n\nO Htop, podemos analisar desempenho de processador, mem\u00f3ria e listar e dar manuten\u00e7\u00e3o de forma bem simples os processo do SO.\n\n\nO Nmon, temos as mesmas analises do Htop, mais analise de discos, redes e etc. N\u00e3o \u00e9 possivel eliminar processos!\n\n\nComandos uteis\n\u00b6\n\n\nReiniciar apache\n\u00b6\n\n\nsudo service apache2 restart\n\n\nLimpara memoria cache\n\u00b6\n\n\n\n\nN\u00e3o \u00e9 necess\u00e1rio reiniciar o micro!!!\n\n\n\n\necho\n \n3\n > /proc/sys/vm/drop_caches\nsysctl -w vm.drop_caches\n=\n3\n\n\n\n\n\nAcompanhar log de erros do apache\n\u00b6\n\n\ntail -f /var/log/apache2/error.log",
            "title": "Ubuntu 16.10 + Apache2 + Python + WSGI + Oracle"
        },
        {
            "location": "/wgalleti.github.io/servidores/apache/python/#ubuntu-1610-apache2-python-wsgi-oracle",
            "text": "Vamos instalar um servidor ubuntu 16.10 para hospedar p\u00e1ginas web desenvolvidas em python com framework django.   Revisado e testado em 2017-06-28",
            "title": "Ubuntu 16.10 + Apache2 + Python + WSGI + Oracle"
        },
        {
            "location": "/wgalleti.github.io/servidores/apache/python/#atulizacao-e-pequenas-correcoes",
            "text": "Antes de come\u00e7ar, vamos resolver o problema de linguagem da vers\u00e3o 16.10  Como  root  apt-get install language-pack-pt\nlocale-gen pt_BR.UTF-8\nreboot  Vamos efetuar as atualiza\u00e7\u00f5es  apt-get update\napt-get upgrade\napt-get dist-upgrade",
            "title": "Atuliza\u00e7\u00e3o e pequenas corre\u00e7\u00f5es"
        },
        {
            "location": "/wgalleti.github.io/servidores/apache/python/#usuarios",
            "text": "Agora criamos o usu\u00e1rio  deploy  useradd -m -d /home/deploy -G adm,www-data,sudo -s /bin/bash deploy\npasswd deploy  S\u00f3 para confirmar, verifique em  /etc/passwd  se ficou dessa forma  deploy:x:1001:1001::/home/deploy:/bin/bash  Agora edite o arquivo  nano /home/deploy/.profile  e verifique se existe as seguinte informa\u00e7\u00f5es  # ~/.profile: executed by the command interpreter for login shells.  # This file is not read by bash(1), if ~/.bash_profile or ~/.bash_login  # exists.  # see /usr/share/doc/bash/examples/startup-files for examples.  # the files are located in the bash-doc package.  # the default umask is set in /etc/profile; for setting the umask  # for ssh logins, install and configure the libpam-umask package.  #umask 022  # if running bash  if   [  -n  \" $BASH_VERSION \"   ] ;   then       # include .bashrc if it exists       if   [  -f  \" $HOME /.bashrc\"   ] ;   then          .  \" $HOME /.bashrc\"       fi  fi   # set PATH so it includes user's private bin directories  PATH = \" $HOME /bin: $HOME /.local/bin: $PATH \"",
            "title": "Usu\u00e1rios"
        },
        {
            "location": "/wgalleti.github.io/servidores/apache/python/#preparando-o-servidor",
            "text": "Troque o usu\u00e1rio  As configura\u00e7\u00f5es abaixo poder\u00e3o ser feitas com usu\u00e1rio  deploy  pois o mesmo foi criado como adminitrador!!!   Efetue as configura\u00e7\u00f5es de rede para adicionar o endere\u00e7o de IP do servidor.  Primeiro, vamos preparar o ambiente de rede. Para isso, vamos determinar o endere\u00e7o de IP no arquivo  /etc/host  127.0.0.1       localhost\n127.0.1.1       nome_do_server\n192.168.0.IP    nome_do_server  Agora vamos registrar o dominio de busca para que procure na rede interna, alterando o arquivo  sudo nano /etc/resolvconf/resolv.conf.d/base  search domain_name.com  Agora rode o comando para aplicar as resolu\u00e7\u00f5es  sudo resolvconf -u  Vamos reiniciar os servi\u00e7os de rede e efetuar os testes  sudo /etc/init.d/networking restart\n\nnslookup nome_do_server\nnslookup nome_do_server.domain_name.com",
            "title": "Preparando o servidor"
        },
        {
            "location": "/wgalleti.github.io/servidores/apache/python/#primeiro-o-git",
            "text": "Para instalar o git rode o comando  sudo apt-get install git  Ap\u00f3s isso, vamos efetuar a configura\u00e7\u00e3o das vari\u00e1veis globais  git config --global user.name  \"Seu Nome\" \ngit config --global user.email  \"seuemail@domain.com\"   Agora vamos adicionar uma chave publica para poder efetuar intera\u00e7\u00e3o com os projetos  ssh-keygen -t rsa -C  \"email@domain\"   Copie a chave ( cat ~/.ssh/id_rsa.pub ) para configura\u00e7\u00e3o de SSH na sua conta no reposit\u00f3rio online",
            "title": "Primeiro o GIT"
        },
        {
            "location": "/wgalleti.github.io/servidores/apache/python/#oracle-client",
            "text": "Para instalar o oracle, baixe os arquivos do oracle.com (instant_client linux_x64_x86 .rpm)   Link para download   oracle-instantclient11.2-basic-11.2.0.3.0-1.x86_64.rpm  oracle-instantclient11.2-devel-11.2.0.4.0-1.x86_64.rpm  oracle-instantclient11.2-jdbc-11.2.0.4.0-1.x86_64.rpm  oracle-instantclient11.2-sqlplus-11.2.0.4.0-1.x86_64.rpm    Vamos utilizar o  alien  para efetuar a instala\u00e7\u00e3o ( sudo apt-get install alien )  sudo apt-get install alien cd  diretorio_dos_arquivos.rpm\nsudo alien -i oracle-instantclient11.2-basic-11.2.0.3.0-1.x86_64.rpm\nsudo alien -i oracle-instantclient11.2-devel-11.2.0.4.0-1.x86_64.rpm\nsudo alien -i oracle-instantclient11.2-jdbc-11.2.0.4.0-1.x86_64.rpm\nsudo alien -i oracle-instantclient11.2-sqlplus-11.2.0.4.0-1.x86_64.rpm  Agora, vamos editar as variaveis de ambiente para configurar algumas coisas que o client do oracle necessita.  nano ~/.profile  e adicione as seguintes linhas no final do arquivo:  ... # ORACLE  export   ORACLE_HOME = /usr/lib/oracle/11.2/client64/ export   LD_LIBRARY_PATH = /usr/lib/oracle/11.2/client64/lib export   PATH = $PATH : $ORACLE_HOME /bin export   TNS_ADMIN = $ORACLE_HOME /network/admin  Agora vamos efetuar as configura\u00e7\u00f5es com o comando  source ~/.profile  Precisamos criar o diret\u00f3rio para os apelidos de rede (TNS_ADMIN).  sudo mkdir -p $TNS_ADMIN  E por ultimo, precisamos criar o arquivo de tns (tnsnames.ora).  sudo touch $TNS_ADMIN/tnsnames.ora  Edite o mesmo e cole os nomes de rede atuais  Antes de rodar o  sqlplus , precisamos instalar a dependencia do  libaio.so  sudo apt-get install libaio1 libaio-dev",
            "title": "Oracle Client"
        },
        {
            "location": "/wgalleti.github.io/servidores/apache/python/#javascript",
            "text": "Vamos instalar as dependencias para execu\u00e7\u00f5es dos javascripts  Primeiro, vamos instalar o node  sudo apt-get install nodejs npm nodejs-legacy  Feito isso, vamos testar instando dois pacotes ess\u00eanciais. sudo npm i -g gulp bower  Verificando se esta tudo certo, rode:  bower -v\ngulp -v",
            "title": "JavaScript"
        },
        {
            "location": "/wgalleti.github.io/servidores/apache/python/#python-e-virtualenv",
            "text": "Para n\u00e3o termos problemas de vers\u00f5es do sistema operacional, vamos utilizar o pyenv.  Antes de prosseguir a instala\u00e7\u00e3o, precisamos instalar as seguintes depend\u00eancias:  sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils  Agora vamos efetuar a instala\u00e7\u00e3o do pyenv  sudo apt-get install git python-pip make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev\npip install virtualenvwrapper\n\ngit clone https://github.com/yyuu/pyenv.git ~/.pyenv\ngit clone https://github.com/yyuu/pyenv-virtualenvwrapper.git ~/.pyenv/plugins/pyenv-virtualenvwrapper echo   ''  >> ~/.profile echo   '# PYENV'  >> ~/.profile echo   'export PYENV_ROOT=\"$HOME/.pyenv\"'  >> ~/.profile echo   'export PATH=\"$PYENV_ROOT/bin:$PATH\"'  >> ~/.profile echo   'eval \"$(pyenv init -)\"'  >> ~/.profile echo   'pyenv virtualenvwrapper'  >> ~/.profile echo   'export WORKON_HOME=~/virtualenvs' >> ~/.profile  Atualize o arquivo com o comando  source ~/.profile  e vamos efetuar a instala\u00e7\u00e3o da vers\u00e3o 3.5.2 do python.  pyenv install  3 .5.2\n\npyenv versions\n* system  ( set  by /root/.pyenv/version ) \n   3 .5.2  Para ativar a vers\u00e3o 3.5.2, vamos utilizar o comando  pyenv global 3.5.2  Para verificar, utilize:  python -V\nPython  3 .5.2",
            "title": "Python e VirtualENV"
        },
        {
            "location": "/wgalleti.github.io/servidores/apache/python/#apache",
            "text": "Instalando o apache e configurando o module wsgi",
            "title": "Apache"
        },
        {
            "location": "/wgalleti.github.io/servidores/apache/python/#instalacao",
            "text": "sudo apt-get install apache2\nsudo apt-get install libapache2-mod-wsgi-py3 cd  /etc/apache2/mods-enabled/\nsudo ln -sf ../mods-available/wsgi.conf\nsudo ln -sf ../mods-available/wsgi.load  Reinicie o apache  sudo /etc/init.d/apache2 restart",
            "title": "Instala\u00e7\u00e3o"
        },
        {
            "location": "/wgalleti.github.io/servidores/apache/python/#configuracao",
            "text": "Vamos configurar o o site do projeto (vou usar de exemplo a cota\u00e7\u00e3o web)  Primeiro clonamos o projeto  cd  ~/projects\ngit clone git@gitlab.com:wGalleti/webCotacao.git  Agora que temos o caminho completo do projeto,  /home/deploy/projects/webCotacao , vamos criar o virtualenv e configurar o os direcionamentos.  Criando o virtualenv  python -m venv .venv source  .venv/bin/activate\npip install --upgrade pip\npip install -r requirements.txt\ncp env_example .env\npython manage.py  test   Se tudo tiver ok, seu projeto est\u00e1 pronto.  Agora vamos configurar o apache para servir essa pasta.  sudo nano /etc/apache2/sites-enabled/000-default.conf  Vamos deixar o arquivo da seguinte maneira, para servir os arquivos da api (na porta 8000)  <VirtualHost *:8000>\n        Alias /static /home/deploy/projects/webCotacao/static\n        <Directory /home/deploy/projects/webCotacao/static >\n            Require all granted\n        </Directory>\n\n        <Directory /home/deploy/projects/webCotacao/cotacao >\n            <Files wsgi.py>\n                Require all granted\n            </Files>\n        </Directory>\n\n        WSGIDaemonProcess cotacaoweb python-home=/home/deploy/projects/webCotacao/.venv python-path=/home/deploy/projects/webCotacao\n        WSGIPassAuthorization On\n        WSGIProcessGroup cotacaoweb\n        WSGIScriptAlias / /home/deploy/projects/webCotacao/cotacao/wsgi.py\n\n        ErrorLog ${APACHE_LOG_DIR}/error_api.log\n        CustomLog ${APACHE_LOG_DIR}/access_api.log combined\n\n</VirtualHost>  E para servir os arquivos stativos (frontend), ficara da seguinte maneira (na porta 80)  <VirtualHost *:80>\n        DocumentRoot /home/deploy/projects/webCotacao/frontend/dist\n\n        <Directory /home/deploy/projects/webCotacao/frontend/dist>\n            Options +Indexes\n            DirectoryIndex index.html\n            Require all granted\n        </Directory>\n\n        ErrorLog ${APACHE_LOG_DIR}/error_site.log\n        CustomLog ${APACHE_LOG_DIR}/access_site.log combined\n\n</VirtualHost>  Agora precisamos ativar a porta 8000 no apache.  Para isso, adicione abaixo do comando  Listen 80  o comando  Listen 8000  no arquivo  /etc/apache2/ports.conf  e reinicie o apache  /etc/init.d/apache2 restart",
            "title": "Configura\u00e7\u00e3o"
        },
        {
            "location": "/wgalleti.github.io/servidores/apache/python/#ultimos-ajustes",
            "text": "",
            "title": "Ultimos ajustes"
        },
        {
            "location": "/wgalleti.github.io/servidores/apache/python/#permissoes",
            "text": "Edite o arquivo  sudo nano /etc/group  e efetue as sequintes altera\u00e7\u00f5es  Onde estiver  www-data:x:33:  ficara  www-data:x:33:deploy  Onde estiver   deploy:x:1001:  ficara  deploy:x:1001:www-data",
            "title": "Permiss\u00f5es"
        },
        {
            "location": "/wgalleti.github.io/servidores/apache/python/#variaveis",
            "text": "Para o apache poder interpretar as libs do  oracle_client  \u00e9 ness\u00e1rio informar no arquivo  /etc/apache2/envvars  as vari\u00e1veis do  oracle  # envvars - default environment variables for apache2ctl \n\n... export   ORACLE_HOME = /usr/lib/oracle/11.2/client64/ export   LD_LIBRARY_PATH = /usr/lib/oracle/11.2/client64/lib export   PATH = $PATH : $ORACLE_HOME /bin export   TNS_ADMIN = $ORACLE_HOME /network/admin  Reinicie o apache  sudo /etc/init.d/apache2 restart",
            "title": "Vari\u00e1veis"
        },
        {
            "location": "/wgalleti.github.io/servidores/apache/python/#extras",
            "text": "Para facilitar a utiliza\u00e7\u00e3o das ferramentas, vamos implementar as seguintes configura\u00e7\u00f5es no arquivo profile  ~/.profile  # Alias  alias   active = 'source .venv/bin/activate'   # ativar vitualenv  alias   deactive = 'source ~/.profile'   # desativar virutalenv  alias   manage = 'python $VIRTUAL_ENV/../manage.py'   # chamar somente manage ao inv\u00e9s de python manage.py  alias   sqlplus = 'rlwrap sqlplus'   # poder utilizar ultimos comandos no sqlplus   Efetuar as seguintes instala\u00e7\u00f5es  sudo apt-get install rlwrap nmon htop",
            "title": "Extras"
        },
        {
            "location": "/wgalleti.github.io/servidores/apache/python/#nmon-e-htop",
            "text": "Vamos utilizar essas ferramentas para monitoramento do sistema operacional.  O Htop, podemos analisar desempenho de processador, mem\u00f3ria e listar e dar manuten\u00e7\u00e3o de forma bem simples os processo do SO.  O Nmon, temos as mesmas analises do Htop, mais analise de discos, redes e etc. N\u00e3o \u00e9 possivel eliminar processos!",
            "title": "NMON e HTOP"
        },
        {
            "location": "/wgalleti.github.io/servidores/apache/python/#comandos-uteis",
            "text": "",
            "title": "Comandos uteis"
        },
        {
            "location": "/wgalleti.github.io/servidores/apache/python/#reiniciar-apache",
            "text": "sudo service apache2 restart",
            "title": "Reiniciar apache"
        },
        {
            "location": "/wgalleti.github.io/servidores/apache/python/#limpara-memoria-cache",
            "text": "N\u00e3o \u00e9 necess\u00e1rio reiniciar o micro!!!   echo   3  > /proc/sys/vm/drop_caches\nsysctl -w vm.drop_caches = 3",
            "title": "Limpara memoria cache"
        },
        {
            "location": "/wgalleti.github.io/servidores/apache/python/#acompanhar-log-de-erros-do-apache",
            "text": "tail -f /var/log/apache2/error.log",
            "title": "Acompanhar log de erros do apache"
        },
        {
            "location": "/wgalleti.github.io/servidores/nginx/php/",
            "text": "Ubuntu + Nginx + PHP + PHP-fpm + Oracle\n\u00b6\n\n\nPrimeiro vale lembrar que esse \u00e9 mais um guia do que um tutorial!\n\n\n\n\nRevisado e testado em 2017-12-06\n\n\n\n\nPreparando servidor\n\u00b6\n\n\nCriando usu\u00e1rio\n\u00b6\n\n\n\n\nRevisado e testado em 2017-12-06\n\n\n\n\nuseradd -m -d /home/deploy -G adm,www-data,sudo -s /bin/bash deploy\npasswd deploy\n\n\n\n\nPara confirmar as pemiss\u00f5es, verifique o arquivo \n/etc/passwd\n\n\ndeploy:x:1001:1001::/home/deploy:/bin/bash\n\n\n\n\nVerifique se o arquivo /home/deploy/.profile est\u00e1 com as seguintes informa\u00e7\u00f5es\n\n\n# ~/.profile: executed by the command interpreter for login shells.\n\n\n# This file is not read by bash(1), if ~/.bash_profile or ~/.bash_login\n\n\n# exists.\n\n\n# see /usr/share/doc/bash/examples/startup-files for examples.\n\n\n# the files are located in the bash-doc package.\n\n\n\n# the default umask is set in /etc/profile; for setting the umask\n\n\n# for ssh logins, install and configure the libpam-umask package.\n\n\n#umask 022\n\n\n\n# if running bash\n\n\nif\n \n[\n -n \n\"\n$BASH_VERSION\n\"\n \n]\n;\n \nthen\n\n\n    \n# include .bashrc if it exists\n\n\n    \nif\n \n[\n -f \n\"\n$HOME\n/.bashrc\"\n \n]\n;\n \nthen\n\n\n        . \n\"\n$HOME\n/.bashrc\"\n\n\n    \nfi\n\n\nfi\n\n\n\n\n# set PATH so it includes user's private bin directories\n\n\nPATH\n=\n\"\n$HOME\n/bin:\n$HOME\n/.local/bin:\n$PATH\n\"\n\n\n\n\n\nRede\n\u00b6\n\n\n\n\nTroque o usu\u00e1rio\n\n\nAs configura\u00e7\u00f5es abaixo poder\u00e3o ser feitas com usu\u00e1rio \ndeploy\n pois o mesmo foi criado como adminitrador!!!\n\n\n\n\nAdicionando dns e dominio de busca\n\n\nsudo nano /etc/resolvconf/resolv.conf.d/tail\n\n-- Add\nnameserver \n192\n.168.0.16\nsearch gruposcheffer.com\n\n\n\n\nGit\n\u00b6\n\n\nPrimeiro vamo configurar o git. Para isso vamos criar a chave ssh e configurar o usu\u00e1rio e email global\n\n\nVamos Gerar a Chave\n\n\nssh-keygen -t rsa -C \n\"email@dominio.com\"\n\n\nGenerating public/private rsa key pair.\nEnter file in which to save the key \n(\n/home/deploy/.ssh/id_rsa\n)\n:\n[\nEnter\n]\n\nCreated directory \n'/home/deploy/.ssh'\n.\nEnter passphrase \n(\nempty \nfor\n no passphrase\n)\n:\n[\nSenha\n]\n\nEnter same passphrase again:\n[\nRepete a Senha\n]\n\nYour identification has been saved in /home/deploy/.ssh/id_rsa.\nYour public key has been saved in /home/deploy/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256:***************************** ti@gruposcheffer.com.br\n\n\n\n\nAplique a chave no seu servidor de vers\u00f5es (gitlab, ou github)\n\n\nConfigurando usu\u00e1rio global\n\n\ngit config --global user.name \n\"Seu Nome\"\n\ngit config --global user.email \n\"email@dominio.com\"\n\n\n\n\n\nOracle\n\u00b6\n\n\n\n\nObs\n\n\nEssa foi a forma mais rapida de instalar e configurar o oracle no ubuntu!!!\n\n\n\n\nRefer\u00eancia\n \nhttps://help.ubuntu.com/community/Oracle%20Instant%20Client\n\n\nBaixe os rpm's do site \nhttp://www.oracle.com/technetwork/topics/linuxx86-64soft-092277.html\n e de permiss\u00e3o de execu\u00e7\u00e3o nos mesmos.\n\n\nPS\n: basic, sqlplus, devel\n\n\nPara efetuar a instala\u00e7\u00e3o, vamos usar o alien\n\n\nsudo apt-get install alien libaio1 libaio1:i386\n\nsudo alien -i oracle-instantclient12.2-basic-12.2.0.1.0-1.x86_64.rpm\nsudo alien -i oracle-instantclient12.2-devel-12.2.0.1.0-1.x86_64.rpm\nsudo alien -i oracle-instantclient12.2-sqlplus-12.2.0.1.0-1.x86_64.rpm\n\n \necho\n \n'export LD_LIBRARY_PATH=/usr/lib/oracle/12.2/client64/lib/${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}'\n >> ~/.profile\n\n sudo vi /etc/ld.so.conf.d/oracle.conf \n&&\n sudo chmod o+r /etc/ld.so.conf.d/oracle.conf\n\n\n# Add This on /etc/ld.so.conf.d/oracle.conf\n\n /usr/lib/oracle/12.2/client64/lib/\nsudo ldconfig\n\n\necho\n \n'export ORACLE_HOME=/usr/lib/oracle/12.2/client64'\n >> ~/.profile\n\necho\n \n'export TNS_ADMIN=$ORACLE_HOME/network/admin'\n >> ~/.profile\n\necho\n \n'export PATH=$PATH:$ORACLE_HOME/bin'\n >> ~/.profile\n\n\nsource\n ~/.profile\n\nmkdir -p \n$TNS_ADMIN\n\nsudo touch \n$TNS_ADMIN\n/tnsnames.ora\nsudo chmod o+r \n$TNS_ADMIN\n/tnsnames.ora\n\n\n\n\nLDConfig\n\n\nsudo vi /etc/ld.so.conf.d/oracle.conf\n\n\nAdicione o camino \n/usr/lib/oracle/12.2/client64/lib\n e salve o arquivo. Ap\u00f3s isso, recarregue as configura\u00e7\u00f5es com \nsudo ldconfig\n\n\nAdicione os tns no arquivo tnsnames.ora e feito!\n\n\nBackend\n\u00b6\n\n\nDependencias\n\n\nsudo add-apt-repository ppa:ondrej/php\nsudo apt-get install software-properties-common\nsudo apt-get update\n\n\n\n\nPHP 5.6\n\u00b6\n\n\nInstalando o PHP\n\n\nsudo apt-get install php5.6 php5.6-dev php5.6-dev php5.6-fpm php5.6-xml\n\n\n\n\nVamos deixar o servi\u00e7o do \nfpm\n para inicializar junto com o SO\n\n\nsudo chkconfig php-fpm on\n\n\n\n\nAgora vamos instalar o oci8\n\n\n\n\nRecomenta\u00e7\u00e3o da pecl\n\n\nUse the OCI8 extension to access Oracle Database. Use 'pecl install oci8' to install for PHP 7. Use 'pecl install oci8-2.0.12' to install for PHP 5.2 - PHP 5.6. Use  pecl install oci8-1.4.10' to install for PHP 4.3.9 - PHP 5.1. The OCI8 extension can be linked with Oracle client libraries from Oracle Database 12, 11, or 10.2. These libraries are found in your database installation, or in the free Oracle Instant Client from \nhttp://www.oracle.com/technetwork/database/features/instant-client/\n.\n\nOracle's standard cross-version connectivity applies. For example, PHP OCI8 linked with Instant Client 11.2 can connect to Oracle Database 9.2 onward. See Oracle's note \"Oracle Client / Server Interoperability Support\" (ID 207303.1) for details.\n\n\n\n\nsudo pecl download oci8-1.4.10\ntar zxvf oci8-1.4.10.tgz\n\ncd\n oci8-1.4.10\nphpize\n./configure --with-oci8\n=\ninstantclient,\n$ORACLE_HOME\n/lib\nsudo make install\n\n\n\n\nCaso tudo correto, vamos habilitar a lib no \nphp-cli\n e  \nphp-fpm\n\n\nPrimeiro, vamos criar a configura\u00e7\u00e3o da lib\n\ncd\n /etc/php/5.6/mods-available\nsudo vi oci.ini\n\n\n\nDentro do arquivo, informe o conteudo:\n\nextension=oci8.so\n\n\n\nSalve o arquivo e vamos ativar as extens\u00f5es\n\n\nPHP-Cli\n\u00b6\n\n\ncd\n /etc/php/5.6/cli/conf.d/\nsudo ln -s /etc/php/5.6/mods-available/oci.ini \n20\n-oci.ini\n\n\n\n\nTeste com o comando para verificar se a extens\u00e3o esta ativa\n\n\nphp -i \n|\n grep oci8\n\n\n\n\nPHP-Fpm\n\u00b6\n\n\ncd\n /etc/php/5.6/fpm/conf.d/\nsudo ln -s /etc/php/5.6/mods-available/oci.ini \n20\n-oci.ini\n\n\n\n\nnginx\n\u00b6\n\n\nVamos instalar o servidor nginx:\n\n\nsudo apt-get install nginx\n\n\n\n\nAp\u00f3s instalado, acesse o diretorio \ncd /etc/nginx/sites-avaliable\n\n\nVamos criar a configura\u00e7\u00e3o \ntouch php.conf\n\n\nPHP\n\u00b6\n\n\nImportante ter o dns configurado para utiliza\u00e7\u00e3o de nomes (exemplo: php.seudominio.com)\n\n\n# php.conf\n\n\nserver \n{\n\n    listen \n80\n;\n\n    server_name php.seudominio.com\n;\n\n\n    root /home/deploy/projects/php\n;\n\n\n    index index.php index.html\n;\n\n\n    location ~ \n\\.\nphp$ \n{\n\n        fastcgi_pass unix:/var/run/php/php5.6-fpm.sock\n;\n\n        fastcgi_param SCRIPT_FILENAME \n$document_root$fastcgi_script_name\n;\n\n        include fastcgi_params\n;\n                \n    \n}\n\n\n}\n\n\n\n\n\nCODEIGNITER\n\u00b6\n\n\nImportante ter o dns configurado para utiliza\u00e7\u00e3o de nomes (exemplo: php.seudominio.com)\n\n\n# php.conf\n\n\nserver \n{\n\n    listen \n80\n;\n\n    server_name php.seudominio.com\n;\n\n\n    root /home/deploy/projects/php\n;\n\n\n    index index.php index.html\n;\n\n\n    location / \n{\n\n        try_files \n$uri\n \n$uri\n/ /index.php\n;\n\n\n        \nlocation\n \n=\n /index.php \n{\n\n\n            fastcgi_pass unix:/var/run/php/php5.6-fpm.sock\n;\n\n            fastcgi_param SCRIPT_FILENAME /home/deploy/projects/php\n$fastcgi_script_name\n;\n\n            include fastcgi_params\n;\n\n        \n}\n\n    \n}\n\n\n\n}\n\n\n\n\n\nFeito isso vamos ativar o site e reiniciar o nginx\n\n\nsudo ln -s /etc/nginx/sites-avaliable/php.conf /etc/nginx/sites-enable/\nsudo /etc/init.d/nginx restart\n\n\n\n\nPara testar, abra o navegador e acesse o endere\u00e7o \nphp.seudominio.com\n\n\nLinks\n\u00b6\n\n\n\n\nhttps://www.digitalocean.com/community/tutorials/como-instalar-linux-nginx-mysql-php-pilha-lemp-no-ubuntu-16-04-pt\n\n\nhttps://askubuntu.com/questions/927026/install-php-fpm-5-6-on-ubuntu-xenial-16-04\n\n\nhttps://rosemberg.net.br/pt/instalando-pdo-oracle-e-oci8-do-php7-no-ubuntumint-oracle-11-2/",
            "title": "Ubuntu + Nginx + PHP + PHP-fpm + Oracle"
        },
        {
            "location": "/wgalleti.github.io/servidores/nginx/php/#ubuntu-nginx-php-php-fpm-oracle",
            "text": "Primeiro vale lembrar que esse \u00e9 mais um guia do que um tutorial!   Revisado e testado em 2017-12-06",
            "title": "Ubuntu + Nginx + PHP + PHP-fpm + Oracle"
        },
        {
            "location": "/wgalleti.github.io/servidores/nginx/php/#preparando-servidor",
            "text": "",
            "title": "Preparando servidor"
        },
        {
            "location": "/wgalleti.github.io/servidores/nginx/php/#criando-usuario",
            "text": "Revisado e testado em 2017-12-06   useradd -m -d /home/deploy -G adm,www-data,sudo -s /bin/bash deploy\npasswd deploy  Para confirmar as pemiss\u00f5es, verifique o arquivo  /etc/passwd  deploy:x:1001:1001::/home/deploy:/bin/bash  Verifique se o arquivo /home/deploy/.profile est\u00e1 com as seguintes informa\u00e7\u00f5es  # ~/.profile: executed by the command interpreter for login shells.  # This file is not read by bash(1), if ~/.bash_profile or ~/.bash_login  # exists.  # see /usr/share/doc/bash/examples/startup-files for examples.  # the files are located in the bash-doc package.  # the default umask is set in /etc/profile; for setting the umask  # for ssh logins, install and configure the libpam-umask package.  #umask 022  # if running bash  if   [  -n  \" $BASH_VERSION \"   ] ;   then       # include .bashrc if it exists       if   [  -f  \" $HOME /.bashrc\"   ] ;   then          .  \" $HOME /.bashrc\"       fi  fi   # set PATH so it includes user's private bin directories  PATH = \" $HOME /bin: $HOME /.local/bin: $PATH \"",
            "title": "Criando usu\u00e1rio"
        },
        {
            "location": "/wgalleti.github.io/servidores/nginx/php/#rede",
            "text": "Troque o usu\u00e1rio  As configura\u00e7\u00f5es abaixo poder\u00e3o ser feitas com usu\u00e1rio  deploy  pois o mesmo foi criado como adminitrador!!!   Adicionando dns e dominio de busca  sudo nano /etc/resolvconf/resolv.conf.d/tail\n\n-- Add\nnameserver  192 .168.0.16\nsearch gruposcheffer.com",
            "title": "Rede"
        },
        {
            "location": "/wgalleti.github.io/servidores/nginx/php/#git",
            "text": "Primeiro vamo configurar o git. Para isso vamos criar a chave ssh e configurar o usu\u00e1rio e email global  Vamos Gerar a Chave  ssh-keygen -t rsa -C  \"email@dominio.com\" \n\nGenerating public/private rsa key pair.\nEnter file in which to save the key  ( /home/deploy/.ssh/id_rsa ) : [ Enter ] \nCreated directory  '/home/deploy/.ssh' .\nEnter passphrase  ( empty  for  no passphrase ) : [ Senha ] \nEnter same passphrase again: [ Repete a Senha ] \nYour identification has been saved in /home/deploy/.ssh/id_rsa.\nYour public key has been saved in /home/deploy/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256:***************************** ti@gruposcheffer.com.br  Aplique a chave no seu servidor de vers\u00f5es (gitlab, ou github)  Configurando usu\u00e1rio global  git config --global user.name  \"Seu Nome\" \ngit config --global user.email  \"email@dominio.com\"",
            "title": "Git"
        },
        {
            "location": "/wgalleti.github.io/servidores/nginx/php/#oracle",
            "text": "Obs  Essa foi a forma mais rapida de instalar e configurar o oracle no ubuntu!!!   Refer\u00eancia   https://help.ubuntu.com/community/Oracle%20Instant%20Client  Baixe os rpm's do site  http://www.oracle.com/technetwork/topics/linuxx86-64soft-092277.html  e de permiss\u00e3o de execu\u00e7\u00e3o nos mesmos.  PS : basic, sqlplus, devel  Para efetuar a instala\u00e7\u00e3o, vamos usar o alien  sudo apt-get install alien libaio1 libaio1:i386\n\nsudo alien -i oracle-instantclient12.2-basic-12.2.0.1.0-1.x86_64.rpm\nsudo alien -i oracle-instantclient12.2-devel-12.2.0.1.0-1.x86_64.rpm\nsudo alien -i oracle-instantclient12.2-sqlplus-12.2.0.1.0-1.x86_64.rpm\n\n  echo   'export LD_LIBRARY_PATH=/usr/lib/oracle/12.2/client64/lib/${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}'  >> ~/.profile\n\n sudo vi /etc/ld.so.conf.d/oracle.conf  &&  sudo chmod o+r /etc/ld.so.conf.d/oracle.conf # Add This on /etc/ld.so.conf.d/oracle.conf \n /usr/lib/oracle/12.2/client64/lib/\nsudo ldconfig echo   'export ORACLE_HOME=/usr/lib/oracle/12.2/client64'  >> ~/.profile echo   'export TNS_ADMIN=$ORACLE_HOME/network/admin'  >> ~/.profile echo   'export PATH=$PATH:$ORACLE_HOME/bin'  >> ~/.profile source  ~/.profile\n\nmkdir -p  $TNS_ADMIN \nsudo touch  $TNS_ADMIN /tnsnames.ora\nsudo chmod o+r  $TNS_ADMIN /tnsnames.ora  LDConfig  sudo vi /etc/ld.so.conf.d/oracle.conf \nAdicione o camino  /usr/lib/oracle/12.2/client64/lib  e salve o arquivo. Ap\u00f3s isso, recarregue as configura\u00e7\u00f5es com  sudo ldconfig  Adicione os tns no arquivo tnsnames.ora e feito!",
            "title": "Oracle"
        },
        {
            "location": "/wgalleti.github.io/servidores/nginx/php/#backend",
            "text": "Dependencias  sudo add-apt-repository ppa:ondrej/php\nsudo apt-get install software-properties-common\nsudo apt-get update",
            "title": "Backend"
        },
        {
            "location": "/wgalleti.github.io/servidores/nginx/php/#php-56",
            "text": "Instalando o PHP  sudo apt-get install php5.6 php5.6-dev php5.6-dev php5.6-fpm php5.6-xml  Vamos deixar o servi\u00e7o do  fpm  para inicializar junto com o SO  sudo chkconfig php-fpm on  Agora vamos instalar o oci8   Recomenta\u00e7\u00e3o da pecl  Use the OCI8 extension to access Oracle Database. Use 'pecl install oci8' to install for PHP 7. Use 'pecl install oci8-2.0.12' to install for PHP 5.2 - PHP 5.6. Use  pecl install oci8-1.4.10' to install for PHP 4.3.9 - PHP 5.1. The OCI8 extension can be linked with Oracle client libraries from Oracle Database 12, 11, or 10.2. These libraries are found in your database installation, or in the free Oracle Instant Client from  http://www.oracle.com/technetwork/database/features/instant-client/ . \nOracle's standard cross-version connectivity applies. For example, PHP OCI8 linked with Instant Client 11.2 can connect to Oracle Database 9.2 onward. See Oracle's note \"Oracle Client / Server Interoperability Support\" (ID 207303.1) for details.   sudo pecl download oci8-1.4.10\ntar zxvf oci8-1.4.10.tgz cd  oci8-1.4.10\nphpize\n./configure --with-oci8 = instantclient, $ORACLE_HOME /lib\nsudo make install  Caso tudo correto, vamos habilitar a lib no  php-cli  e   php-fpm  Primeiro, vamos criar a configura\u00e7\u00e3o da lib cd  /etc/php/5.6/mods-available\nsudo vi oci.ini  Dentro do arquivo, informe o conteudo: extension=oci8.so  Salve o arquivo e vamos ativar as extens\u00f5es",
            "title": "PHP 5.6"
        },
        {
            "location": "/wgalleti.github.io/servidores/nginx/php/#php-cli",
            "text": "cd  /etc/php/5.6/cli/conf.d/\nsudo ln -s /etc/php/5.6/mods-available/oci.ini  20 -oci.ini  Teste com o comando para verificar se a extens\u00e3o esta ativa  php -i  |  grep oci8",
            "title": "PHP-Cli"
        },
        {
            "location": "/wgalleti.github.io/servidores/nginx/php/#php-fpm",
            "text": "cd  /etc/php/5.6/fpm/conf.d/\nsudo ln -s /etc/php/5.6/mods-available/oci.ini  20 -oci.ini",
            "title": "PHP-Fpm"
        },
        {
            "location": "/wgalleti.github.io/servidores/nginx/php/#nginx",
            "text": "Vamos instalar o servidor nginx:  sudo apt-get install nginx  Ap\u00f3s instalado, acesse o diretorio  cd /etc/nginx/sites-avaliable  Vamos criar a configura\u00e7\u00e3o  touch php.conf",
            "title": "nginx"
        },
        {
            "location": "/wgalleti.github.io/servidores/nginx/php/#php",
            "text": "Importante ter o dns configurado para utiliza\u00e7\u00e3o de nomes (exemplo: php.seudominio.com)  # php.conf \n\nserver  { \n    listen  80 ; \n    server_name php.seudominio.com ; \n\n    root /home/deploy/projects/php ; \n\n    index index.php index.html ; \n\n    location ~  \\. php$  { \n        fastcgi_pass unix:/var/run/php/php5.6-fpm.sock ; \n        fastcgi_param SCRIPT_FILENAME  $document_root$fastcgi_script_name ; \n        include fastcgi_params ;                 \n     }  }",
            "title": "PHP"
        },
        {
            "location": "/wgalleti.github.io/servidores/nginx/php/#codeigniter",
            "text": "Importante ter o dns configurado para utiliza\u00e7\u00e3o de nomes (exemplo: php.seudominio.com)  # php.conf \n\nserver  { \n    listen  80 ; \n    server_name php.seudominio.com ; \n\n    root /home/deploy/projects/php ; \n\n    index index.php index.html ; \n\n    location /  { \n        try_files  $uri   $uri / /index.php ; \n\n         location   =  /index.php  { \n\n            fastcgi_pass unix:/var/run/php/php5.6-fpm.sock ; \n            fastcgi_param SCRIPT_FILENAME /home/deploy/projects/php $fastcgi_script_name ; \n            include fastcgi_params ; \n         } \n     }  }   Feito isso vamos ativar o site e reiniciar o nginx  sudo ln -s /etc/nginx/sites-avaliable/php.conf /etc/nginx/sites-enable/\nsudo /etc/init.d/nginx restart  Para testar, abra o navegador e acesse o endere\u00e7o  php.seudominio.com",
            "title": "CODEIGNITER"
        },
        {
            "location": "/wgalleti.github.io/servidores/nginx/php/#links",
            "text": "https://www.digitalocean.com/community/tutorials/como-instalar-linux-nginx-mysql-php-pilha-lemp-no-ubuntu-16-04-pt  https://askubuntu.com/questions/927026/install-php-fpm-5-6-on-ubuntu-xenial-16-04  https://rosemberg.net.br/pt/instalando-pdo-oracle-e-oci8-do-php7-no-ubuntumint-oracle-11-2/",
            "title": "Links"
        },
        {
            "location": "/wgalleti.github.io/servidores/nginx/python/",
            "text": "Ubuntu + Nginx + uwsgi + supervisor para Django\n\u00b6\n\n\nPrimeiro vale lembrar que esse \u00e9 mais um guia do que um tutorial!\n\n\n\n\nRevisado e testado em 2017-09-28\n\n\n\n\nAgradecimentos\n\u00b6\n\n\nAntes de mais nada, agradecer a galera que me ajudaram muito!!! \n\n\nValeu mo\u00e7ada!!!\n\n\n\n\nAlessandro Folk\n\n\nRodrigo Rodrigues (grupo ngMasters)\n\n\nRomulo (grupo ngMasters)\n\n\n\n\nPreparando servidor\n\u00b6\n\n\nCriando usu\u00e1rio\n\u00b6\n\n\nuseradd -m -d /home/deploy -G adm,www-data,sudo -s /bin/bash deploy\npasswd deploy\n\n\n\n\nPara confirmar as pemiss\u00f5es, verifique o arquivo \n/etc/passwd\n\n\ndeploy:x:1001:1001::/home/deploy:/bin/bash\n\n\n\n\nVerifique se o arquivo /home/deploy/.profile est\u00e1 com as seguintes informa\u00e7\u00f5es\n\n\n# ~/.profile: executed by the command interpreter for login shells.\n\n\n# This file is not read by bash(1), if ~/.bash_profile or ~/.bash_login\n\n\n# exists.\n\n\n# see /usr/share/doc/bash/examples/startup-files for examples.\n\n\n# the files are located in the bash-doc package.\n\n\n\n# the default umask is set in /etc/profile; for setting the umask\n\n\n# for ssh logins, install and configure the libpam-umask package.\n\n\n#umask 022\n\n\n\n# if running bash\n\n\nif\n \n[\n -n \n\"\n$BASH_VERSION\n\"\n \n]\n;\n \nthen\n\n\n    \n# include .bashrc if it exists\n\n\n    \nif\n \n[\n -f \n\"\n$HOME\n/.bashrc\"\n \n]\n;\n \nthen\n\n\n        . \n\"\n$HOME\n/.bashrc\"\n\n\n    \nfi\n\n\nfi\n\n\n\n\n# set PATH so it includes user's private bin directories\n\n\nPATH\n=\n\"\n$HOME\n/bin:\n$HOME\n/.local/bin:\n$PATH\n\"\n\n\n\n\n\nRede\n\u00b6\n\n\n\n\nTroque o usu\u00e1rio\n\n\nAs configura\u00e7\u00f5es abaixo poder\u00e3o ser feitas com usu\u00e1rio \ndeploy\n pois o mesmo foi criado como adminitrador!!!\n\n\n\n\nAdicionando dns e dominio de busca\n\n\nsudo nano /etc/resolvconf/resolv.conf.d/tail\n\n-- Add\nnameserver \n192\n.168.0.16\nsearch gruposcheffer.com\n\n\n\n\nGit\n\u00b6\n\n\nPrimeiro vamo configurar o git. Para isso vamos criar a chave ssh e configurar o usu\u00e1rio e email global\n\n\nVamos Gerar a Chave\n\n\nssh-keygen -t rsa -C \n\"email@dominio.com\"\n\n\nGenerating public/private rsa key pair.\nEnter file in which to save the key \n(\n/home/deploy/.ssh/id_rsa\n)\n:\n[\nEnter\n]\n\nCreated directory \n'/home/deploy/.ssh'\n.\nEnter passphrase \n(\nempty \nfor\n no passphrase\n)\n:\n[\nSenha\n]\n\nEnter same passphrase again:\n[\nRepete a Senha\n]\n\nYour identification has been saved in /home/deploy/.ssh/id_rsa.\nYour public key has been saved in /home/deploy/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256:***************************** ti@gruposcheffer.com.br\n\n\n\n\nAplique a chave no seu servidor de vers\u00f5es (gitlab, ou github)\n\n\nConfigurando usu\u00e1rio global\n\n\ngit config --global user.name \n\"Seu Nome\"\n\ngit config --global user.email \n\"email@dominio.com\"\n\n\n\n\n\nOracle\n\u00b6\n\n\n\n\nObs\n\n\nEssa foi a forma mais rapida de instalar e configurar o oracle no ubuntu!!!\n\n\n\n\nRefer\u00eancia\n \nhttps://help.ubuntu.com/community/Oracle%20Instant%20Client\n\n\nBaixe os rpm's do site \nhttp://www.oracle.com/technetwork/topics/linuxx86-64soft-092277.html\n e de permiss\u00e3o de execu\u00e7\u00e3o nos mesmos.\n\n\nPS\n: basic, sqlplus, devel\n\n\nPara efetuar a instala\u00e7\u00e3o, vamos usar o alien\n\n\nsudo apt-get install alien libaio1 libaio1:i386\n\nsudo alien -i oracle-instantclient12.2-basic-12.2.0.1.0-1.x86_64.rpm\nsudo alien -i oracle-instantclient12.2-devel-12.2.0.1.0-1.x86_64.rpm\nsudo alien -i oracle-instantclient12.2-sqlplus-12.2.0.1.0-1.x86_64.rpm\n\n \necho\n \n'export LD_LIBRARY_PATH=/usr/lib/oracle/12.2/client64/lib/${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}'\n >> ~/.profile\n\n sudo vi /etc/ld.so.conf.d/oracle.conf \n&&\n sudo chmod o+r /etc/ld.so.conf.d/oracle.conf\n\n\n# Add This on /etc/ld.so.conf.d/oracle.conf\n\n /usr/lib/oracle/12.2/client64/lib/\nsudo ldconfig\n\n\necho\n \n'export ORACLE_HOME=/usr/lib/oracle/12.2/client64'\n >> ~/.profile\n\necho\n \n'export TNS_ADMIN=$ORACLE_HOME/network/admin'\n >> ~/.profile\n\necho\n \n'export PATH=$PATH:$ORACLE_HOME/bin'\n >> ~/.profile\n\n\nsource\n ~/.profile\n\nmkdir -p \n$TNS_ADMIN\n\nsudo touch \n$TNS_ADMIN\n/tnsnames.ora\nsudo chmod o+r \n$TNS_ADMIN\n/tnsnames.ora\n\n\n\n\nAdicione os tns no arquivo tnsnames.ora e feito!\n\n\nFrontend\n\u00b6\n\n\nVamos instalar o node 6 e npm para depois adicionar as libs de frontend\n\n\nsudo apt install python-software-properties\ncurl -sL https://deb.nodesource.com/setup_6.x \n|\n sudo -E bash -\nsudo apt-get install nodejs\n\n~$ node -v\nv4.2.6\n~$ npm -v\n\n3\n.5.2\n\n\n\n\nAgora vamos preparar algumas libs para o frontend (compila\u00e7\u00e3o)\n\n\nsudo npm i -g bower gulp yarn @angular/cli\n\n~$ bower -v\n\n1\n.8.2\n~$ yarn -v\n\n1\n.1.0\n~$ gulp -v\n\n[\n11\n:08:52\n]\n CLI version \n3\n.9.1\n\n\n\n\nBackend\n\u00b6\n\n\nDependencias\n\n\nsudo apt-get install build-essential libssl-dev libffi-dev python3-dev\n\n\n\n\nInstalando o pyenv\n\n\nsudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev \n\\\n\nlibreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev \n\\\n\nxz-utils tk-dev\n\ngit clone https://github.com/pyenv/pyenv.git ~/.pyenv\n\necho\n \n'export PYENV_ROOT=\"$HOME/.pyenv\"'\n >> ~/.profile\n\necho\n \n'export PATH=\"$PYENV_ROOT/bin:$PATH\"'\n >> ~/.profile\n\necho\n -e \n'if command -v pyenv 1>/dev/null 2>&1; then\\n  eval \"$(pyenv init -)\"\\nfi'\n >> ~/.profile\n\n\n\n\nVamos instalar o python 3.6.2\n\n\npyenv install \n3\n.6.2\npyenv global \n3\n.6.2\npython -V\n\n\n\n\nuWsgi\n\u00b6\n\n\nPS: Caso esteja com virtualenv ativo, desative o mesmo \ndeactive\n\n\nInstale o uwsgi\n\n\npip install uwsgi\n\n\n\n\nPrecisamos configurar um arquivo de uwsgi para cada projeto.\n\n\nNesse exemplo vamos utilizar as seguintes propriedades:\n\n\n\n\nsocket: Arquivo que ser\u00e1 gerado o socket para comunica\u00e7\u00e3o \n\n\nmaster: Ativar Processos master\n\n\nwsgi-file: Arquivo uwsgi do projeto django\n\n\nprocesses: Quantidade de Processos\n\n\nenable-threads: Ativar Threads\n\n\nthreads: Quantidades de threads por processo\n\n\nmax_requests: Maximo de requisi\u00e7\u00f5es\n\n\nharakiri: \n\n\nstats: status do socket\n\n\nstats-http: mostra status no http\n\n\nuid: usu\u00e1rio do SO\n\n\ngid: grupo do SO\n\n\nchmod-socket: permiss\u00e3o do Socket\n\n\nchdir: diretorio raiz do projeto\n\n\nhome: diretorio do virutalenv\n\n\nlogger: arquivo de log\n\n\nvacuum: Limpar ao fechar\n\n\nignore-write-errors: Ignorar escrita de erros\n\n\ndisable-write-exception: Desativar escrita de exce\u00e7\u00f5es\n\n\n\n\nNosso arquivo de exemplo que ficara no projeto1 (\nraiz do projeto/uwsgi.ini\n), ficar\u00e1 com a seguinte estrutura:\n\n\n[uwsgi]\n\n\nsocket\n \n=\n \nprojeto1.sock\n\n\nmaster\n \n=\n \ntrue\n\n\nwsgi-file\n \n=\n \nprojeto1/wsgi.py\n\n\nprocesses\n \n=\n \n2\n\n\nenable-threads\n \n=\n \ntrue\n\n\nthreads\n \n=\n \n10\n\n\nmax_requests\n \n=\n \n100\n\n\nharakiri\n \n=\n \n60\n\n\nstats\n \n=\n \n127.0.0.1:9191\n\n\nstats-http\n \n=\n \ntrue\n\n\nuid\n \n=\n \nwww-data\n\n\ngid\n \n=\n \nwww-data\n\n\nchmod-socket\n \n=\n \n666\n\n\nchdir\n \n=\n \n/home/deploy/projects/projeto1\n\n\nhome\n \n=\n \n/home/deploy/projects/projeto1/.venv/\n\n\nlogger\n \n=\n \nfile:/home/deploy/projects/projeto1/logs/uwsgi.log\n\n\nvacuum\n \n=\n \ntrue\n\n\nignore-write-errors\n \n=\n \ntrue\n\n\ndisable-write-exception\n \n=\n \ntrue\n\n\n\n\n\nImportante lembra que em \nstats\n a porta n\u00e3o pode repetir para quando configurar uma outra aplica\u00e7\u00e3o\n\n\nuwsgi_params\n\n\nNa documenta\u00e7\u00e3o oficial, precisamos definir alguns parametros para integrar com nginx \nhttps://github.com/nginx/nginx/blob/master/conf/uwsgi_params\n\n\nVamos criar o arquivo uwsgi_params.conf na raiz do projeto com o seguinte conte\u00fado:\n\n\nuwsgi_param  QUERY_STRING       \n$query_string\n;\n\nuwsgi_param  REQUEST_METHOD     \n$request_method\n;\n\nuwsgi_param  CONTENT_TYPE       \n$content_type\n;\n\nuwsgi_param  CONTENT_LENGTH     \n$content_length\n;\n\n\nuwsgi_param  REQUEST_URI        \n$request_uri\n;\n\nuwsgi_param  PATH_INFO          \n$document_uri\n;\n\nuwsgi_param  DOCUMENT_ROOT      \n$document_root\n;\n\nuwsgi_param  SERVER_PROTOCOL    \n$server_protocol\n;\n\nuwsgi_param  REQUEST_SCHEME     \n$scheme\n;\n\nuwsgi_param  HTTPS              \n$https\n if_not_empty\n;\n\n\nuwsgi_param  REMOTE_ADDR        \n$remote_addr\n;\n\nuwsgi_param  REMOTE_PORT        \n$remote_port\n;\n\nuwsgi_param  SERVER_PORT        \n$server_port\n;\n\nuwsgi_param  SERVER_NAME        \n$server_name\n;\n\n\n\n\n\nPara testar se esta tudo funcionando, vamos rodar o seguinte comando:\n\n\ncd %diretorio_projeto%\nuwsgi --ini uwsgi.ini\n\n\n\n\nnginx\n\u00b6\n\n\nVamos instalar o servidor nginx:\n\n\nsudo apt-get install nginx\n\n\n\n\nAp\u00f3s instalado, acesse o diretorio \ncd /etc/nginx/sites-avaliable\n\n\nVamos criar a configura\u00e7\u00e3o \ntouch projeto1.conf\n\n\n\n\nServidor web para frontend na porta 80\n\n\nServidor web para backend mapeando as rotas /statics e / utilizando socket para integrar com uwsgi\n\n\n\n\nImportante ter o dns configurado para utiliza\u00e7\u00e3o de nomes (exemplo: projeto1.seudominio.com)\n\n\n# projeto1.conf\n\n\n\n# Frontend server\n\nserver \n{\n\n    \n# porta\n\n    listen \n80\n;\n\n    \n# nome DNS\n\n    server_name projeto1.seudominio.com\n;\n\n    \n# caminho raiz\n\n    root /home/deploy/projects/projeto1/frontend/dist\n;\n\n    \n# index file\n\n    index index.html\n;\n\n    \n# locais\n\n    location / \n{\n\n        try_files \n$uri\n \n$uri\n/ \n=\n404\n;\n\n    \n}\n\n\n}\n\n\n\n# Backend server\n\nserver \n{\n\n    \n# porta\n\n    listen \n8000\n;\n\n    \n# nome DNS\n\n    server_name projeto1.seudominio.com\n;\n\n    \n# charset\n\n    charset utf-8\n;\n\n    \n# configs\n\n    client_body_in_file_only clean\n;\n\n    client_body_buffer_size 32M\n;\n\n    sendfile on\n;\n\n    keepalive_timeout \n120\n;\n\n    send_timeout 300s\n;\n\n    client_max_body_size 300M\n;\n\n\n    \n# local /static\n\n    location /static \n{\n\n        \nalias\n /home/deploy/projects/projeto1/static\n;\n\n    \n}\n\n\n    \n# local /\n\n    location / \n{\n\n        \n# socket\n\n        uwsgi_pass projeto1\n;\n\n        \n# configs\n\n        proxy_read_timeout 40s\n;\n\n        proxy_send_timeout 40s\n;\n\n        uwsgi_ignore_client_abort on\n;\n\n        \n# params\n\n        include     /home/deploy/projects/projeto1/uwsgi_params\n;\n\n    \n}\n\n\n}\n\n\n# Reader socket\n\nupstream projeto1 \n{\n\n    server unix:///home/deploy/projects/projeto1/projeto1.sock\n;\n\n\n}\n\n\n\n\n\nFeito isso vamos ativar o site e reiniciar o nginx\n\n\nsudo ln -s /etc/nginx/sites-avaliable/projeto1.conf /etc/nginx/sites-enable/\nsudo /etc/init.d/nginx restart\n\n\n\n\nPara testar, abra o navegador e acesse o endere\u00e7o \nprojeto1.seudominio.com:8000\n e voc\u00ea ira recever um erro 502 Bad Gateway\n\n\nIsso ocorre porque o socket do uwsgi n\u00e3o est\u00e1 em execu\u00e7\u00e3o. Vamos no projeto e rodar o mesmo.\n\n\ncd\n raiz_projeto\nuwsgi --ini uwsgi.ini\n\n\n\n\nAcesse novamente e o site estara funcionando!\n\n\nSupervisor\n\u00b6\n\n\nPara n\u00e3o ter a necessidade de ficar levantando o uwsgi e nginx toda vez vamos automatizar essa tarefa com o supervisor.\n\n\nPara instalar e configurar\n\n\nsudo apt-get install supervisor\nsudo touch /etc/supervisor/conf.d/projeto1.conf\n\n\n\n\nDentro do arquivo, vamos colocar a seguinte estrutura\n\n\n[\nprogram:projeto1\n]\n\n\nuser\n \n=\n deploy\n\ncommand\n \n=\n /home/deploy/.pyenv/shims/uwsgi --ini /home/deploy/projects/projeto1/uwsgi.ini\n\nautostart\n \n=\n \ntrue\n\n\nenvironment\n=\nLD_LIBRARY_PATH\n=\n'/usr/lib/oracle/12.2/client64/lib/${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}'\n,ORACLE_HOME\n=\n'/usr/lib/oracle/12.2/client64/'\n,TNS_ADMIN\n=\n'$ORACLE_HOME/network/admin'\n\n\n\n[\nprogram:nginx\n]\n\n\ncommand\n \n=\n /usr/sbin/nginx\n\nuser\n \n=\n root\n\nautostart\n \n=\n \ntrue\n\n\n\n\n\nFinalizado, vamos instalar o programa no supervisor\n\n\nsudo supervisorctl reread\nsudo supervisorctl start all\n\n\nFeito isso, sitema configurado e pronto!\n\n\nLinks\n\u00b6\n\n\n\n\nhttp://uwsgi-docs.readthedocs.io/en/latest/\n\n\nhttps://docs.djangoproject.com/pt-br/1.11/howto/deployment/wsgi/uwsgi/\n\n\nhttps://www.digitalocean.com/community/tutorials/how-to-serve-django-applications-with-uwsgi-and-nginx-on-ubuntu-16-04",
            "title": "Ubuntu + Nginx + uwsgi + supervisor para Django"
        },
        {
            "location": "/wgalleti.github.io/servidores/nginx/python/#ubuntu-nginx-uwsgi-supervisor-para-django",
            "text": "Primeiro vale lembrar que esse \u00e9 mais um guia do que um tutorial!   Revisado e testado em 2017-09-28",
            "title": "Ubuntu + Nginx + uwsgi + supervisor para Django"
        },
        {
            "location": "/wgalleti.github.io/servidores/nginx/python/#agradecimentos",
            "text": "Antes de mais nada, agradecer a galera que me ajudaram muito!!!   Valeu mo\u00e7ada!!!   Alessandro Folk  Rodrigo Rodrigues (grupo ngMasters)  Romulo (grupo ngMasters)",
            "title": "Agradecimentos"
        },
        {
            "location": "/wgalleti.github.io/servidores/nginx/python/#preparando-servidor",
            "text": "",
            "title": "Preparando servidor"
        },
        {
            "location": "/wgalleti.github.io/servidores/nginx/python/#criando-usuario",
            "text": "useradd -m -d /home/deploy -G adm,www-data,sudo -s /bin/bash deploy\npasswd deploy  Para confirmar as pemiss\u00f5es, verifique o arquivo  /etc/passwd  deploy:x:1001:1001::/home/deploy:/bin/bash  Verifique se o arquivo /home/deploy/.profile est\u00e1 com as seguintes informa\u00e7\u00f5es  # ~/.profile: executed by the command interpreter for login shells.  # This file is not read by bash(1), if ~/.bash_profile or ~/.bash_login  # exists.  # see /usr/share/doc/bash/examples/startup-files for examples.  # the files are located in the bash-doc package.  # the default umask is set in /etc/profile; for setting the umask  # for ssh logins, install and configure the libpam-umask package.  #umask 022  # if running bash  if   [  -n  \" $BASH_VERSION \"   ] ;   then       # include .bashrc if it exists       if   [  -f  \" $HOME /.bashrc\"   ] ;   then          .  \" $HOME /.bashrc\"       fi  fi   # set PATH so it includes user's private bin directories  PATH = \" $HOME /bin: $HOME /.local/bin: $PATH \"",
            "title": "Criando usu\u00e1rio"
        },
        {
            "location": "/wgalleti.github.io/servidores/nginx/python/#rede",
            "text": "Troque o usu\u00e1rio  As configura\u00e7\u00f5es abaixo poder\u00e3o ser feitas com usu\u00e1rio  deploy  pois o mesmo foi criado como adminitrador!!!   Adicionando dns e dominio de busca  sudo nano /etc/resolvconf/resolv.conf.d/tail\n\n-- Add\nnameserver  192 .168.0.16\nsearch gruposcheffer.com",
            "title": "Rede"
        },
        {
            "location": "/wgalleti.github.io/servidores/nginx/python/#git",
            "text": "Primeiro vamo configurar o git. Para isso vamos criar a chave ssh e configurar o usu\u00e1rio e email global  Vamos Gerar a Chave  ssh-keygen -t rsa -C  \"email@dominio.com\" \n\nGenerating public/private rsa key pair.\nEnter file in which to save the key  ( /home/deploy/.ssh/id_rsa ) : [ Enter ] \nCreated directory  '/home/deploy/.ssh' .\nEnter passphrase  ( empty  for  no passphrase ) : [ Senha ] \nEnter same passphrase again: [ Repete a Senha ] \nYour identification has been saved in /home/deploy/.ssh/id_rsa.\nYour public key has been saved in /home/deploy/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256:***************************** ti@gruposcheffer.com.br  Aplique a chave no seu servidor de vers\u00f5es (gitlab, ou github)  Configurando usu\u00e1rio global  git config --global user.name  \"Seu Nome\" \ngit config --global user.email  \"email@dominio.com\"",
            "title": "Git"
        },
        {
            "location": "/wgalleti.github.io/servidores/nginx/python/#oracle",
            "text": "Obs  Essa foi a forma mais rapida de instalar e configurar o oracle no ubuntu!!!   Refer\u00eancia   https://help.ubuntu.com/community/Oracle%20Instant%20Client  Baixe os rpm's do site  http://www.oracle.com/technetwork/topics/linuxx86-64soft-092277.html  e de permiss\u00e3o de execu\u00e7\u00e3o nos mesmos.  PS : basic, sqlplus, devel  Para efetuar a instala\u00e7\u00e3o, vamos usar o alien  sudo apt-get install alien libaio1 libaio1:i386\n\nsudo alien -i oracle-instantclient12.2-basic-12.2.0.1.0-1.x86_64.rpm\nsudo alien -i oracle-instantclient12.2-devel-12.2.0.1.0-1.x86_64.rpm\nsudo alien -i oracle-instantclient12.2-sqlplus-12.2.0.1.0-1.x86_64.rpm\n\n  echo   'export LD_LIBRARY_PATH=/usr/lib/oracle/12.2/client64/lib/${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}'  >> ~/.profile\n\n sudo vi /etc/ld.so.conf.d/oracle.conf  &&  sudo chmod o+r /etc/ld.so.conf.d/oracle.conf # Add This on /etc/ld.so.conf.d/oracle.conf \n /usr/lib/oracle/12.2/client64/lib/\nsudo ldconfig echo   'export ORACLE_HOME=/usr/lib/oracle/12.2/client64'  >> ~/.profile echo   'export TNS_ADMIN=$ORACLE_HOME/network/admin'  >> ~/.profile echo   'export PATH=$PATH:$ORACLE_HOME/bin'  >> ~/.profile source  ~/.profile\n\nmkdir -p  $TNS_ADMIN \nsudo touch  $TNS_ADMIN /tnsnames.ora\nsudo chmod o+r  $TNS_ADMIN /tnsnames.ora  Adicione os tns no arquivo tnsnames.ora e feito!",
            "title": "Oracle"
        },
        {
            "location": "/wgalleti.github.io/servidores/nginx/python/#frontend",
            "text": "Vamos instalar o node 6 e npm para depois adicionar as libs de frontend  sudo apt install python-software-properties\ncurl -sL https://deb.nodesource.com/setup_6.x  |  sudo -E bash -\nsudo apt-get install nodejs\n\n~$ node -v\nv4.2.6\n~$ npm -v 3 .5.2  Agora vamos preparar algumas libs para o frontend (compila\u00e7\u00e3o)  sudo npm i -g bower gulp yarn @angular/cli\n\n~$ bower -v 1 .8.2\n~$ yarn -v 1 .1.0\n~$ gulp -v [ 11 :08:52 ]  CLI version  3 .9.1",
            "title": "Frontend"
        },
        {
            "location": "/wgalleti.github.io/servidores/nginx/python/#backend",
            "text": "Dependencias  sudo apt-get install build-essential libssl-dev libffi-dev python3-dev  Instalando o pyenv  sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev  \\ \nlibreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev  \\ \nxz-utils tk-dev\n\ngit clone https://github.com/pyenv/pyenv.git ~/.pyenv echo   'export PYENV_ROOT=\"$HOME/.pyenv\"'  >> ~/.profile echo   'export PATH=\"$PYENV_ROOT/bin:$PATH\"'  >> ~/.profile echo  -e  'if command -v pyenv 1>/dev/null 2>&1; then\\n  eval \"$(pyenv init -)\"\\nfi'  >> ~/.profile  Vamos instalar o python 3.6.2  pyenv install  3 .6.2\npyenv global  3 .6.2\npython -V",
            "title": "Backend"
        },
        {
            "location": "/wgalleti.github.io/servidores/nginx/python/#uwsgi",
            "text": "PS: Caso esteja com virtualenv ativo, desative o mesmo  deactive  Instale o uwsgi  pip install uwsgi  Precisamos configurar um arquivo de uwsgi para cada projeto.  Nesse exemplo vamos utilizar as seguintes propriedades:   socket: Arquivo que ser\u00e1 gerado o socket para comunica\u00e7\u00e3o   master: Ativar Processos master  wsgi-file: Arquivo uwsgi do projeto django  processes: Quantidade de Processos  enable-threads: Ativar Threads  threads: Quantidades de threads por processo  max_requests: Maximo de requisi\u00e7\u00f5es  harakiri:   stats: status do socket  stats-http: mostra status no http  uid: usu\u00e1rio do SO  gid: grupo do SO  chmod-socket: permiss\u00e3o do Socket  chdir: diretorio raiz do projeto  home: diretorio do virutalenv  logger: arquivo de log  vacuum: Limpar ao fechar  ignore-write-errors: Ignorar escrita de erros  disable-write-exception: Desativar escrita de exce\u00e7\u00f5es   Nosso arquivo de exemplo que ficara no projeto1 ( raiz do projeto/uwsgi.ini ), ficar\u00e1 com a seguinte estrutura:  [uwsgi]  socket   =   projeto1.sock  master   =   true  wsgi-file   =   projeto1/wsgi.py  processes   =   2  enable-threads   =   true  threads   =   10  max_requests   =   100  harakiri   =   60  stats   =   127.0.0.1:9191  stats-http   =   true  uid   =   www-data  gid   =   www-data  chmod-socket   =   666  chdir   =   /home/deploy/projects/projeto1  home   =   /home/deploy/projects/projeto1/.venv/  logger   =   file:/home/deploy/projects/projeto1/logs/uwsgi.log  vacuum   =   true  ignore-write-errors   =   true  disable-write-exception   =   true   Importante lembra que em  stats  a porta n\u00e3o pode repetir para quando configurar uma outra aplica\u00e7\u00e3o  uwsgi_params  Na documenta\u00e7\u00e3o oficial, precisamos definir alguns parametros para integrar com nginx  https://github.com/nginx/nginx/blob/master/conf/uwsgi_params  Vamos criar o arquivo uwsgi_params.conf na raiz do projeto com o seguinte conte\u00fado:  uwsgi_param  QUERY_STRING        $query_string ; \nuwsgi_param  REQUEST_METHOD      $request_method ; \nuwsgi_param  CONTENT_TYPE        $content_type ; \nuwsgi_param  CONTENT_LENGTH      $content_length ; \n\nuwsgi_param  REQUEST_URI         $request_uri ; \nuwsgi_param  PATH_INFO           $document_uri ; \nuwsgi_param  DOCUMENT_ROOT       $document_root ; \nuwsgi_param  SERVER_PROTOCOL     $server_protocol ; \nuwsgi_param  REQUEST_SCHEME      $scheme ; \nuwsgi_param  HTTPS               $https  if_not_empty ; \n\nuwsgi_param  REMOTE_ADDR         $remote_addr ; \nuwsgi_param  REMOTE_PORT         $remote_port ; \nuwsgi_param  SERVER_PORT         $server_port ; \nuwsgi_param  SERVER_NAME         $server_name ;   Para testar se esta tudo funcionando, vamos rodar o seguinte comando:  cd %diretorio_projeto%\nuwsgi --ini uwsgi.ini",
            "title": "uWsgi"
        },
        {
            "location": "/wgalleti.github.io/servidores/nginx/python/#nginx",
            "text": "Vamos instalar o servidor nginx:  sudo apt-get install nginx  Ap\u00f3s instalado, acesse o diretorio  cd /etc/nginx/sites-avaliable  Vamos criar a configura\u00e7\u00e3o  touch projeto1.conf   Servidor web para frontend na porta 80  Servidor web para backend mapeando as rotas /statics e / utilizando socket para integrar com uwsgi   Importante ter o dns configurado para utiliza\u00e7\u00e3o de nomes (exemplo: projeto1.seudominio.com)  # projeto1.conf  # Frontend server \nserver  { \n     # porta \n    listen  80 ; \n     # nome DNS \n    server_name projeto1.seudominio.com ; \n     # caminho raiz \n    root /home/deploy/projects/projeto1/frontend/dist ; \n     # index file \n    index index.html ; \n     # locais \n    location /  { \n        try_files  $uri   $uri /  = 404 ; \n     }  }  # Backend server \nserver  { \n     # porta \n    listen  8000 ; \n     # nome DNS \n    server_name projeto1.seudominio.com ; \n     # charset \n    charset utf-8 ; \n     # configs \n    client_body_in_file_only clean ; \n    client_body_buffer_size 32M ; \n    sendfile on ; \n    keepalive_timeout  120 ; \n    send_timeout 300s ; \n    client_max_body_size 300M ; \n\n     # local /static \n    location /static  { \n         alias  /home/deploy/projects/projeto1/static ; \n     } \n\n     # local / \n    location /  { \n         # socket \n        uwsgi_pass projeto1 ; \n         # configs \n        proxy_read_timeout 40s ; \n        proxy_send_timeout 40s ; \n        uwsgi_ignore_client_abort on ; \n         # params \n        include     /home/deploy/projects/projeto1/uwsgi_params ; \n     }  }  # Reader socket \nupstream projeto1  { \n    server unix:///home/deploy/projects/projeto1/projeto1.sock ;  }   Feito isso vamos ativar o site e reiniciar o nginx  sudo ln -s /etc/nginx/sites-avaliable/projeto1.conf /etc/nginx/sites-enable/\nsudo /etc/init.d/nginx restart  Para testar, abra o navegador e acesse o endere\u00e7o  projeto1.seudominio.com:8000  e voc\u00ea ira recever um erro 502 Bad Gateway  Isso ocorre porque o socket do uwsgi n\u00e3o est\u00e1 em execu\u00e7\u00e3o. Vamos no projeto e rodar o mesmo.  cd  raiz_projeto\nuwsgi --ini uwsgi.ini  Acesse novamente e o site estara funcionando!",
            "title": "nginx"
        },
        {
            "location": "/wgalleti.github.io/servidores/nginx/python/#supervisor",
            "text": "Para n\u00e3o ter a necessidade de ficar levantando o uwsgi e nginx toda vez vamos automatizar essa tarefa com o supervisor.  Para instalar e configurar  sudo apt-get install supervisor\nsudo touch /etc/supervisor/conf.d/projeto1.conf  Dentro do arquivo, vamos colocar a seguinte estrutura  [ program:projeto1 ]  user   =  deploy command   =  /home/deploy/.pyenv/shims/uwsgi --ini /home/deploy/projects/projeto1/uwsgi.ini autostart   =   true  environment = LD_LIBRARY_PATH = '/usr/lib/oracle/12.2/client64/lib/${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}' ,ORACLE_HOME = '/usr/lib/oracle/12.2/client64/' ,TNS_ADMIN = '$ORACLE_HOME/network/admin'  [ program:nginx ]  command   =  /usr/sbin/nginx user   =  root autostart   =   true   Finalizado, vamos instalar o programa no supervisor  sudo supervisorctl reread\nsudo supervisorctl start all \nFeito isso, sitema configurado e pronto!",
            "title": "Supervisor"
        },
        {
            "location": "/wgalleti.github.io/servidores/nginx/python/#links",
            "text": "http://uwsgi-docs.readthedocs.io/en/latest/  https://docs.djangoproject.com/pt-br/1.11/howto/deployment/wsgi/uwsgi/  https://www.digitalocean.com/community/tutorials/how-to-serve-django-applications-with-uwsgi-and-nginx-on-ubuntu-16-04",
            "title": "Links"
        }
    ]
}